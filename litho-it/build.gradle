apply plugin: 'com.android.library'

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion

    useLibrary 'org.apache.http.legacy'

    defaultConfig {
        minSdkVersion rootProject.minSdkVersion

        javaCompileOptions {
            annotationProcessorOptions {
                // We transitively depend on auto-value which we don't want to
                // use as annotation processor at this time, so we can safely
                // disable this warning.
                includeCompileClasspath false
            }
        }
    }

    testOptions {
        unitTests.all {
            jvmArgs '-Dcom.facebook.litho.is_oss=true'
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
            }
        }
    }
}

dependencies {
    api project(':litho-core')
    testCompileOnly project(':litho-annotations')
    testImplementation project(':litho-stubs')
    testImplementation project(':litho-testing')
    testImplementation project(':litho-widget')
    testImplementation project(':litho-processor')

    // Testing
    testCompileOnly deps.jsr305
    testImplementation deps.assertjCore
    testImplementation deps.compileTesting
    testImplementation deps.junit
    testImplementation deps.mockitoCore
    testImplementation deps.javapoet
    testImplementation deps.powermockJunit
    testImplementation deps.powermockMockito
    testImplementation deps.powermockXstream
    testImplementation deps.robolectric
    testImplementation deps.soloader
    testImplementation deps.supportAppCompat
    testImplementation deps.supportCoreUi
    testImplementation deps.supportRecyclerView
    testImplementation files(getRuntimeJar())
}

static def getRuntimeJar() {
    try {
        final File javaBase = new File(System.getProperty("java.home")).getCanonicalFile();
        File runtimeJar = new File(javaBase, "lib/rt.jar");
        if (runtimeJar.exists()) {
            return runtimeJar;
        }
        runtimeJar = new File(javaBase, "jre/lib/rt.jar");
        return runtimeJar.exists() ? runtimeJar : null;
    } catch (IOException e) {
        throw new RuntimeException(e);
    }
}
