/*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.facebook.litho;

import static org.assertj.core.api.Java6Assertions.assertThat;

import com.facebook.litho.testing.testrunner.LithoTestRunner;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(LithoTestRunner.class)
public class TransitionUtilsTest {

  private static final String GLOBAL_KEY = "global-key";
  private static final String TRANSITION_KEY = "transition-key";
  private static final String TRANSITION_OWNER_KEY = "transition-owner-key";

  @Test
  public void noTransitionKeyTest() {
    TransitionId id =
        TransitionUtils.createTransitionId(
            null, Transition.DEFAULT_TRANSITION_KEY_TYPE, TRANSITION_OWNER_KEY, GLOBAL_KEY);
    assertThat(id).isNotNull();
    assertThat(id.mType).isEqualTo(TransitionId.Type.AUTOGENERATED);
  }

  @Test
  public void defaultTransitionKeyTest() {
    TransitionId id =
        TransitionUtils.createTransitionId(
            TRANSITION_KEY,
            Transition.DEFAULT_TRANSITION_KEY_TYPE,
            TRANSITION_OWNER_KEY,
            GLOBAL_KEY);
    assertThat(id).isNotNull();
    assertThat(id.mType).isEqualTo(TransitionId.Type.SCOPED);
    assertThat(id.mReference).isEqualTo(TRANSITION_KEY);
    assertThat(id.mExtraData).isEqualTo(TRANSITION_OWNER_KEY);
  }

  @Test
  public void globalTransitionKeyTest() {
    TransitionId id =
        TransitionUtils.createTransitionId(
            TRANSITION_KEY, Transition.TransitionKeyType.GLOBAL, TRANSITION_OWNER_KEY, GLOBAL_KEY);
    assertThat(id).isNotNull();
    assertThat(id.mType).isEqualTo(TransitionId.Type.GLOBAL);
    assertThat(id.mReference).isEqualTo(TRANSITION_KEY);
  }

  @Test
  public void localTransitionKeyTest() {
    TransitionId id =
        TransitionUtils.createTransitionId(
            TRANSITION_KEY, Transition.TransitionKeyType.LOCAL, TRANSITION_OWNER_KEY, GLOBAL_KEY);
    assertThat(id).isNotNull();
    assertThat(id.mType).isEqualTo(TransitionId.Type.SCOPED);
    assertThat(id.mReference).isEqualTo(TRANSITION_KEY);
    assertThat(id.mExtraData).isEqualTo(TRANSITION_OWNER_KEY);
  }

  @Test(expected = IllegalArgumentException.class)
  public void unhandledTransitionKeyTypeTest() {
    TransitionUtils.createTransitionId(TRANSITION_KEY, null, TRANSITION_OWNER_KEY, GLOBAL_KEY);
  }
}
