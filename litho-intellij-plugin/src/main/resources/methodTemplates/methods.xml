<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) Facebook, Inc. and its affiliates.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<templateSet>
  <OnAttached method="@com.facebook.litho.annotations.OnAttached static void onAttached(com.facebook.litho.ComponentContext c) {&#xA;/* TODO: https://fblitho.com/docs/onattached-ondetached */}"/>
  <OnCreateInitialState method="@com.facebook.litho.annotations.OnCreateInitialState static void onCreateInitialState(com.facebook.litho.ComponentContext c) {&#xA;/* TODO: Use `File -> New -> Litho Component` menu */}"/>
  <OnCreateLayout method="@com.facebook.litho.annotations.OnCreateLayout static com.facebook.litho.Component onCreateLayout(com.facebook.litho.ComponentContext c) {&#xA;/* TODO: Use `File -> New -> Litho Component` menu */return com.facebook.litho.Column.create();}"/>
  <OnCreateLayoutWithSizeSpec method="@com.facebook.litho.annotations.OnCreateLayoutWithSizeSpec static com.facebook.litho.Component onCreateLayout(com.facebook.litho.ComponentContext c, int widthSpec, int heightSpecm) {&#xA;/* TODO: https://fblitho.com/docs/custom-layout.html */return com.facebook.litho.Column.create();}"/>
  <OnCreateTransition method="@com.facebook.litho.annotations.OnCreateTransition static com.facebook.litho.Transition onCreateTransition(com.facebook.litho.ComponentContext c) {&#xA;/* TODO: https://fblitho.com/docs/transition-basics */return com.facebook.litho.Transition.create();}"/>
  <OnDetached method="@com.facebook.litho.annotations.OnDetached static void onDetached(com.facebook.litho.ComponentContext c) {&#xA;/* TODO: https://fblitho.com/docs/onattached-ondetached */}"/>
  <OnUpdateState method="@com.facebook.litho.annotations.OnUpdateState static void onUpdateState(com.facebook.litho.StateValue&lt;placeholder_type&gt; placeholder_name) {&#xA;/* TODO: https://fblitho.com/docs/state#defining-state-updates */}"/>
  <OnUpdateStateWithTransition method="@com.facebook.litho.annotations.OnUpdateStateWithTransition static com.facebook.litho.Transition onUpdateStateWithTransition() {&#xA;/* TODO: https://fblitho.com/docs/transition-definitions#onupdatestatewithtransition */return com.facebook.litho.Transition.create();}"/>
  <OnCreateMountContent method="@androidx.annotation.UiThread @com.facebook.litho.annotations.OnCreateMountContent static android.graphics.drawable.ColorDrawable onCreateMountContent(android.content.Context context) {&#xA;/* TODO: https://fblitho.com/docs/mount-specs#mounting */return new android.graphics.drawable.ColorDrawable();}"/>
  <OnPrepare method="@com.facebook.litho.annotations.OnPrepare static void onPrepare(com.facebook.litho.ComponentContext c) {&#xA;/* TODO: https://fblitho.com/docs/mount-specs#inter-stage-inputs-and-outputs */}"/>
  <OnBoundsDefined method="@com.facebook.litho.annotations.OnBoundsDefined static void onBoundsDefined(com.facebook.litho.ComponentContext c, com.facebook.litho.ComponentLayout layout) {&#xA;/* TODO: https://fblitho.com/docs/mount-specs */}"/>
  <OnUnbind method="@androidx.annotation.UiThread @com.facebook.litho.annotations.OnUnbind static void onUnbind(com.facebook.litho.ComponentContext c, android.graphics.drawable.ColorDrawable colorDrawable) {&#xA;/* TODO: https://fblitho.com/docs/mount-specs */}"/>
  <OnBind method="@androidx.annotation.UiThread @com.facebook.litho.annotations.OnBind static void onBind(com.facebook.litho.ComponentContext c, android.graphics.drawable.ColorDrawable colorDrawable) {&#xA;/* TODO: https://fblitho.com/docs/mount-specs */}"/>
  <OnUnmount method="@androidx.annotation.UiThread @com.facebook.litho.annotations.OnUnmount static void onUnmount(com.facebook.litho.ComponentContext c, android.graphics.drawable.ColorDrawable colorDrawable) {&#xA;/* TODO: https://fblitho.com/docs/mount-specs#mounting */}"/>
  <OnMeasure method="@com.facebook.litho.annotations.OnMeasure static void onMeasure(com.facebook.litho.ComponentContext c, com.facebook.litho.ComponentLayout layout, int widthSpec, int heightSpec, com.facebook.litho.Size size) {&#xA;/* TODO: https://fblitho.com/docs/mount-specs#measurement */}"/>
  <OnMount method="@androidx.annotation.UiThread @com.facebook.litho.annotations.OnMount static void onMount(com.facebook.litho.ComponentContext c, android.graphics.drawable.ColorDrawable colorDrawable) {&#xA;/* TODO: https://fblitho.com/docs/mount-specs#mounting */}"/>
  <ShouldUpdate method="@com.facebook.litho.annotations.ShouldUpdate static boolean shouldUpdate() {&#xA;/* https://fblitho.com/docs/mount-specs#shouldupdate */return false;}"/>
  <OnCalculateCachedValue method="@com.facebook.litho.annotations.OnCalculateCachedValue(name = &quot;expensiveValue&quot;) static int onCalculateCachedValue() {&#xA;/* TODO: https://fblitho.com/docs/cached-values */return 0;}"/>
  <OnCreateMountContentPool method="@com.facebook.litho.annotations.OnCreateMountContentPool static com.facebook.litho.MountContentPool onCreateMountContentPool() {&#xA;/* TODO: https://fblitho.com/docs/mainconcepts/uicomposition/mount-specs/#pre-allocation */return new com.facebook.litho.DefaultMountContentPool(&quot;MyCustomPool&quot;, 3, true);}"/>
  <OnExitedRange method="@com.facebook.litho.annotations.OnExitedRange(name = &quot;prefetch&quot;) static void onExitedWorkingRange(com.facebook.litho.ComponentContext c) {&#xA;/* TODO: https://fblitho.com/docs/sections-working-ranges */}"/>
  <OnEnteredRange method="@com.facebook.litho.annotations.OnEnteredRange(name = &quot;prefetch&quot;) static void onEnteredWorkingRange(com.facebook.litho.ComponentContext c) {&#xA;/* TODO: https://fblitho.com/docs/sections-working-ranges */}"/>
  <OnRegisterRanges method="@com.facebook.litho.annotations.OnRegisterRanges static void registerWorkingRanges(com.facebook.litho.ComponentContext c) {&#xA;/* TODO: https://fblitho.com/docs/sections-working-ranges */}"/>
  <OnError method="@com.facebook.litho.annotations.OnError static void onError(com.facebook.litho.ComponentContext c, java.lang.Exception error) {&#xA;/* TODO: https://fblitho.com/docs/error-boundaries */}"/>
  <OnLoadStyle method="@com.facebook.litho.annotations.OnLoadStyle static void onLoadStyle(com.facebook.litho.ComponentContext c) {&#xA;/* TODO: https://fblitho.com/docs/styles */}"/>
  <OnPopulateAccessibilityNode method="@com.facebook.litho.annotations.OnPopulateAccessibilityNode static void onPopulateAccessibilityNode(android.view.View host, androidx.core.view.accessibility.AccessibilityNodeInfoCompat accessibilityNode) {&#xA;/* TODO: https://fblitho.com/docs/accessibility#custom-accessibility */}"/>
  <OnPopulateExtraAccessibilityNode method="@com.facebook.litho.annotations.OnPopulateExtraAccessibilityNode static void onPopulateExtraAccessibilityNode(androidx.core.view.accessibility.AccessibilityNodeInfoCompat node, int extraNodeIndex, int componentBoundsLeft, int componentBoundsTop) {&#xA;/* TODO: https://fblitho.com/docs/accessibility#extra-accessibility-nodes */}"/>
  <GetExtraAccessibilityNodesCount method="@com.facebook.litho.annotations.GetExtraAccessibilityNodesCount static int getExtraAccessibilityNodesCount() {&#xA;/* TODO: https://fblitho.com/docs/accessibility/accessibility-overview */return 0;}"/>
  <GetExtraAccessibilityNodeAt method="@com.facebook.litho.annotations.GetExtraAccessibilityNodeAt static int getExtraAccessibilityNodeAt(int x, int y) {&#xA;/* TODO: https://fblitho.com/docs/accessibility/accessibility-overview */return -1;}"/>
  <OnMeasureBaseline method="@com.facebook.litho.annotations.OnMeasureBaseline static int onMeasureBaseline(com.facebook.litho.ComponentContext c, int width, int height) {&#xA;/* TODO: https://fblitho.com/docs/mainconcepts/uicomposition/flexbox-yoga/#distribution-along-cross-axis */return height;}"/>
  <OnCreateTreeProp method="@com.facebook.litho.annotations.OnCreateTreeProp static placeholder_tree_prop_type onCreateTreeProp(com.facebook.litho.ComponentContext c) {&#xA; /* TODO: https://fblitho.com/docs/mainconcepts/coordinate-state-actions/treeprops */}" />
  <OnEvent method="@com.facebook.litho.annotations.OnEvent(com.facebook.litho.ClickEvent.class) static void onClickEvent(com.facebook.litho.ComponentContext c, @com.facebook.litho.annotations.FromEvent android.view.View view) {&#xA;}"/>
  <OnTrigger method="@com.facebook.litho.annotations.OnTrigger(com.facebook.litho.annotations.Event.class) static void onTriggerEvent(com.facebook.litho.ComponentContext c, @com.facebook.litho.annotations.FromTrigger Object obj) {&#xA;}"/>
  <!-- SectionSpec method completion -->
  <OnCreateChildren method="@com.facebook.litho.sections.annotations.OnCreateChildren static com.facebook.litho.sections.Children onCreateChildren(com.facebook.litho.sections.SectionContext c) {&#xA;/* TODO: https://fblitho.com/docs/group-sections */return com.facebook.litho.sections.Children.create().build();}" />
  <SectionSpec.OnCreateInitialState method="@com.facebook.litho.annotations.OnCreateInitialState static void onCreateInitialState(com.facebook.litho.sections.SectionContext c) {&#xA;/* TODO: https://fblitho.com/docs/state#initializing-a-state-value */}"/>
  <OnCreateService method="@com.facebook.litho.sections.annotations.OnCreateService static placeholder_service_type OnCreateService(com.facebook.litho.sections.SectionContext c) {&#xA; /* TODO: https://fblitho.com/docs/services#null__oncreateservice */}" />
  <OnBindService method="@com.facebook.litho.sections.annotations.OnBindService static void onBindService(com.facebook.litho.sections.SectionContext c, placeholder_service_type service) {&#xA; /* TODO: https://fblitho.com/docs/services#null__onbindservice-and-onunbindservice */}" />
  <OnUnbindService method="@com.facebook.litho.sections.annotations.OnUnbindService static void onUnbindService(com.facebook.litho.sections.SectionContext c, placeholder_service_type service) {&#xA; /* TODO: https://fblitho.com/docs/services#null__onbindservice-and-onunbindservice */}" />
  <OnDataBound method="@com.facebook.litho.sections.annotations.OnDataBound static void onDataBound(com.facebook.litho.sections.SectionContext c, placeholder_service_type service) {&#xA; /* TODO: https://fblitho.com/docs/sections/api-overview#lifecycles */}" />
  <OnDataRendered method="@com.facebook.litho.sections.annotations.OnDataRendered static void onDataRendered(com.facebook.litho.sections.SectionContext c, boolean isDataChanged, boolean isMounted, long monoTimestampMs, int firstVisibleIndex, int lastVisibleIndex, com.facebook.litho.sections.ChangesInfo changesInfo, int globalOffset, placeholder_service_type service) {&#xA; /* TODO: https://fblitho.com/docs/sections/api-overview#lifecycles */}" />
  <OnViewportChanged method="@com.facebook.litho.sections.annotations.OnViewportChanged static void onViewportChanged(com.facebook.litho.sections.SectionContext c, int firstVisiblePosition, int lastVisiblePosition, int totalCount, int firstFullyVisibleIndex, int lastFullyVisibleIndex, placeholder_service_type service) {&#xA; /* TODO: https://fblitho.com/docs/sections/services#use-of-services-in-context */}" />
  <OnRefresh method="@com.facebook.litho.sections.annotations.OnRefresh static void onRefresh(com.facebook.litho.sections.SectionContext c, placeholder_service_type service) {&#xA; /* TODO: https://fblitho.com/docs/sections/services#use-of-services-in-context */}" />
  <SectionSpec.OnCreateTreeProp method="@com.facebook.litho.annotations.OnCreateTreeProp static placeholder_tree_prop_type onCreateTreeProp(com.facebook.litho.sections.SectionContext c) {&#xA; /* TODO: https://fblitho.com/docs/mainconcepts/coordinate-state-actions/treeprops */}" />
  <SectionSpec.OnEvent method="@com.facebook.litho.annotations.OnEvent(com.facebook.litho.ClickEvent.class) static void onClickEvent(com.facebook.litho.sections.SectionContext c, @com.facebook.litho.annotations.FromEvent android.view.View view) {&#xA;}"/>
  <SectionSpec.OnTrigger method="@com.facebook.litho.annotations.OnTrigger(com.facebook.litho.annotations.Event.class) static void onTriggerEvent(com.facebook.litho.sections.SectionContext c, @com.facebook.litho.annotations.FromTrigger Object obj) {&#xA;}"/>
</templateSet>
