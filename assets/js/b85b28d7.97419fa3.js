"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4377],{15680:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>p,MDXProvider:()=>s,mdx:()=>g,useMDXComponents:()=>u,withMDXComponents:()=>c});var i=n(96540);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(){return r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},r.apply(this,arguments)}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=i.createContext({}),c=function(e){return function(t){var n=u(t.components);return i.createElement(e,r({},t,{components:n}))}},u=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=u(e.components);return i.createElement(p.Provider,{value:t},e.children)},m="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},h=i.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,a=e.parentName,p=d(e,["components","mdxType","originalType","parentName"]),c=u(n),s=o,m=c["".concat(a,".").concat(s)]||c[s]||f[s]||r;return n?i.createElement(m,l(l({ref:t},p),{},{components:n})):i.createElement(m,l({ref:t},p))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,a=new Array(r);a[0]=h;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l[m]="string"==typeof e?e:o,a[1]=l;for(var p=2;p<r;p++)a[p]=n[p];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}h.displayName="MDXCreateElement"},15951:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>d,default:()=>f,frontMatter:()=>l,metadata:()=>p,toc:()=>u});var i=n(58168),o=n(98587),r=(n(96540),n(15680)),a=["components"],l={id:"android-studio-plugin",title:"Litho Android Studio Plugin"},d=void 0,p={unversionedId:"ide/android-studio-plugin",id:"ide/android-studio-plugin",title:"Litho Android Studio Plugin",description:"Litho Kotlin API",source:"@site/../docs/ide/android-studio-plugin.md",sourceDirName:"ide",slug:"/ide/android-studio-plugin",permalink:"/docs/ide/android-studio-plugin",draft:!1,editUrl:"https://github.com/facebook/litho/edit/master/website/../docs/ide/android-studio-plugin.md",tags:[],version:"current",frontMatter:{id:"android-studio-plugin",title:"Litho Android Studio Plugin"},sidebar:"mainSidebar",previous:{title:"Cheatsheet",permalink:"/docs/kotlin/kotlin-api-cheatsheet"},next:{title:"Debugging Tips",permalink:"/docs/debugging/debugging-tips"}},c={},u=[{value:"Litho Kotlin API",id:"litho-kotlin-api",level:2},{value:"Litho Spec API",id:"litho-spec-api",level:2}],s={toc:u},m="wrapper";function f(e){var t=e.components,n=(0,o.A)(e,a);return(0,r.mdx)(m,(0,i.A)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.mdx)("h2",{id:"litho-kotlin-api"},"Litho Kotlin API"),(0,r.mdx)("p",null,"New Litho Kotlin API does not rely on annotation processing and code generation, its components are plain Kotlin classes, so users don't need any special IDE plugins to work with them effectively. But you still can use Litho IDE plugin to get advantage of File Templates for new Kotlin API components."),(0,r.mdx)("admonition",{type:"note"},(0,r.mdx)("p",{parentName:"admonition"},"At this time, we recommend adopting the new ",(0,r.mdx)("a",{parentName:"p",href:"/docs/kotlin/kotlin-intro"},"Litho Kotlin API")," for your development needs.")),(0,r.mdx)("h2",{id:"litho-spec-api"},"Litho Spec API"),(0,r.mdx)("p",null,"In 2019, the capabilities of the (now deprecated) Litho generative Spec API were expanded with the addition of the Litho IDE plugin. This plugin was specifically designed to enhance the functionality of IDE actions for generated code. It offered comprehensive support for key features including: Code Navigation, Code Completion, Editor Warnings, File Templates."),(0,r.mdx)("p",null,"Relevant links:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("a",{parentName:"li",href:"https://github.com/facebook/litho/tree/master/litho-intellij-plugin"},"GitHub")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("a",{parentName:"li",href:"https://plugins.jetbrains.com/plugin/14468-litho"},"Marketplace"))))}f.isMDXComponent=!0}}]);