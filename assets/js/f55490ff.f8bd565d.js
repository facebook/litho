"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8664],{15680:(e,n,a)=>{a.r(n),a.d(n,{MDXContext:()=>d,MDXProvider:()=>c,mdx:()=>g,useMDXComponents:()=>m,withMDXComponents:()=>p});var t=a(96540);function i(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function l(){return l=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var a=arguments[n];for(var t in a)Object.prototype.hasOwnProperty.call(a,t)&&(e[t]=a[t])}return e},l.apply(this,arguments)}function o(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function s(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?o(Object(a),!0).forEach((function(n){i(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function r(e,n){if(null==e)return{};var a,t,i=function(e,n){if(null==e)return{};var a,t,i={},l=Object.keys(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||(i[a]=e[a]);return i}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var d=t.createContext({}),p=function(e){return function(n){var a=m(n.components);return t.createElement(e,l({},n,{components:a}))}},m=function(e){var n=t.useContext(d),a=n;return e&&(a="function"==typeof e?e(n):s(s({},n),e)),a},c=function(e){var n=m(e.components);return t.createElement(d.Provider,{value:n},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},y=t.forwardRef((function(e,n){var a=e.components,i=e.mdxType,l=e.originalType,o=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),p=m(a),c=i,u=p["".concat(o,".").concat(c)]||p[c]||h[c]||l;return a?t.createElement(u,s(s({ref:n},d),{},{components:a})):t.createElement(u,s({ref:n},d))}));function g(e,n){var a=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var l=a.length,o=new Array(l);o[0]=y;var s={};for(var r in n)hasOwnProperty.call(n,r)&&(s[r]=n[r]);s.originalType=e,s[u]="string"==typeof e?e:i,o[1]=s;for(var d=2;d<l;d++)o[d]=a[d];return t.createElement.apply(null,o)}return t.createElement.apply(null,a)}y.displayName="MDXCreateElement"},60923:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>p,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>d,toc:()=>m});var t=a(58168),i=a(98587),l=(a(96540),a(15680)),o=["components"],s={id:"lazycollections-working-with-updates",title:"Working with Updates"},r=void 0,d={unversionedId:"kotlin/lazycollections/lazycollections-working-with-updates",id:"kotlin/lazycollections/lazycollections-working-with-updates",title:"Working with Updates",description:"Within Litho, lists are implemented using the Lazy Collection API.",source:"@site/../docs/kotlin/lazycollections/lazycollections-working-with-updates.mdx",sourceDirName:"kotlin/lazycollections",slug:"/kotlin/lazycollections/lazycollections-working-with-updates",permalink:"/docs/kotlin/lazycollections/lazycollections-working-with-updates",draft:!1,editUrl:"https://github.com/facebook/litho/edit/master/website/../docs/kotlin/lazycollections/lazycollections-working-with-updates.mdx",tags:[],version:"current",frontMatter:{id:"lazycollections-working-with-updates",title:"Working with Updates"},sidebar:"mainSidebar",previous:{title:"Interactions",permalink:"/docs/kotlin/lazycollections/lazycollections-interactions"},next:{title:"Animation Basics",permalink:"/docs/animations/transition-basics"}},p={},m=[{value:"Child identity",id:"child-identity",level:2},{value:"Avoiding unnecessary layouts",id:"avoiding-unnecessary-layouts",level:2},{value:"Using classes without <code>equals()</code> as Props",id:"using-classes-without-equals-as-props",level:3},{value:"Using lambdas as Props",id:"using-lambdas-as-props",level:3}],c={toc:m},u="wrapper";function h(e){var n=e.components,a=(0,i.A)(e,o);return(0,l.mdx)(u,(0,t.A)({},c,a,{components:n,mdxType:"MDXLayout"}),(0,l.mdx)("admonition",{type:"note"},(0,l.mdx)("p",{parentName:"admonition"},"Within Litho, lists are implemented using the Lazy Collection API.")),(0,l.mdx)("p",null,"A Lazy Collection is updated by changing the prop/state values from which it is generated."),(0,l.mdx)("p",null,"For correctness and performance, ensure the following:"),(0,l.mdx)("ol",null,(0,l.mdx)("li",{parentName:"ol"},(0,l.mdx)("a",{parentName:"li",href:"#child-identity"},"Provide Child identity")," for all children that can be updated."),(0,l.mdx)("li",{parentName:"ol"},(0,l.mdx)("a",{parentName:"li",href:"#avoiding-unnecessary-layouts"},"Avoid unnecessary layouts")," by making sure that props of children don't unnecessarily change.")),(0,l.mdx)("p",null,"The above two points are detailed in the following sections."),(0,l.mdx)("h2",{id:"child-identity"},"Child identity"),(0,l.mdx)("p",null,"Each child in a Lazy Collection has an ",(0,l.mdx)("inlineCode",{parentName:"p"},"id"),", which is assigned by the Developer."),(0,l.mdx)("p",null,"The ",(0,l.mdx)("inlineCode",{parentName:"p"},"id")," is used to determine how a collection changed after an update: children may have been added, removed, changed position, or had their content updated. Since an ",(0,l.mdx)("inlineCode",{parentName:"p"},"id")," is unique to a child, it is used to match children across changes to create minimal changeset and apply content update animations, and so on."),(0,l.mdx)("p",null,"If no ",(0,l.mdx)("inlineCode",{parentName:"p"},"id")," parameter is assigned by a Developer, then it's generated using the child's position and type (this is only sufficient for static content)."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/collection/ApplyingUpdates.kt start=start_static_id_example end=end_static_id_example",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/collection/ApplyingUpdates.kt",start:"start_static_id_example",end:"end_static_id_example"},'child(Header()) // generated id is "Header:0"\n')),(0,l.mdx)("p",null,"If the list contents can be updated, then provide unique ids that are consistent across renders."),(0,l.mdx)("p",null,"In the following example, there are two ",(0,l.mdx)("inlineCode",{parentName:"p"},"Text")," components, one is added conditionally based on ",(0,l.mdx)("inlineCode",{parentName:"p"},"shouldShowGreeting"),', the other is unconditional. If generated ids are used, the first child is always assigned the id "Text:0", so the id would be inconsistent across renders. On Android, you can fix this by manually assigning an ',(0,l.mdx)("inlineCode",{parentName:"p"},"id"),"."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/collection/ApplyingUpdates.kt start=start_child_id_example end=end_child_id_example",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/collection/ApplyingUpdates.kt",start:"start_child_id_example",end:"end_child_id_example"},'if (shouldShowGreeting.value) {\n  child(id = "greeting", component = Text("Greetings!"))\n}\nchild(id = "title", component = Text("Title"))\n')),(0,l.mdx)("p",null,"Content backed by lists should be added using the ",(0,l.mdx)("inlineCode",{parentName:"p"},"children(..)")," function: specify an ",(0,l.mdx)("inlineCode",{parentName:"p"},"id")," lambda that generates an id for each item:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/collection/ApplyingUpdates.kt start=start_children_id_example end=end_children_id_example",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/collection/ApplyingUpdates.kt",start:"start_children_id_example",end:"end_children_id_example"},"children(items = friends, id = { it.id }) { Text(it.name) }\n")),(0,l.mdx)("admonition",{type:"caution"},(0,l.mdx)("p",{parentName:"admonition"},"It is unacceptable to generate ids using a simple incrementing variable as items may change positions. Instead, use an id from the data model.")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"An ",(0,l.mdx)("inlineCode",{parentName:"strong"},"id")," must be unique and immutable.")," Breaking this contract may lead to occasional ",(0,l.mdx)("inlineCode",{parentName:"p"},"IndexOutOfBoundsException")," exceptions during layout."),(0,l.mdx)("h2",{id:"avoiding-unnecessary-layouts"},"Avoiding unnecessary layouts"),(0,l.mdx)("p",null,"During a list update, if a child with the same ",(0,l.mdx)("inlineCode",{parentName:"p"},"id")," is found in the old and new lists then the Lazy Collection automatically detects if the content has changed. If an update has not occurred, the subtree will be re-used as-is, otherwise it is re-created."),(0,l.mdx)("p",null,"Content changes are detected by checking the equality of the component's props. ",(0,l.mdx)("strong",{parentName:"p"},"If any component prop does not implement an ",(0,l.mdx)("inlineCode",{parentName:"strong"},"equals()")," then it cannot be reused"),". It is common for classes to not implement ",(0,l.mdx)("inlineCode",{parentName:"p"},"equals()")," such as Drawables, Lambdas, and data models. A little bit more work is required to avoid unnecessary layouts when these are used."),(0,l.mdx)("admonition",{type:"info"},(0,l.mdx)("p",{parentName:"admonition"},(0,l.mdx)("strong",{parentName:"p"},"The behaviour will be functionally correct by default.")," If using props that do not provide an ",(0,l.mdx)("inlineCode",{parentName:"p"},"equals()"),", the UI will still use the most up-to-date prop and state values. However, there will be unnecessary layouts, which will impact performance.")),(0,l.mdx)("h3",{id:"using-classes-without-equals-as-props"},"Using classes without ",(0,l.mdx)("inlineCode",{parentName:"h3"},"equals()")," as Props"),(0,l.mdx)("p",null,"If a component accepts a prop that does not implement an ",(0,l.mdx)("inlineCode",{parentName:"p"},"equals()")," then it will never be reused."),(0,l.mdx)("p",null,"Consider the following example:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/collection/ApplyingUpdates.kt start=start_name_list_unnecessary_update end=end_name_list_unnecessary_update",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/collection/ApplyingUpdates.kt",start:"start_name_list_unnecessary_update",end:"end_name_list_unnecessary_update"},'class Name(val firstName: String, val secondName: String)\n\nclass NameComponent(val name: Name) : KComponent() {\n  override fun ComponentScope.render(): Component = Text("${name.firstName} ${name.secondName}")\n}\n\nclass NameList_UnnecessaryUpdate : KComponent() {\n  override fun ComponentScope.render(): Component = LazyList {\n    child(NameComponent(Name("Mark", "Zuckerberg")))\n  }\n}\n')),(0,l.mdx)("p",null,"In the above example, ",(0,l.mdx)("inlineCode",{parentName:"p"},"NameComponent")," will be laid out on any update because it takes a prop of type ",(0,l.mdx)("inlineCode",{parentName:"p"},"Name")," that does not implement an ",(0,l.mdx)("inlineCode",{parentName:"p"},"equals()"),"."),(0,l.mdx)("p",null,"Unnecessary layouts can be avoided using two methods:"),(0,l.mdx)("ol",null,(0,l.mdx)("li",{parentName:"ol"},"Add an ",(0,l.mdx)("inlineCode",{parentName:"li"},"equals()")," to the ",(0,l.mdx)("inlineCode",{parentName:"li"},"Name")," class, such as by making it a ",(0,l.mdx)("inlineCode",{parentName:"li"},"data")," class. This approach will not be possible if using an uncontrolled object provided by a framework."),(0,l.mdx)("li",{parentName:"ol"},"Manually specify the dependencies that, if changed, should trigger an update.")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/collection/ApplyingUpdates.kt start=start_name_list_fixed end=end_name_list_fixed",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/collection/ApplyingUpdates.kt",start:"start_name_list_fixed",end:"end_name_list_fixed"},'class NameList_Fixed : KComponent() {\n  override fun ComponentScope.render(): Component = LazyList {\n    // Option 1. Convert to a prop with an `equals()` implementation\n    child(NameComponentWithEquals(NameWithEquals("Mark", "Zuckerberg")))\n\n    // Option 2. Manually specify dependencies (in this case empty)\n    child(deps = arrayOf()) { NameComponent(Name("Mark", "Zuckerberg")) }\n  }\n}\n')),(0,l.mdx)("p",null,"By manually specifying the dependencies, ",(0,l.mdx)("inlineCode",{parentName:"p"},"NameComponent")," is only laid out once and re-used whenever the 'example' is updated."),(0,l.mdx)("p",null,"Consider the following example, which uses an Android ",(0,l.mdx)("inlineCode",{parentName:"p"},"Drawable"),":"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/collection/ApplyingUpdates.kt start=start_drawable_unnecessary_update end=end_drawable_unnecessary_update",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/collection/ApplyingUpdates.kt",start:"start_drawable_unnecessary_update",end:"end_drawable_unnecessary_update"},'class Drawable_UnnecessaryUpdate : KComponent() {\n  override fun ComponentScope.render(): Component = LazyList {\n    child(Text("text", style = Style.background(ColorDrawable(Color.RED))))\n  }\n}\n')),(0,l.mdx)("p",null,"In the above example, the Text component will be unnecessarily laid out on every ",(0,l.mdx)("inlineCode",{parentName:"p"},"render()")," call because ColorDrawable does not implement an ",(0,l.mdx)("inlineCode",{parentName:"p"},"equals()"),"."),(0,l.mdx)("p",null,"Here, unnecessary layouts can be avoided using two techniques:"),(0,l.mdx)("ol",null,(0,l.mdx)("li",{parentName:"ol"},"Use a drawable that implements equality such as Litho\u2019s ComparableColorDrawable."),(0,l.mdx)("li",{parentName:"ol"},"Manually specify the dependencies that, if changed, will trigger an update.")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/collection/ApplyingUpdates.kt start=start_drawable_fixed end=end_drawable_fixed",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/collection/ApplyingUpdates.kt",start:"start_drawable_fixed",end:"end_drawable_fixed"},'class Drawable_Fixed : KComponent() {\n  override fun ComponentScope.render(): Component = LazyList {\n    // Option 1. Use a `ComparableDrawable` wrapper\n    child(Text("text", style = Style.background(drawableColor(Color.RED))))\n\n    // Option 2. Manually specify dependencies (in this case empty).\n    child(deps = arrayOf()) { Text("text", style = Style.background(ColorDrawable(Color.RED))) }\n  }\n}\n')),(0,l.mdx)("h3",{id:"using-lambdas-as-props"},"Using lambdas as Props"),(0,l.mdx)("p",null,"Lambdas do not provide an ",(0,l.mdx)("inlineCode",{parentName:"p"},"equals()"),", for example, ",(0,l.mdx)("inlineCode",{parentName:"p"},"{} == {}")," is ",(0,l.mdx)("inlineCode",{parentName:"p"},"false"),". This means that using a lambda as a prop may cause unnecessary layouts."),(0,l.mdx)("p",null,"To use a lambda in a Lazy Collection, wrap it in a ",(0,l.mdx)("inlineCode",{parentName:"p"},"useCallback")," hook.  This provides equality across layouts, allowing the component to be reused, and the lambda is guaranteed to use the latest captured prop and state values."),(0,l.mdx)("p",null,"Consider the following example where a lambda is passed to a component:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/collection/ApplyingUpdates.kt start=start_lambda_unnecessary_update end=end_lambda_unnecessary_update",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/collection/ApplyingUpdates.kt",start:"start_lambda_unnecessary_update",end:"end_lambda_unnecessary_update"},'class Lambda_UnnecessaryUpdate(val name: String) : KComponent() {\n  override fun ComponentScope.render(): Component = LazyList {\n    child(Text("text", style = Style.onClick { println("Hello $name") }))\n  }\n}\n')),(0,l.mdx)("p",null,"In the above example, the Text will be laid out on any update to Example because the lambda props will never be equal. This can be fixed using the ",(0,l.mdx)("inlineCode",{parentName:"p"},"useCallback")," hook:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/collection/ApplyingUpdates.kt start=start_lambda_fixed end=end_lambda_fixed",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/collection/ApplyingUpdates.kt",start:"start_lambda_fixed",end:"end_lambda_fixed"},'class Lambda_Fixed(val name: String) : KComponent() {\n  override fun ComponentScope.render(): Component {\n    val callBack = useCallback { _: ClickEvent -> println("Hello $name") }\n    return LazyList { child(Text("text", style = Style.onClick(action = callBack))) }\n  }\n}\n')),(0,l.mdx)("p",null,"Consider another example, this time displaying a shopping list:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/collection/ApplyingUpdates.kt start=start_shopping_list_example end=end_shopping_list_example",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/collection/ApplyingUpdates.kt",start:"start_shopping_list_example",end:"end_shopping_list_example"},'class ShoppingList : KComponent() {\n  override fun ComponentScope.render(): Component {\n    val shoppingList = listOf("Apples", "Cheese", "Bread")\n\n    // Create a state containing the items that should be shown with a checkmark: \u2611\n    // Initially empty\n    val checkedItems = useState { setOf<String>() }\n\n    // Create a callback to toggle the checkmark for an item\n    // States should always use immutable data, so a new Set is created\n    val toggleChecked = useCallback { item: String ->\n      checkedItems.update {\n        it.toMutableSet().apply { if (contains(item)) remove(item) else add(item) }.toSet()\n      }\n    }\n\n    return LazyList {\n      children(items = shoppingList, id = { it }) {\n        val isChecked = checkedItems.value.contains(it)\n        ShoppingListItem(it, isChecked, toggleChecked)\n      }\n    }\n  }\n}\n\nclass ShoppingListItem(\n    private val item: String,\n    private val isChecked: Boolean,\n    private val toggleSelected: (String) -> Unit,\n) : KComponent() {\n  override fun ComponentScope.render(): Component =\n      Text("${if (isChecked) "\u2611" else "\u2610"} $item", style = Style.onClick { toggleSelected(item) })\n}\n')),(0,l.mdx)("p",null,"Each shopping list item requires a lambda to toggle a checkmark. If an unwrapped lambda was used, then no component would ever be reused as lambda does not provide an ",(0,l.mdx)("inlineCode",{parentName:"p"},"equals()"),". Instead, wrap the lambda in a ",(0,l.mdx)("inlineCode",{parentName:"p"},"useCallback")," hook. This provides equality across renders and ensure that changes are applied to the latest version of the ",(0,l.mdx)("inlineCode",{parentName:"p"},"checkedItems")," state."))}h.isMDXComponent=!0}}]);