"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4470],{74646:(e,o,n)=>{n.d(o,{A:()=>m});var t=n(58168),i=n(96540),a=n(68382),l=n(45603),s=n(76062),r="0.50.2",d="0.51.0-SNAPSHOT",c="0.10.5",p="0.142.0",h=n(6342);const m=function(e){var o=e.language,n=e.code.replace(/{{site.lithoVersion}}/g,r).replace(/{{site.soloaderVersion}}/g,c).replace(/{{site.lithoSnapshotVersion}}/g,d).replace(/{{site.flipperVersion}}/g,p).trim(),m=(0,h.p)().isDarkTheme?s.A:l.A;return i.createElement(a.Ay,(0,t.A)({},a.Gs,{code:n,language:o,theme:m}),(function(e){var o=e.className,n=e.style,t=e.tokens,a=e.getLineProps,l=e.getTokenProps;return i.createElement("pre",{className:o,style:n},t.map((function(e,o){return i.createElement("div",a({line:e,key:o}),e.map((function(e,o){return i.createElement("span",l({token:e,key:o}))})))})))}))}},68864:(e,o,n)=>{n.r(o),n.d(o,{additionalBuckCode:()=>C,additionalDependenciesCode:()=>y,assets:()=>m,buckCode:()=>k,contentTitle:()=>p,default:()=>S,dependenciesCode:()=>g,frontMatter:()=>c,kaptAdditionalDependenciesCode:()=>x,kaptDependenciesCode:()=>f,kaptSnapshotsDependenciesCode:()=>v,metadata:()=>h,snapshotDependenciesCode:()=>b,toc:()=>u});var t=n(58168),i=n(98587),a=(n(96540),n(15680)),l=n(11470),s=n(19365),r=n(74646),d=["components"],c={id:"getting-started",title:"Getting Started",hide_table_of_contents:!0},p=void 0,h={unversionedId:"getting-started",id:"getting-started",title:"Getting Started",description:"<Tabs",source:"@site/../docs/getting-started.mdx",sourceDirName:".",slug:"/getting-started",permalink:"/docs/getting-started",draft:!1,editUrl:"https://github.com/facebook/litho/edit/master/website/../docs/getting-started.mdx",tags:[],version:"current",frontMatter:{id:"getting-started",title:"Getting Started",hide_table_of_contents:!0}},m={},u=[{value:"Adding Litho to your Project",id:"adding-litho-to-your-project",level:2},{value:"Adding Sections to your Project",id:"adding-sections-to-your-project",level:2},{value:"Using Snapshot releases",id:"using-snapshot-releases",level:2},{value:"Adding Litho to your Kotlin Project",id:"adding-litho-to-your-kotlin-project",level:2},{value:"Adding Sections to your Project",id:"adding-sections-to-your-project-1",level:2},{value:"Using Snapshot releases",id:"using-snapshot-releases-1",level:2},{value:"Adding Litho to your Project",id:"adding-litho-to-your-project-1",level:2},{value:"Adding Sections to your Project",id:"adding-sections-to-your-project-2",level:2},{value:"Testing your Installation",id:"testing-your-installation",level:2},{value:"Testing your Installation",id:"testing-your-installation-1",level:2}],g="dependencies {\n  // ...\n  // Litho\n  implementation 'com.facebook.litho:litho-core:{{site.lithoVersion}}'\n  implementation 'com.facebook.litho:litho-widget:{{site.lithoVersion}}'\n  annotationProcessor 'com.facebook.litho:litho-processor:{{site.lithoVersion}}'\n\n  // SoLoader\n  implementation 'com.facebook.soloader:soloader:{{site.soloaderVersion}}'\n\n  // For integration with Fresco\n  implementation 'com.facebook.litho:litho-fresco:{{site.lithoVersion}}'\n\n  // For testing\n  testImplementation 'com.facebook.litho:litho-testing:{{site.lithoVersion}}'\n}",y="dependencies {\n\n  // Sections\n  implementation 'com.facebook.litho:litho-sections-core:{{site.lithoVersion}}'\n  implementation 'com.facebook.litho:litho-sections-widget:{{site.lithoVersion}}'\n  compileOnly 'com.facebook.litho:litho-sections-annotations:{{site.lithoVersion}}'\n\n  annotationProcessor 'com.facebook.litho:litho-sections-processor:{{site.lithoVersion}}'\n}",b="dependencies {\n  // ...\n  // Litho\n  implementation 'com.facebook.litho:litho-core:{{site.lithoSnapshotVersion}}'\n  implementation 'com.facebook.litho:litho-widget:{{site.lithoSnapshotVersion}}'\n  annotationProcessor 'com.facebook.litho:litho-processor:{{site.lithoSnapshotVersion}}'\n\n  // SoLoader\n  implementation 'com.facebook.soloader:soloader:{{site.soloaderVersion}}'\n\n  // For integration with Fresco\n  implementation 'com.facebook.litho:litho-fresco:{{site.lithoSnapshotVersion}}'\n\n  // For testing\n  testImplementation 'com.facebook.litho:litho-testing:{{site.lithoSnapshotVersion}}'\n}",f="dependencies {\n  // ...\n  // Litho\n  implementation 'com.facebook.litho:litho-core:{{site.lithoVersion}}'\n  implementation 'com.facebook.litho:litho-widget:{{site.lithoVersion}}'\n  kapt 'com.facebook.litho:litho-processor:{{site.lithoVersion}}'\n\n  // SoLoader\n  implementation 'com.facebook.soloader:soloader:{{site.soloaderVersion}}'\n\n  // For integration with Fresco\n  implementation 'com.facebook.litho:litho-fresco:{{site.lithoVersion}}'\n\n  // For testing\n  testImplementation 'com.facebook.litho:litho-testing:{{site.lithoVersion}}'\n}",x="dependencies {\n\n  // Sections\n  implementation 'com.facebook.litho:litho-sections-core:{{site.lithoVersion}}'\n  implementation 'com.facebook.litho:litho-sections-widget:{{site.lithoVersion}}'\n  compileOnly 'com.facebook.litho:litho-sections-annotations:{{site.lithoVersion}}'\n\n  kapt 'com.facebook.litho:litho-sections-processor:{{site.lithoVersion}}'\n}",v="dependencies {\n  // ...\n  // Litho\n  implementation 'com.facebook.litho:litho-core:{{site.lithoSnapshotVersion}}'\n  implementation 'com.facebook.litho:litho-widget:{{site.lithoSnapshotVersion}}'\n\n  kapt 'com.facebook.litho:litho-processor:{{site.lithoSnapshotVersion}}'\n\n  // SoLoader\n  implementation 'com.facebook.soloader:soloader:{{site.soloaderVersion}}'\n\n  // For integration with Fresco\n  implementation 'com.facebook.litho:litho-fresco:{{site.lithoSnapshotVersion}}'\n\n  // For testing\n  testImplementation 'com.facebook.litho:litho-testing:{{site.lithoSnapshotVersion}}'\n}",k='android_prebuilt_aar(\n    name = "litho",\n    aar = ":litho-core.aar",\n    visibility = ["PUBLIC"],\n)\n\nremote_file(\n    name = "litho-core.aar",\n    sha1 = "sha1here",\n    url = "mvn:com.facebook.litho:litho-core:aar:{{site.lithoVersion}}",\n)\n\nprebuilt_jar(\n    name = "litho-annotation",\n    binary_jar = ":litho-annotation.jar",\n    visibility = ["PUBLIC"],\n)\n\nremote_file(\n    name = "litho-processor.jar",\n    sha1 = "sha1here",\n    url = "mvn:com.facebook.litho:litho-processor:jar:{{site.lithoVersion}}",\n)\n\nprebuilt_jar(\n    name = "litho-processor",\n    binary_jar = ":litho-processor.jar",\n    visibility = ["PUBLIC"],\n)\n\nremote_file(\n    name = "litho-annotation.jar",\n    sha1 = "sha1here",\n    url = "mvn:com.facebook.litho:litho-annotation:jar:{{site.lithoVersion}}",\n)\n\nandroid_prebuilt_aar(\n    name = "litho-widget",\n    aar = ":litho-widget.aar",\n    visibility = ["PUBLIC"],\n)\n\nremote_file(\n    name = "litho-widget.aar",\n    sha1 = "sha1here",\n    url = "mvn:com.facebook.litho:litho-widget:aar:{{site.lithoVersion}}",\n)\n\nandroid_library(\n    ...\n    # Your target here\n    ...\n    annotation_processor_deps = [\n        ":litho-annotation",\n        ":litho-processor",\n    ],\n    annotation_processors = [\n        "com.facebook.litho.specmodels.processor.ComponentsProcessor",\n    ],\n    provided_deps = [\n        "litho-annotation",\n    ],\n    deps = [\n        ":litho",\n        ":litho-widget",\n        ...\n    ]\n)',C='android_prebuilt_aar(\n    name = "litho-sections",\n    aar = ":litho-sections-core.aar",\n    visibility = ["PUBLIC"],\n)\n\nremote_file(\n    name = "litho-sections-core.aar",\n    sha1 = "sha1here",\n    url = "mvn:com.facebook.litho:litho-sections-core:aar:{{site.lithoVersion}}",\n)\n\nprebuilt_jar(\n    name = "litho-sections-annotation",\n    binary_jar = ":litho-sections-annotation.jar",\n    visibility = ["PUBLIC"],\n)\n\nremote_file(\n    name = "litho-sections-processor.jar",\n    sha1 = "sha1here",\n    url = "mvn:com.facebook.litho:litho-sections-processor:jar:{{site.lithoVersion}}",\n)\n\nprebuilt_jar(\n    name = "litho-sections-processor",\n    binary_jar = ":litho-sections-processor.jar",\n    visibility = ["PUBLIC"],\n)\n\nremote_file(\n    name = "litho-sections-annotation.jar",\n    sha1 = "sha1here",\n    url = "mvn:com.facebook.litho:litho-sections-annotation:jar:{{site.lithoVersion}}",\n)\n\nandroid_prebuilt_aar(\n    name = "litho-sections-widget",\n    aar = ":litho-sections-widget.aar",\n    visibility = ["PUBLIC"],\n)\n\nremote_file(\n    name = "litho-sections-widget.aar",\n    sha1 = "sha1here",\n    url = "mvn:com.facebook.litho:litho-sections-widget:aar:{{site.lithoVersion}}",\n)',V={toc:u,dependenciesCode:g,additionalDependenciesCode:y,snapshotDependenciesCode:b,kaptDependenciesCode:f,kaptAdditionalDependenciesCode:x,kaptSnapshotsDependenciesCode:v,buckCode:k,additionalBuckCode:C},j="wrapper";function S(e){var o=e.components,n=(0,i.A)(e,d);return(0,a.mdx)(j,(0,t.A)({},V,n,{components:o,mdxType:"MDXLayout"}),(0,a.mdx)(l.default,{defaultValue:"gradle-java",values:[{label:"Gradle/Java",value:"gradle-java"},{label:"Gradle/Kotlin",value:"gradle-kotlin"},{label:"Buck/Java",value:"buck-java"},{label:"Testing/Java",value:"testing-java"},{label:"Testing/Kotlin",value:"testing-kotlin"}],mdxType:"Tabs"},(0,a.mdx)(s.default,{value:"gradle-java",mdxType:"TabItem"},(0,a.mdx)("h2",{id:"adding-litho-to-your-project"},"Adding Litho to your Project"),(0,a.mdx)("p",null,"We publish the Litho artifacts to Bintray's JCenter. To include Litho to your\nAndroid project, make sure you include the reference to the repository in your ",(0,a.mdx)("inlineCode",{parentName:"p"},"build.gradle")," file:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-groovy"},"repositories {\n  jcenter()\n}\n")),(0,a.mdx)("p",null,"Then add the dependencies like this:"),(0,a.mdx)(r.A,{language:"groovy",code:g,mdxType:"VersionedCodeBlock"}),(0,a.mdx)("h2",{id:"adding-sections-to-your-project"},"Adding Sections to your Project"),(0,a.mdx)("p",null,"Litho comes with an optional library called Sections for declaratively building lists. You can include Sections by adding the following additional dependencies to your ",(0,a.mdx)("inlineCode",{parentName:"p"},"build.gradle")," file:"),(0,a.mdx)(r.A,{language:"groovy",code:y,mdxType:"VersionedCodeBlock"}),(0,a.mdx)("h2",{id:"using-snapshot-releases"},"Using Snapshot releases"),(0,a.mdx)("admonition",{type:"caution"},(0,a.mdx)("p",{parentName:"admonition"},"This will break and may set your house on fire. Snapshots are unsigned and automatically published by our CI system. Use them for testing purposes only.")),(0,a.mdx)("p",null,"First, add the Sonatype Snapshots repository to your gradle config:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-groovy"},'repositories {\n  maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }\n}\n')),(0,a.mdx)("p",null,"Then you can access the snapshot versions of all Litho artifacts that we\npublish:"),(0,a.mdx)(r.A,{language:"groovy",code:b,mdxType:"VersionedCodeBlock"})),(0,a.mdx)(s.default,{value:"gradle-kotlin",mdxType:"TabItem"},(0,a.mdx)("h2",{id:"adding-litho-to-your-kotlin-project"},"Adding Litho to your Kotlin Project"),(0,a.mdx)("admonition",{type:"caution"},(0,a.mdx)("p",{parentName:"admonition"},"Kotlin support for Litho is experimental at this point.")),(0,a.mdx)("p",null,"In order to use Litho's annotation processor, you need to opt in to the Kotlin KAPT plugin at the\ntop of your application's ",(0,a.mdx)("inlineCode",{parentName:"p"},"build.gradle")," file:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-groovy"},"apply plugin: 'kotlin-kapt'\n")),(0,a.mdx)("p",null,"We publish the Litho artifacts to Bintray's JCenter. To include Litho to your\nAndroid project, make sure you include the reference to the repository in your ",(0,a.mdx)("inlineCode",{parentName:"p"},"build.gradle")," file:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-groovy"},"repositories {\n  jcenter()\n}\n")),(0,a.mdx)("p",null,"Then add the dependencies like this:"),(0,a.mdx)(r.A,{language:"groovy",code:f,mdxType:"VersionedCodeBlock"}),(0,a.mdx)("h2",{id:"adding-sections-to-your-project-1"},"Adding Sections to your Project"),(0,a.mdx)("p",null,"Litho comes with an optional library called Sections for declaratively building lists. You can include Sections by adding the following additional dependencies to your ",(0,a.mdx)("inlineCode",{parentName:"p"},"build.gradle")," file:"),(0,a.mdx)(r.A,{language:"groovy",code:x,mdxType:"VersionedCodeBlock"}),(0,a.mdx)("h2",{id:"using-snapshot-releases-1"},"Using Snapshot releases"),(0,a.mdx)("admonition",{type:"caution"},(0,a.mdx)("p",{parentName:"admonition"},"This will break and may set your house on fire. Snapshots are unsigned and automatically published by our CI system. Use them for testing purposes only.")),(0,a.mdx)("p",null,"First, add the Sonatype Snapshots repository to your gradle config:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-groovy"},'repositories {\n  maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }\n}\n')),(0,a.mdx)("p",null,"Then you can access the snapshot versions of all Litho artifacts that we\npublish:"),(0,a.mdx)(r.A,{language:"groovy",code:v,mdxType:"VersionedCodeBlock"})),(0,a.mdx)(s.default,{value:"buck-java",mdxType:"TabItem"},(0,a.mdx)("h2",{id:"adding-litho-to-your-project-1"},"Adding Litho to your Project"),(0,a.mdx)("p",null,"You can include Litho to your Android project via Buck by adding the following to your ",(0,a.mdx)("inlineCode",{parentName:"p"},"BUCK")," file:"),(0,a.mdx)(r.A,{language:"python",code:k,mdxType:"VersionedCodeBlock"}),(0,a.mdx)("h2",{id:"adding-sections-to-your-project-2"},"Adding Sections to your Project"),(0,a.mdx)("p",null,"Litho comes with an optional library called Sections for declaratively building lists. You can include Sections by adding the following additional dependencies to your ",(0,a.mdx)("inlineCode",{parentName:"p"},"BUCK")," file:"),(0,a.mdx)(r.A,{language:"python",code:C,mdxType:"VersionedCodeBlock"}),(0,a.mdx)("p",null,"Then modify your ",(0,a.mdx)("inlineCode",{parentName:"p"},"android_library")," target as such:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'android_library(\n    ...\n    # Your target here\n    ...\n    annotation_processor_deps = [\n        ":litho-annotation",\n        ":litho-processor",\n        ":litho-sections-annotations",\n        ":litho-sections-processor",\n    ],\n    annotation_processors = [\n        "com.facebook.litho.specmodels.processor.ComponentsProcessor",\n        "com.facebook.litho.specmodels.processor.sections.SectionsComponentProcessor",\n    ],\n    provided_deps = [\n        "litho-annotations",\n        "litho-sections-annotations",\n    ],\n    deps = [\n        ":litho",\n        ":litho-widget",\n        ":litho-sections",\n        ":litho-sections-widget",\n        ...\n    ]\n)\n'))),(0,a.mdx)(s.default,{value:"testing-java",mdxType:"TabItem"},(0,a.mdx)("h2",{id:"testing-your-installation"},"Testing your Installation"),(0,a.mdx)("p",null,"You can test your install by adding a view created with Litho to an activity."),(0,a.mdx)("p",null,"First, initialize ",(0,a.mdx)("inlineCode",{parentName:"p"},"SoLoader"),". Litho has a dependency on ",(0,a.mdx)("a",{parentName:"p",href:"https://github.com/facebook/SoLoader"},"SoLoader")," to help load native libraries provided by the underlying layout engine, ",(0,a.mdx)("a",{parentName:"p",href:"https://yogalayout.dev/docs/about-yoga"},"Yoga"),". Your ",(0,a.mdx)("inlineCode",{parentName:"p"},"Application")," class is a good place to do this:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-java",metastring:'title="MyApplication.java"',title:'"MyApplication.java"'},"public class MyApplication extends Application {\n\n  @Override\n  public void onCreate() {\n    super.onCreate();\n\n    SoLoader.init(this, false);\n  }\n}\n")),(0,a.mdx)("p",null,"Then, add a predefined Litho ",(0,a.mdx)("inlineCode",{parentName:"p"},"Text"),' widget to an activity that displays "Hello World!":'),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-java",metastring:'title="MyActivity.java"',title:'"MyActivity.java"'},'import com.facebook.litho.ComponentContext;\nimport com.facebook.litho.LithoView;\n\npublic class MyActivity extends Activity {\n\n  @Override\n  public void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n\n    final ComponentContext c = new ComponentContext(this);\n\n    final LithoView lithoView = LithoView.create(\n        this /* context */,\n        Text.create(c)\n            .text("Hello, World!")\n            .textSizeDip(50)\n            .build());\n\n    setContentView(lithoView);\n  }\n}\n')),(0,a.mdx)("p",null,'Now, when you run the app you should see "Hello World!" displayed on the screen.')),(0,a.mdx)(s.default,{value:"testing-kotlin",mdxType:"TabItem"},(0,a.mdx)("h2",{id:"testing-your-installation-1"},"Testing your Installation"),(0,a.mdx)("p",null,"You can test your install by adding a view created with Litho to an activity."),(0,a.mdx)("p",null,"First, initialize ",(0,a.mdx)("inlineCode",{parentName:"p"},"SoLoader"),". Litho has a dependency on ",(0,a.mdx)("a",{parentName:"p",href:"https://github.com/facebook/SoLoader"},"SoLoader")," to help load native libraries provided by the underlying layout engine, ",(0,a.mdx)("a",{parentName:"p",href:"https://yogalayout.dev/docs/about-yoga"},"Yoga"),". Your ",(0,a.mdx)("inlineCode",{parentName:"p"},"Application")," class is a good place to do this:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="MyApplication.kt"',title:'"MyApplication.kt"'},"class MyApplication: Application() {\n\n  override fun onCreate() {\n    super.onCreate()\n    SoLoader.init(this, false)\n  }\n}\n")),(0,a.mdx)("p",null,"Then, add a predefined Litho ",(0,a.mdx)("inlineCode",{parentName:"p"},"Text"),' widget to an activity that displays "Hello World!":'),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="MyActivity.kt"',title:'"MyActivity.kt"'},'import com.facebook.litho.ComponentContext\nimport com.facebook.litho.LithoView\n\nclass MyActivity : AppCompatActivity() {\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n\n    val c = ComponentContext(this)\n\n    val lithoView = LithoView.create(\n        this /* context */,\n        Text.create(c)\n            .text("Hello, World!")\n            .textSizeDip(50)\n            .build())\n\n    setContentView(lithoView)\n  }\n}\n')),(0,a.mdx)("p",null,'Now, when you run the app you should see "Hello World!" displayed on the screen.'))))}S.isMDXComponent=!0}}]);