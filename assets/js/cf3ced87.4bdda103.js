"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4894],{15680:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>c,MDXProvider:()=>p,mdx:()=>b,useMDXComponents:()=>d,withMDXComponents:()=>u});var o=n(96540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(){return a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},a.apply(this,arguments)}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=o.createContext({}),u=function(e){return function(t){var n=d(t.components);return o.createElement(e,a({},t,{components:n}))}},d=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=d(e.components);return o.createElement(c.Provider,{value:t},e.children)},m="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=d(n),p=r,m=u["".concat(i,".").concat(p)]||u[p]||g[p]||a;return n?o.createElement(m,l(l({ref:t},c),{},{components:n})):o.createElement(m,l({ref:t},c))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:r,i[1]=l;for(var c=2;c<a;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},84683:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>g,frontMatter:()=>l,metadata:()=>c,toc:()=>d});var o=n(58168),r=n(98587),a=(n(96540),n(15680)),i=["components"],l={id:"annotation-processor-debugging",title:"Annotation Processor Debugging"},s=void 0,c={unversionedId:"annotation-processor-debugging",id:"annotation-processor-debugging",title:"Annotation Processor Debugging",description:"Annotation Processor debugging is a three-step process:",source:"@site/../docs/annotation-processor-debugging.md",sourceDirName:".",slug:"/annotation-processor-debugging",permalink:"/docs/annotation-processor-debugging",draft:!1,editUrl:"https://github.com/facebook/litho/edit/master/website/../docs/annotation-processor-debugging.md",tags:[],version:"current",frontMatter:{id:"annotation-processor-debugging",title:"Annotation Processor Debugging"}},u={},d=[{value:"1. Run the Compiler in Debug Mode",id:"1-run-the-compiler-in-debug-mode",level:2},{value:"Using Gradle",id:"using-gradle",level:3},{value:"Using Buck",id:"using-buck",level:3},{value:"2. Set Breakpoints in the IDE",id:"2-set-breakpoints-in-the-ide",level:2},{value:"3. Attach the Debugger to the Build Process",id:"3-attach-the-debugger-to-the-build-process",level:2},{value:"Attach to Process Menu Option",id:"attach-to-process-menu-option",level:3},{value:"Create a new Debug Configuration",id:"create-a-new-debug-configuration",level:3}],p={toc:d},m="wrapper";function g(e){var t=e.components,l=(0,r.A)(e,i);return(0,a.mdx)(m,(0,o.A)({},p,l,{components:t,mdxType:"MDXLayout"}),(0,a.mdx)("p",null,"Annotation Processor debugging is a three-step process:"),(0,a.mdx)("ol",null,(0,a.mdx)("li",{parentName:"ol"},(0,a.mdx)("a",{parentName:"li",href:"#1-run-the-compiler-in-debug-mode"},"Run the Compiler in Debug Mode")),(0,a.mdx)("li",{parentName:"ol"},(0,a.mdx)("a",{parentName:"li",href:"#2-set-breakpoints-in-the-ide"},"Set Breakpoints in the IDE")),(0,a.mdx)("li",{parentName:"ol"},(0,a.mdx)("a",{parentName:"li",href:"#3-attach-the-debugger-to-the-build-process"},"Attach the Debugger to the Build Process"))),(0,a.mdx)("h2",{id:"1-run-the-compiler-in-debug-mode"},"1. Run the Compiler in Debug Mode"),(0,a.mdx)("h3",{id:"using-gradle"},"Using Gradle"),(0,a.mdx)("p",null,"Debugging the Annotation Processor stage is troublesome as you are essentially debugging the Java Compiler (",(0,a.mdx)("inlineCode",{parentName:"p"},"javac"),"). Gradle overcomes this issue by enabling you to attach a debugger, during the compilation stage, by setting the flag ",(0,a.mdx)("inlineCode",{parentName:"p"},"org.gradle.debug")," to true."),(0,a.mdx)("p",null,"To use that flag, determine a target that invokes the annotation processor and start it,  as shown in the following ",(0,a.mdx)("inlineCode",{parentName:"p"},"litho-widget")," example:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-sh"},"./gradlew --no-daemon -Dorg.gradle.debug=true :litho-widget:compileDebugJavaWithJavac\n")),(0,a.mdx)("p",null,"This will pause the execution during the ",(0,a.mdx)("em",{parentName:"p"},"Starting Daemon")," phase until you connect your debugger."),(0,a.mdx)("h3",{id:"using-buck"},"Using Buck"),(0,a.mdx)("p",null,"Buck doesn't have built-in support for suspending the compiler.  However, you can attach a debugger by directly instrumenting the Java Virtual Machine (JVM) to open a debugging port."),(0,a.mdx)("p",null,"For example, to trigger the Annotation Processor from the Sample App, use the following:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-bash"},"BUCK_DEBUG_MODE=1 NO_BUCKD=1 buck build //fbandroid/libraries/components/sample/src/main/java/com/facebook/samples/litho:litho\n")),(0,a.mdx)("h2",{id:"2-set-breakpoints-in-the-ide"},"2. Set Breakpoints in the IDE"),(0,a.mdx)("p",null,"If you are not sure where to put breakpoints, the following classes might be a good start:"),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("a",{parentName:"li",href:"https://github.com/facebook/litho/blob/master/litho-processor/src/main/java/com/facebook/litho/specmodels/generator/BuilderGenerator.java"},"BuilderGenerator")," - generates the builder for a Component."),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("a",{parentName:"li",href:"https://github.com/facebook/litho/blob/master/litho-processor/src/main/java/com/facebook/litho/specmodels/generator/ComponentBodyGenerator.java"},"ComponentBodyGenerator")," - generates the implementation of a Component.")),(0,a.mdx)("admonition",{type:"note"},(0,a.mdx)("p",{parentName:"admonition"},"Breakpoints won't get hit if there are no code changes as Buck uses a cached built output; either call ",(0,a.mdx)("inlineCode",{parentName:"p"},"buck clean")," or make some changes in code.")),(0,a.mdx)("h2",{id:"3-attach-the-debugger-to-the-build-process"},"3. Attach the Debugger to the Build Process"),(0,a.mdx)("p",null,"There are two options to attach the debugger: the ",(0,a.mdx)("a",{parentName:"p",href:"#attach-to-process"},"Attach to process Menu Option")," menu option or ",(0,a.mdx)("a",{parentName:"p",href:"#create-a-new-debug-configuration"},"Create a new debug configuration"),"."),(0,a.mdx)("h3",{id:"attach-to-process-menu-option"},"Attach to Process Menu Option"),(0,a.mdx)("ol",null,(0,a.mdx)("li",{parentName:"ol"},"Run -> Attach To Process - ",(0,a.mdx)("strong",{parentName:"li"},"don't pick the 'Attach Debugger to Android Process' option!")),(0,a.mdx)("li",{parentName:"ol"},"Wait for Android Studio to find the waiting Buck or Gradle process on the respective port (the same one used while creating the configuration)."),(0,a.mdx)("li",{parentName:"ol"},"Select that option from the choices (see the following screenshot).")),(0,a.mdx)("p",null,(0,a.mdx)("img",{alt:"Attach to Process",src:n(92148).A,width:"396",height:"200"})),(0,a.mdx)("h3",{id:"create-a-new-debug-configuration"},"Create a new Debug Configuration"),(0,a.mdx)("ol",null,(0,a.mdx)("li",{parentName:"ol"},"Run -> Edit Configurations -> Add -> Remote"),(0,a.mdx)("li",{parentName:"ol"},"Give it a name, such as 'Debug Gradle' or 'Debug Buck' (see the following screenshot)"),(0,a.mdx)("li",{parentName:"ol"},"Debugger mode: Attach to remote JVM."),(0,a.mdx)("li",{parentName:"ol"},"Host: localhost."),(0,a.mdx)("li",{parentName:"ol"},"Port: 5005 (use the port number printed when running Gradle\\Buck in debug mode in the previous step. Default: Gradle = 5005, Buck = 8888)."),(0,a.mdx)("li",{parentName:"ol"},"Click 'OK' to create it.")),(0,a.mdx)("p",null,(0,a.mdx)("img",{alt:"IntelliJ Remote Target",src:n(36506).A,width:"2356",height:"1364"})),(0,a.mdx)("ol",{start:7},(0,a.mdx)("li",{parentName:"ol"},"Select the new configuration from the Configuration dropdown."),(0,a.mdx)("li",{parentName:"ol"},"Click the 'Debug' Button.")))}g.isMDXComponent=!0},92148:(e,t,n)=>{n.d(t,{A:()=>o});const o=n.p+"assets/images/debugging-attach-to-process-4c778276a37a6263744c8cad9a9bfc7e.png"},36506:(e,t,n)=>{n.d(t,{A:()=>o});const o=n.p+"assets/images/remote-debugger-9bc343815065516db40f1bb9268abf8b.png"}}]);