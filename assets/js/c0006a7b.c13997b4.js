"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3886],{15680:(e,n,i)=>{i.r(n),i.d(n,{MDXContext:()=>m,MDXProvider:()=>l,mdx:()=>x,useMDXComponents:()=>s,withMDXComponents:()=>c});var t=i(96540);function r(e,n,i){return n in e?Object.defineProperty(e,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[n]=i,e}function o(){return o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var i=arguments[n];for(var t in i)Object.prototype.hasOwnProperty.call(i,t)&&(e[t]=i[t])}return e},o.apply(this,arguments)}function a(e,n){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),i.push.apply(i,t)}return i}function d(e){for(var n=1;n<arguments.length;n++){var i=null!=arguments[n]?arguments[n]:{};n%2?a(Object(i),!0).forEach((function(n){r(e,n,i[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):a(Object(i)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(i,n))}))}return e}function p(e,n){if(null==e)return{};var i,t,r=function(e,n){if(null==e)return{};var i,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)i=o[t],n.indexOf(i)>=0||(r[i]=e[i]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)i=o[t],n.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(r[i]=e[i])}return r}var m=t.createContext({}),c=function(e){return function(n){var i=s(n.components);return t.createElement(e,o({},n,{components:i}))}},s=function(e){var n=t.useContext(m),i=n;return e&&(i="function"==typeof e?e(n):d(d({},n),e)),i},l=function(e){var n=s(e.components);return t.createElement(m.Provider,{value:n},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},h=t.forwardRef((function(e,n){var i=e.components,r=e.mdxType,o=e.originalType,a=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),c=s(i),l=r,u=c["".concat(a,".").concat(l)]||c[l]||f[l]||o;return i?t.createElement(u,d(d({ref:n},m),{},{components:i})):t.createElement(u,d({ref:n},m))}));function x(e,n){var i=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=i.length,a=new Array(o);a[0]=h;var d={};for(var p in n)hasOwnProperty.call(n,p)&&(d[p]=n[p]);d.originalType=e,d[u]="string"==typeof e?e:r,a[1]=d;for(var m=2;m<o;m++)a[m]=i[m];return t.createElement.apply(null,a)}return t.createElement.apply(null,i)}h.displayName="MDXCreateElement"},51623:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>s,contentTitle:()=>m,default:()=>h,frontMatter:()=>p,metadata:()=>c,toc:()=>l});var t=i(58168),r=i(98587),o=(i(96540),i(15680)),a=i(86025),d=["components"],p={id:"primitive-tracing",title:"Tracing"},m=void 0,c={unversionedId:"mainconcepts/primitivecomponents/primitive-tracing",id:"mainconcepts/primitivecomponents/primitive-tracing",title:"Tracing",description:"On Android, Systrace is a standard tool for analyzing app performance. The developer can add traces around parts of the code that need to be measured. Android OS adds some tracing out of the box, and similarly Litho adds traces for common operations such as binding/unbinding data to and from UI.",source:"@site/../docs/mainconcepts/primitivecomponents/primitive-tracing.mdx",sourceDirName:"mainconcepts/primitivecomponents",slug:"/mainconcepts/primitivecomponents/primitive-tracing",permalink:"/docs/mainconcepts/primitivecomponents/primitive-tracing",draft:!1,editUrl:"https://github.com/facebook/litho/edit/master/website/../docs/mainconcepts/primitivecomponents/primitive-tracing.mdx",tags:[],version:"current",frontMatter:{id:"primitive-tracing",title:"Tracing"},sidebar:"mainSidebar",previous:{title:"Content Pooling",permalink:"/docs/mainconcepts/primitivecomponents/primitive-preallocation"},next:{title:"Flexbox Attributes",permalink:"/docs/mainconcepts/flexbox-yoga"}},s={},l=[{value:"Configuring Primitive Component Traces",id:"configuring-primitive-component-traces",level:2},{value:"RenderUnit description",id:"renderunit-description",level:3},{value:"Binder description",id:"binder-description",level:3}],u={toc:l},f="wrapper";function h(e){var n=e.components,i=(0,r.A)(e,d);return(0,o.mdx)(f,(0,t.A)({},u,i,{components:n,mdxType:"MDXLayout"}),(0,o.mdx)("p",null,"On Android, ",(0,o.mdx)("a",{parentName:"p",href:"https://developer.android.com/topic/performance/tracing"},"Systrace")," is a standard tool for analyzing app performance. The developer can add traces around parts of the code that need to be measured. Android OS adds some tracing out of the box, and similarly Litho adds traces for common operations such as binding/unbinding data to and from UI."),(0,o.mdx)("p",null,"Below is an example that shows a Systrace output for a simple Primitive implementation with a single ",(0,o.mdx)("inlineCode",{parentName:"p"},"bind{}")," call inside of its ",(0,o.mdx)("inlineCode",{parentName:"p"},"MountConfigurationScope"),":"),(0,o.mdx)("img",{width:"600",src:(0,a.default)("images/litho-trace-no-description.png")}),(0,o.mdx)("p",null,"At the bottom, there is a trace for ",(0,o.mdx)("inlineCode",{parentName:"p"},"bind{}")," call. It consists of three parts:"),(0,o.mdx)("ol",null,(0,o.mdx)("li",{parentName:"ol"},"The first part is a description of ",(0,o.mdx)("inlineCode",{parentName:"li"},"RenderUnit"),". Under the hood, things like ",(0,o.mdx)("inlineCode",{parentName:"li"},"View")," or ",(0,o.mdx)("inlineCode",{parentName:"li"},"Drawable")," are represented as ",(0,o.mdx)("inlineCode",{parentName:"li"},"RenderUnit"),"s. By default the trace will start with the class name of the ",(0,o.mdx)("inlineCode",{parentName:"li"},"RenderUnit"),"."),(0,o.mdx)("li",{parentName:"ol"},"The second part is saying if it's a mount or unmount operation. On the above screenshot, ",(0,o.mdx)("inlineCode",{parentName:"li"},"mount-fixed")," means that it's a trace for a mount operation. If the component was also unmounted during Tracing session, the Systrace will also show a corresponding ",(0,o.mdx)("inlineCode",{parentName:"li"},"unmount")," section."),(0,o.mdx)("li",{parentName:"ol"},"The last part is an index of a given ",(0,o.mdx)("inlineCode",{parentName:"li"},"bind{}")," call. It corresponds to the order in which ",(0,o.mdx)("inlineCode",{parentName:"li"},"bind{}"),", ",(0,o.mdx)("inlineCode",{parentName:"li"},"bindWithLayoutData{}"),", ",(0,o.mdx)("inlineCode",{parentName:"li"},"bindTo"),", and ",(0,o.mdx)("inlineCode",{parentName:"li"},"bindDynamic{}")," calls are present in the source code. Starting from the top of ",(0,o.mdx)("inlineCode",{parentName:"li"},"MountConfigurationScope"),", the first ",(0,o.mdx)("inlineCode",{parentName:"li"},"bind{}")," call will have index 0, the second one will have index 1 etc.")),(0,o.mdx)("h2",{id:"configuring-primitive-component-traces"},"Configuring Primitive Component Traces"),(0,o.mdx)("p",null,"There are two parts that can be configured: ",(0,o.mdx)("inlineCode",{parentName:"p"},"RenderUnit")," description and ",(0,o.mdx)("inlineCode",{parentName:"p"},"bind{}"),", ",(0,o.mdx)("inlineCode",{parentName:"p"},"bindWithLayoutData{}"),", ",(0,o.mdx)("inlineCode",{parentName:"p"},"bindTo"),", ",(0,o.mdx)("inlineCode",{parentName:"p"},"bindDynamic{}")," descriptions."),(0,o.mdx)("h3",{id:"renderunit-description"},"RenderUnit description"),(0,o.mdx)("p",null,"The ",(0,o.mdx)("inlineCode",{parentName:"p"},"RenderUnit")," description can be customized using ",(0,o.mdx)("inlineCode",{parentName:"p"},"description")," parameter of ",(0,o.mdx)("inlineCode",{parentName:"p"},"MountBehavior")," constructor. By default it's set to ",(0,o.mdx)("inlineCode",{parentName:"p"},"null")," and in this case the ",(0,o.mdx)("inlineCode",{parentName:"p"},"RenderUnit")," class name will be used. If a custom description is provided via ",(0,o.mdx)("inlineCode",{parentName:"p"},"MountBehavior")," constructor, then it'll be used instead."),(0,o.mdx)("p",null,"Below is an image showing a Systrace output for a Primitive that passes ",(0,o.mdx)("inlineCode",{parentName:"p"},'"ImagePrimitive"')," description via ",(0,o.mdx)("inlineCode",{parentName:"p"},"MountBehavior")," constructor:"),(0,o.mdx)("img",{width:"600",src:(0,a.default)("images/litho-trace-renderunit-description.png")}),(0,o.mdx)("h3",{id:"binder-description"},"Binder description"),(0,o.mdx)("p",null,"The description of ",(0,o.mdx)("inlineCode",{parentName:"p"},"bind{}"),", ",(0,o.mdx)("inlineCode",{parentName:"p"},"bindWithLayoutData{}"),", ",(0,o.mdx)("inlineCode",{parentName:"p"},"bindTo"),", ",(0,o.mdx)("inlineCode",{parentName:"p"},"bindDynamic{}")," can be customized by wrapping each of these calls inside of ",(0,o.mdx)("inlineCode",{parentName:"p"},'withDescription("custom description") {}')," block."),(0,o.mdx)("p",null,"Below is an image showing a Systrace output for a Primitive that passes ",(0,o.mdx)("inlineCode",{parentName:"p"},'"ImagePrimitive"')," description via ",(0,o.mdx)("inlineCode",{parentName:"p"},"MountBehavior")," constructor and customizes the ",(0,o.mdx)("inlineCode",{parentName:"p"},"bind{}")," description by wrapping it in ",(0,o.mdx)("inlineCode",{parentName:"p"},'withDescription("drawable") { }')," block:"),(0,o.mdx)("img",{width:"600",src:(0,a.default)("images/litho-trace-renderunit-and-binder-description.png")}))}h.isMDXComponent=!0}}]);