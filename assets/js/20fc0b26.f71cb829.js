"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1618],{15680:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>l,MDXProvider:()=>m,mdx:()=>g,useMDXComponents:()=>c,withMDXComponents:()=>p});var a=t(96540);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(){return i=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e},i.apply(this,arguments)}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=a.createContext({}),p=function(e){return function(n){var t=c(n.components);return a.createElement(e,i({},n,{components:t}))}},c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},m=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,r=e.parentName,l=d(e,["components","mdxType","originalType","parentName"]),p=c(t),m=o,u=p["".concat(r,".").concat(m)]||p[m]||f[m]||i;return t?a.createElement(u,s(s({ref:n},l),{},{components:t})):a.createElement(u,s({ref:n},l))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,r=new Array(i);r[0]=h;var s={};for(var d in n)hasOwnProperty.call(n,d)&&(s[d]=n[d]);s.originalType=e,s[u]="string"==typeof e?e:o,r[1]=s;for(var l=2;l<i;l++)r[l]=t[l];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},82580:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>d,default:()=>f,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var a=t(58168),o=t(98587),i=(t(96540),t(15680)),r=["components"],s={id:"transition-definitions",title:"More Ways to Define Transitions"},d=void 0,l={unversionedId:"codegen/transition-definitions",id:"codegen/transition-definitions",title:"More Ways to Define Transitions",description:"@State Arguments",source:"@site/../docs/codegen/transition-definitions.md",sourceDirName:"codegen",slug:"/codegen/transition-definitions",permalink:"/docs/codegen/transition-definitions",draft:!1,editUrl:"https://github.com/facebook/litho/edit/master/website/../docs/codegen/transition-definitions.md",tags:[],version:"current",frontMatter:{id:"transition-definitions",title:"More Ways to Define Transitions"},sidebar:"mainSidebar",previous:{title:"Animating View Properties with Dynamic Props",permalink:"/docs/codegen/dynamic-props"},next:{title:"Making the UI Accessible",permalink:"/docs/codegen/accessibility-overview"}},p={},c=[{value:"@State Arguments",id:"state-arguments",level:3},{value:"@Prop <code>Diff&lt;T&gt;</code> and @State <code>Diff&lt;T&gt;</code>",id:"prop-difft-and-state-difft",level:3},{value:"@OnUpdateStateWithTransition",id:"onupdatestatewithtransition",level:3}],m={toc:c},u="wrapper";function f(e){var n=e.components,t=(0,o.A)(e,r);return(0,i.mdx)(u,(0,a.A)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,i.mdx)("h3",{id:"state-arguments"},"@State Arguments"),(0,i.mdx)("p",null,"If the Transition definition needs to take the value of the state into account, Litho enables ",(0,i.mdx)("inlineCode",{parentName:"p"},"@OnCreateTransition")," methods to take ",(0,i.mdx)("inlineCode",{parentName:"p"},"@State")," arguments, as shown in the following snippet:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},'@OnCreateTransition\nstatic Transition onCreateTransition(\n      ComponentContext c, @State boolean animationsDisabled) {\n  if (animationsDisabled) {\n    return null;\n  }\n\n  return Transition.create("square").animate(AnimatedProperties.X);\n}\n')),(0,i.mdx)("admonition",{type:"note"},(0,i.mdx)("p",{parentName:"admonition"},"In order to make this happen, the framework needs to postpone the collection of ",(0,i.mdx)("inlineCode",{parentName:"p"},"Transition"),"s until ",(0,i.mdx)("inlineCode",{parentName:"p"},"MountState")," (always on UI thread). Normally, this would be done on ",(0,i.mdx)("inlineCode",{parentName:"p"},"LayoutState"),", which may be processed on a background thread.")),(0,i.mdx)("h3",{id:"prop-difft-and-state-difft"},"@Prop ",(0,i.mdx)("inlineCode",{parentName:"h3"},"Diff<T>")," and @State ",(0,i.mdx)("inlineCode",{parentName:"h3"},"Diff<T>")),(0,i.mdx)("p",null,"If a transition depends not only on the actual (updated) value of a ",(0,i.mdx)("inlineCode",{parentName:"p"},"@Prop")," or a ",(0,i.mdx)("inlineCode",{parentName:"p"},"@State"),", but also on the value change, a generic ",(0,i.mdx)("a",{parentName:"p",href:"pathname:///javadoc/com/facebook/litho/Diff.html"},"Diff")," can be used for arguments, which provides access to both previous and next ",(0,i.mdx)("inlineCode",{parentName:"p"},"@State"),"/",(0,i.mdx)("inlineCode",{parentName:"p"},"@Prop")," values."),(0,i.mdx)("p",null,"The following snippet shows how one of the samples could be changed to only animate the expanding action (not the collapsing action):"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},"@OnCreateTransition\nstatic Transition onCreateTransition(ComponentContext c, @Prop Diff<Boolean> expanded) {\n  boolean isExpanding = !expanded.getPrevious() && expanded.getNext();\n  if (isExpanding) {\n    return Transition.allLayout().animator(ANIMATOR);\n  } else {\n    return null;\n  }\n}\n")),(0,i.mdx)("h3",{id:"onupdatestatewithtransition"},"@OnUpdateStateWithTransition"),(0,i.mdx)("p",null,"To define transitions that run conditionally under certain circumstances, use the ",(0,i.mdx)("inlineCode",{parentName:"p"},"@OnUpdateStateWithTranstion")," method:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},"@OnEvent(ClickEvent.class)\nstatic void onClick(ComponentContext c) {\n  MyComponent.toggleWithTransition(c);\n}\n\n@OnUpdateStateWithTransition\nstatic Transition toggle(StateValue<Boolean> expanded) {\n  expanded.set(!expanded.get()); // Updating state value\n\n  boolean isExpanding = expanded.get();\n  if (isExpanding) {\n    return Transition.allLayout().animator(ANIMATOR);\n  } else {\n    return null;\n  }\n}\n")),(0,i.mdx)("p",null,"The method functions as the regular ",(0,i.mdx)("inlineCode",{parentName:"p"},"@OnUpdateState")," method but also returns ",(0,i.mdx)("inlineCode",{parentName:"p"},"Transition"),"."))}f.isMDXComponent=!0}}]);