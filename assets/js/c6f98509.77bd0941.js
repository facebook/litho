"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7875],{15680:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>c,MDXProvider:()=>p,mdx:()=>g,useMDXComponents:()=>d,withMDXComponents:()=>m});var o=t(96540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(){return i=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e},i.apply(this,arguments)}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=o.createContext({}),m=function(e){return function(n){var t=d(n.components);return o.createElement(e,i({},n,{components:t}))}},d=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=d(e.components);return o.createElement(c.Provider,{value:n},e.children)},h="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},v=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,r=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=d(t),p=a,h=m["".concat(r,".").concat(p)]||m[p]||u[p]||i;return t?o.createElement(h,l(l({ref:n},c),{},{components:t})):o.createElement(h,l({ref:n},c))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,r=new Array(i);r[0]=v;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[h]="string"==typeof e?e:a,r[1]=l;for(var c=2;c<i;c++)r[c]=t[c];return o.createElement.apply(null,r)}return o.createElement.apply(null,t)}v.displayName="MDXCreateElement"},56366:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>v,frontMatter:()=>s,metadata:()=>m,toc:()=>p});var o=t(58168),a=t(98587),i=(t(96540),t(15680)),r=t(52112),l=["components"],s={id:"communicating-between-components",title:"Communicating Between Components"},c=void 0,m={unversionedId:"mainconcepts/coordinate-state-actions/communicating-between-components",id:"mainconcepts/coordinate-state-actions/communicating-between-components",title:"Communicating Between Components",description:"Dispatching an Event from a child to its parent",source:"@site/../docs/mainconcepts/coordinate-state-actions/communicating-between-components.md",sourceDirName:"mainconcepts/coordinate-state-actions",slug:"/mainconcepts/coordinate-state-actions/communicating-between-components",permalink:"/docs/mainconcepts/coordinate-state-actions/communicating-between-components",draft:!1,editUrl:"https://github.com/facebook/litho/edit/master/website/../docs/mainconcepts/coordinate-state-actions/communicating-between-components.md",tags:[],version:"current",frontMatter:{id:"communicating-between-components",title:"Communicating Between Components"},sidebar:"mainSidebar",previous:{title:"Hoisting State",permalink:"/docs/mainconcepts/coordinate-state-actions/hoisting-state"}},d={},p=[{value:"Dispatching an Event from a child to its parent",id:"dispatching-an-event-from-a-child-to-its-parent",level:3},{value:"Passing new Props from a parent to a child",id:"passing-new-props-from-a-parent-to-a-child",level:3},{value:"Triggering an Action on a child from a parent",id:"triggering-an-action-on-a-child-from-a-parent",level:3},{value:"Communicating between siblings",id:"communicating-between-siblings",level:3},{value:"Communicating externally to a component",id:"communicating-externally-to-a-component",level:3},{value:"With an observer",id:"with-an-observer",level:4},{value:"With a handle",id:"with-a-handle",level:4},{value:"Communicating externally from a Component",id:"communicating-externally-from-a-component",level:3}],h={toc:p},u="wrapper";function v(e){var n=e.components,t=(0,a.A)(e,l);return(0,i.mdx)(u,(0,o.A)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,i.mdx)("h3",{id:"dispatching-an-event-from-a-child-to-its-parent"},"Dispatching an Event from a child to its parent"),(0,i.mdx)("p",null,"In the Spec API, communicating from a child to a parent is done through an ",(0,i.mdx)("inlineCode",{parentName:"p"},"EventHandler"),", which handles a custom event type. The ",(0,i.mdx)("inlineCode",{parentName:"p"},"EventHandler")," is defined in the parent component and passed as a Prop to the child component.  For more information on Spec events, see the document ",(0,i.mdx)("a",{parentName:"p",href:"/docs/codegen/events-for-specs"},"Events for Specs")," page."),(0,i.mdx)(r.FbInternalOnly,{mdxType:"FbInternalOnly"},(0,i.mdx)("p",null,"In the Kotlin API, the parent component can simply pass a ",(0,i.mdx)("a",{parentName:"p",href:"https://kotlinlang.org/docs/lambdas.html"},"lambda")," as the callback instead of a reference to a generated ",(0,i.mdx)("inlineCode",{parentName:"p"},"EventHandler"),".\nFor more information on Kotlin events, see ",(0,i.mdx)("a",{parentName:"p",href:"/docs/kotlin/event-handling"},"Event Handling"),".")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java",metastring:"file=sample/src/main/java/com/facebook/samples/litho/java/communicating/ParentComponentReceivesEventFromChildComponent.kt start=start_demo end=end_demo",file:"sample/src/main/java/com/facebook/samples/litho/java/communicating/ParentComponentReceivesEventFromChildComponent.kt",start:"start_demo",end:"end_demo"},'class ParentComponentReceivesEventFromChildComponent(private val observer: ComponentEventObserver) :\n    KComponent() {\n\n  override fun ComponentScope.render(): Component {\n    val infoText = useState { "No event received from ChildComponent" }\n    return Column(style = Style.padding(all = 30.dp)) {\n      child(Text(text = "ParentComponent", textSize = 30.dp))\n      child(Text(text = infoText.value, textSize = 15.dp))\n      child(\n          ChildComponentSendsEventToParentComponent(\n              observer = observer, onChildClickEvent = { onNotifyParentEvent(infoText) }))\n    }\n  }\n\n  private fun onNotifyParentEvent(infoText: State<String>) {\n    infoText.update { "Received event from ChildComponent!" }\n  }\n}\n')),(0,i.mdx)("p",null,"The child component can invoke the lambda received from the parent to inform the parent that a certain action took place, such as when the child component receives a click event or, in a visibility handler, when it becomes visible.  The following code provides an example."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java",metastring:"file=sample/src/main/java/com/facebook/samples/litho/java/communicating/ChildComponentSendsEventToParentComponent.kt start=start_demo end=end_demo",file:"sample/src/main/java/com/facebook/samples/litho/java/communicating/ChildComponentSendsEventToParentComponent.kt",start:"start_demo",end:"end_demo"},'class ChildComponentSendsEventToParentComponent(\n    private val observer: ComponentEventObserver,\n    private val onChildClickEvent: () -> Unit,\n) : KComponent() {\n  override fun ComponentScope.render(): Component? {\n    return Column(style = Style.margin(all = 30.dp)) {\n      child(Text(text = "ChildComponent", textSize = 20f.sp))\n      child(\n          Text(\n              text = "Click to send event to parent!",\n              textSize = 15f.sp,\n              style =\n                  Style.padding(all = 5.dp)\n                      .border(\n                          Border(\n                              edgeAll = BorderEdge(color = Color.BLACK, width = 1.dp),\n                              radius = BorderRadius(all = 2.dp)))\n                      .onClick { onChildClickEvent() }))\n      child(\n          Text(\n              text = "Click to send event to Activity!",\n              textSize = 15f.sp,\n              style =\n                  Style.padding(all = 5.dp)\n                      .border(\n                          Border(\n                              edgeAll = BorderEdge(color = Color.BLACK, width = 1.dp),\n                              radius = BorderRadius(all = 2.dp)))\n                      .onClick { observer?.onComponentClicked() }))\n    }\n  }\n}\n')),(0,i.mdx)("h3",{id:"passing-new-props-from-a-parent-to-a-child"},"Passing new Props from a parent to a child"),(0,i.mdx)("p",null,"If a parent component needs to pass new data to a child, it can do so by simply passing new props to the child component.\nWhen the data is updated as a result of an action controlled by the parent component (for example, a click event on the parent component), the new data is passed down to the child component by triggering a 'state update', which updates the value of the prop that will be passed to the child component and recreates the child with this new value.  The child component receives the latest value of the state through the prop when it's created."),(0,i.mdx)("p",null,"The following code illustrates this concept with a click event on the parent component."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java",metastring:"file=sample/src/main/java/com/facebook/samples/litho/java/communicating/ParentComponentSendsEventToChildComponent.kt start=start_update_prop end=end_update_prop",file:"sample/src/main/java/com/facebook/samples/litho/java/communicating/ParentComponentSendsEventToChildComponent.kt",start:"start_update_prop",end:"end_update_prop"},'child(\n    Text(\n        text = "Click to send new text to ChildComponent",\n        textSize = 15.dp,\n        style =\n            Style.padding(all = 5.dp)\n                .margin(top = 15.dp)\n                .border(\n                    Border(\n                        edgeAll = BorderEdge(color = Color.BLACK, width = 1.dp),\n                        radius = BorderRadius(all = 2.dp)))\n                .onClick { version.update { it + 1 } }))\nchild(\n    ChildComponentReceivesEventFromParentComponent(\n        controller = controller, textFromParent = "Version ${version.value}"))\n')),(0,i.mdx)("h3",{id:"triggering-an-action-on-a-child-from-a-parent"},"Triggering an Action on a child from a parent"),(0,i.mdx)("p",null,"There are cases when a parent needs to trigger an action on a child instead of just passing new data. To do this, the parent can interact with the child using controllers (see ",(0,i.mdx)("a",{parentName:"p",href:"/docs/mainconcepts/primitivecomponents/primitive-controllers/"},"Controllers Pattern"),"),\nwhich the parent creates and passes to the child component as a prop:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java",metastring:"file=sample/src/main/java/com/facebook/samples/litho/java/communicating/ParentComponentSendsEventToChildComponent.kt start=start_define_controller end=end_define_controller",file:"sample/src/main/java/com/facebook/samples/litho/java/communicating/ParentComponentSendsEventToChildComponent.kt",start:"start_define_controller",end:"end_define_controller"},'override fun ComponentScope.render(): Component? {\n\n  val controller = useCached { ParentToChildEventController() }\n  val version = useState { 0 }\n\n  return Column(style = Style.padding(all = 30.dp)) {\n    child(Text(text = "ParentComponent", textSize = 30.dp))\n    child(\n        Text(\n            text = "Click to trigger show toast event on ChildComponent",\n            textSize = 15.dp,\n            style =\n                Style.padding(all = 5.dp)\n                    .margin(top = 15.dp)\n                    .border(\n                        Border(\n                            edgeAll = BorderEdge(color = Color.BLACK, width = 1.dp),\n                            radius = BorderRadius(all = 2.dp)))\n                    .onClick { controller.trigger("Message from parent") }))\n    child(\n        ChildComponentReceivesEventFromParentComponent(\n            controller = controller, textFromParent = "Child with controller"))\n')),(0,i.mdx)("h3",{id:"communicating-between-siblings"},"Communicating between siblings"),(0,i.mdx)("p",null,"Two sibling components (two child components of the same parent) cannot communicate directly. All communication must flow through the parent component, which intercepts events from a child component and notifies other child components of those events (using the methods detailed above)."),(0,i.mdx)("p",null,"A child component that needs to send a signal to a sibling component will dispatch an event to the common parent component:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java",metastring:"file=sample/src/main/java/com/facebook/samples/litho/java/communicating/ChildComponentSiblingCommunicationComponent.kt start=start_dispatch_to_parent end=end_dispatch_to_parent",file:"sample/src/main/java/com/facebook/samples/litho/java/communicating/ChildComponentSiblingCommunicationComponent.kt",start:"start_dispatch_to_parent",end:"end_dispatch_to_parent"},'class ChildComponentSiblingCommunicationComponent(\n    private val id: Int,\n    private val isSelected: Boolean,\n    private val onSelected: (Int) -> Unit,\n) : KComponent() {\n\n  override fun ComponentScope.render(): Component? {\n    return Row(style = Style.onClick { onSelected(id) }.margin(all = 30.dp)) {\n      child(\n          SolidColor(\n              color = if (isSelected) Color.BLUE else Color.WHITE,\n              style =\n                  Style.width(20.dp)\n                      .height(20.dp)\n                      .margin(top = 10.dp, end = 30.dp)\n                      .border(\n                          Border(\n                              edgeAll = BorderEdge(color = Color.BLUE, width = 1.dp),\n                              radius = BorderRadius(all = 2.dp)))))\n      child(Text(text = "ChildComponent $id", textSize = 20.dp))\n    }\n  }\n}\n')),(0,i.mdx)("p",null,"As shown in the following code, the parent component can:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"Perform a state update to recreate the sibling with new data."),(0,i.mdx)("li",{parentName:"ul"},"Trigger an event on the sibling using a reference.")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java",metastring:"file=sample/src/main/java/com/facebook/samples/litho/java/communicating/ParentComponentMediatorComponent.kt start=start_parent_mediator end=end_parent_mediator",file:"sample/src/main/java/com/facebook/samples/litho/java/communicating/ParentComponentMediatorComponent.kt",start:"start_parent_mediator",end:"end_parent_mediator"},'class ParentComponentMediatorComponent : KComponent() {\n  override fun ComponentScope.render(): Component? {\n\n    val selectedPosition = useState { 0 }\n\n    return Column(style = Style.padding(all = 30.dp)) {\n      child(Text(text = "ChildComponent", textSize = 30.dp))\n      child(\n          ChildComponentSiblingCommunicationComponent(\n              id = 0,\n              isSelected = selectedPosition.value == 0,\n              onSelected = { selectedPosition.update(0) }))\n      child(\n          ChildComponentSiblingCommunicationComponent(\n              id = 1,\n              isSelected = selectedPosition.value == 1,\n              onSelected = { selectedPosition.update(1) }))\n    }\n  }\n}\n')),(0,i.mdx)("h3",{id:"communicating-externally-to-a-component"},"Communicating externally to a component"),(0,i.mdx)("p",null,"New data can be passed to a component from outside a Litho hierarchy by simply creating a new root component with new props."),(0,i.mdx)("p",null,"There are multiple ways to perform an action on a component from outside a Litho hierarchy. The preferred method to pass new information to a component is by recreating it with new props; sometimes, it's necessary to trigger an action from non-Litho systems."),(0,i.mdx)("h4",{id:"with-an-observer"},"With an observer"),(0,i.mdx)("p",null,"An interface callback is invoked externally:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java",metastring:"file=sample/src/main/java/com/facebook/samples/litho/java/stateupdates/StateUpdateFromOutsideTreeActivity.java start=start_external_observer end=end_external_observer",file:"sample/src/main/java/com/facebook/samples/litho/java/stateupdates/StateUpdateFromOutsideTreeActivity.java",start:"start_external_observer",end:"end_external_observer"},'container.addView(\n    LithoView.create(\n        componentContext,\n        StateUpdateFromOutsideTreeWithListenerComponent.create(componentContext)\n            .eventObserver(observer1)\n            .build()));\n\nfinal Button button1 = new Button(this);\nbutton1.setText("Dispatch Event 1");\nbutton1.setOnClickListener(\n    new View.OnClickListener() {\n      @Override\n      public void onClick(View v) {\n        observer1.notifyExternalEventOccurred();\n      }\n    });\n')),(0,i.mdx)("p",null,"The Component implements the callback and dispatches a state update on itself when the callback is invoked. No props or state should be captured in the callback: the callback will not be updated if they change, as illustrated in the following code."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java",metastring:"file=sample/src/main/java/com/facebook/samples/litho/java/stateupdates/StateUpdateFromOutsideTreeWithListenerComponentSpec.java start=start_implement_observer end=end_implement_observer",file:"sample/src/main/java/com/facebook/samples/litho/java/stateupdates/StateUpdateFromOutsideTreeWithListenerComponentSpec.java",start:"start_implement_observer",end:"end_implement_observer"},"@OnCreateInitialState\nstatic void onCreateInitialState(\n    final ComponentContext c,\n    StateValue<Integer> counter,\n    @Prop ExternalEventObserver eventObserver) {\n  counter.set(0);\n  eventObserver.setListener(\n      new ExternalEventObserver.Listener() {\n        @Override\n        public void onMyEvent() {\n          // Note: you should not capture any props/state besides the ComponentContext here\n          // because they will not be updated for this callback if they change!\n          StateUpdateFromOutsideTreeWithListenerComponent.incrementCounter(c);\n        }\n      });\n}\n")),(0,i.mdx)("h4",{id:"with-a-handle"},"With a handle"),(0,i.mdx)("p",null,"A Handle reference can be created and passed to a Component, then used to invoke a trigger defined in the component:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java",metastring:"file=sample/src/main/java/com/facebook/samples/litho/java/stateupdates/StateUpdateFromOutsideTreeActivity.java start=start_external_handle end=end_external_handle",file:"sample/src/main/java/com/facebook/samples/litho/java/stateupdates/StateUpdateFromOutsideTreeActivity.java",start:"start_external_handle",end:"end_external_handle"},'final Handle componentHandle = new Handle();\nfinal LithoView lithoViewWithTrigger =\n    LithoView.create(\n        componentContext,\n        StateUpdateFromOutsideTreeWithTriggerComponent.create(componentContext)\n            .handle(componentHandle)\n            .build());\n\nfinal Button button2 = new Button(this);\nbutton2.setText("Dispatch Event 2");\nbutton2.setOnClickListener(\n    new View.OnClickListener() {\n      @Override\n      public void onClick(View v) {\n        StateUpdateFromOutsideTreeWithTriggerComponent.notifyExternalEvent(\n            // This is a bit of a gotcha right now: you need to use the ComponentContext from\n            // the ComponentTree to dispatch the trigger from outside a Component.\n            lithoViewWithTrigger.getComponentTree().getContext(),\n            componentHandle,\n            1 /* pass through the increment to show you can pass arbitrary data */);\n      }\n    });\n')),(0,i.mdx)("h3",{id:"communicating-externally-from-a-component"},"Communicating externally from a Component"),(0,i.mdx)("p",null,"To send events from a component to a listener outside of the Litho hierarchy, define an observer externally and invoke it from a component lifecycle method."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java",metastring:"file=sample/src/main/java/com/facebook/samples/litho/java/communicating/CommunicatingFromChildToParent.java start=start_define_observer end=end_define_observer",file:"sample/src/main/java/com/facebook/samples/litho/java/communicating/CommunicatingFromChildToParent.java",start:"start_define_observer",end:"end_define_observer"},'  final ComponentContext c = new ComponentContext(this);\n  setContentView(\n      LithoView.create(\n          c,\n          new ParentComponentReceivesEventFromChildComponent(\n              () ->\n                  Toast.makeText(\n                          c.getAndroidContext(),\n                          "Activity received event from child",\n                          Toast.LENGTH_SHORT)\n                      .show())));\n}\n\npublic interface ComponentEventObserver {\n  void onComponentClicked();\n}\n')),(0,i.mdx)("admonition",{type:"tip"},(0,i.mdx)("p",{parentName:"admonition"},"Keep in mind that some lifecycle methods of Litho components can be invoked on background threads, so invoking callbacks from these methods might not be thread-safe if the callback produces side-effects.")))}v.isMDXComponent=!0}}]);