"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6900],{15680:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>l,MDXProvider:()=>u,mdx:()=>C,useMDXComponents:()=>c,withMDXComponents:()=>p});var o=t(96540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(){return i=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e},i.apply(this,arguments)}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function m(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=o.createContext({}),p=function(e){return function(n){var t=c(n.components);return o.createElement(e,i({},n,{components:t}))}},c=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},u=function(e){var n=c(e.components);return o.createElement(l.Provider,{value:n},e.children)},d="mdxType",h={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},g=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,l=m(e,["components","mdxType","originalType","parentName"]),p=c(t),u=a,d=p["".concat(s,".").concat(u)]||p[u]||h[u]||i;return t?o.createElement(d,r(r({ref:n},l),{},{components:t})):o.createElement(d,r({ref:n},l))}));function C(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,s=new Array(i);s[0]=g;var r={};for(var m in n)hasOwnProperty.call(n,m)&&(r[m]=n[m]);r.originalType=e,r[d]="string"==typeof e?e:a,s[1]=r;for(var l=2;l<i;l++)s[l]=t[l];return o.createElement.apply(null,s)}return o.createElement.apply(null,t)}g.displayName="MDXCreateElement"},14389:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>m,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var o=t(58168),a=t(98587),i=(t(96540),t(15680)),s=["components"],r={id:"subcomponent-testing",title:"Sub-Component Testing"},m=void 0,l={unversionedId:"testing/subcomponent-testing",id:"testing/subcomponent-testing",title:"Sub-Component Testing",description:"The Getting Started page contains information to help you setup your test environment.",source:"@site/../docs/testing/subcomponent-testing.mdx",sourceDirName:"testing",slug:"/testing/subcomponent-testing",permalink:"/docs/testing/subcomponent-testing",draft:!1,editUrl:"https://github.com/facebook/litho/edit/master/website/../docs/testing/subcomponent-testing.mdx",tags:[],version:"current",frontMatter:{id:"subcomponent-testing",title:"Sub-Component Testing"}},p={},c=[{value:"Basic Sub-Component Matching",id:"basic-sub-component-matching",level:2},{value:"Setup",id:"setup",level:3},{value:"Testing Assertion on the Component Hierarchy",id:"testing-assertion-on-the-component-hierarchy",level:3},{value:"Understanding the API Usage",id:"understanding-the-api-usage",level:4},{value:"Matching Against Complex Hierarchies",id:"matching-against-complex-hierarchies",level:2},{value:"Custom Conditions",id:"custom-conditions",level:2},{value:"Creating a Custom Condition",id:"creating-a-custom-condition",level:3},{value:"Using a Custom Condition",id:"using-a-custom-condition",level:3},{value:"Simple Sub-Component Matching",id:"simple-sub-component-matching",level:2},{value:"Using with Legacy APIs",id:"using-with-legacy-apis",level:3},{value:"Resources",id:"resources",level:2}],u={toc:c},d="wrapper";function h(e){var n=e.components,t=(0,a.A)(e,s);return(0,i.mdx)(d,(0,o.A)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.mdx)("admonition",{type:"note"},(0,i.mdx)("p",{parentName:"admonition"},"The ",(0,i.mdx)("a",{parentName:"p",href:"/docs/testing/unit-testing"},"Getting Started")," page contains information to help you setup your test environment.")),(0,i.mdx)("p",null,"This page outlines APIs for testing assertions about the component hierarchy."),(0,i.mdx)("p",null,"Litho's testing APIs are similar to the APIs of ",(0,i.mdx)("a",{parentName:"p",href:"https://joel-costigliola.github.io/assertj/"},"AssertJ")," and ",(0,i.mdx)("a",{parentName:"p",href:"http://hamcrest.org/JavaHamcrest/"},"Hamcrest"),".\nIf you have used those two before, the content of this page should be very familiar."),(0,i.mdx)("h2",{id:"basic-sub-component-matching"},"Basic Sub-Component Matching"),(0,i.mdx)("p",null,"To demonstrate the use of the Litho testing APIs, consider the following component that truncates passed text and appends an ellipsis:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},'@LayoutSpec\nclass TruncatingComponentSpec {\n  @OnCreateLayout\n  static Component onCreateLayout(ComponentContext c, @Prop String text) {\n    // A unicode-aware implementation is left as an exercise to the reader.\n    final String s = text.length() > 16 ? text.substring(0, 16) + "..." : text;\n    return Text.create(c).text(s).build();\n  }\n}\n')),(0,i.mdx)("admonition",{type:"note"},(0,i.mdx)("p",{parentName:"admonition"},"For trivial components, it is often more appropriate to exploit the fact that they are pure functions that can be statically invoked.\nWhenever possible, test your business logic in isolation.")),(0,i.mdx)("h3",{id:"setup"},"Setup"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"Add ",(0,i.mdx)("inlineCode",{parentName:"li"},"@RunWith(LithoTestRunner.class)")," to the top of the test class."),(0,i.mdx)("li",{parentName:"ul"},"Add a JUnit ",(0,i.mdx)("a",{parentName:"li",href:"https://github.com/junit-team/junit4/wiki/Rules"},(0,i.mdx)("inlineCode",{parentName:"a"},"@Rule"))," ",(0,i.mdx)("inlineCode",{parentName:"li"},"LithoTestRule"),"."),(0,i.mdx)("li",{parentName:"ul"},"Add a check to ensure that tests are run in debug mode.\n",(0,i.mdx)("inlineCode",{parentName:"li"},"ComponentsConfiguration.IS_INTERNAL_BUILD")," must be true.")),(0,i.mdx)("p",null,"The test class should look like the following:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},'/**\n * Tests {@link LikersComponent}\n */\n@RunWith(RobolectricTestRunner.class)\npublic class TruncatingComponentTest {\n\n  public final @Rule LithoTestRule mLithoTestRule = new LithoTestRule();\n\n  @Before\n  public void assumeInDebugMode() {\n    assumeThat(\n      "These tests can only be run in debug mode.",\n      ComponentsConfiguration.IS_INTERNAL_BUILD, is(true)\n    );\n  }\n\n}\n')),(0,i.mdx)("h3",{id:"testing-assertion-on-the-component-hierarchy"},"Testing Assertion on the Component Hierarchy"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},'@Test\npublic void whenTextLengthIsLessThan16_shouldContainTextComponentWithFullText() {\n  final ComponentContext c = mLithoTestRule.getContext();\n  final TruncatingComponent component = TruncatingComponent.create(c)\n      .text("Mr. Meeseeks").build();\n\n  LegacyLithoAssertions.assertThat(c, component)\n    .has(subComponentWith(c, textEquals("Mr. Meeseeks")));\n}\n')),(0,i.mdx)("h4",{id:"understanding-the-api-usage"},"Understanding the API Usage"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"LegacyLithoAssertions.assertThat(ComponentContext, Component)")," creates and mounts the layout."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"has(ComponentContext, Condition)")," tests if the component hierarchy passes the assertion of the Condition. This is a standard AssertJ API; to see all AssertJ APIs, refer to the ",(0,i.mdx)("a",{parentName:"li",href:"http://joel-costigliola.github.io/assertj/assertj-core-conditions.html"},"AssertJ Core Conditions")," website."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"subComponentWith(ComponentContext, Condition)")," is a utility method from Litho's testing APIs to compose Conditions together."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"textEquals(String)")," is another utility method that creates a Condition that passes only for a Component of type ",(0,i.mdx)("inlineCode",{parentName:"li"},"Text"),", which has its text property set to the String argument."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},'subComponentWith(c, textEquals("Mr. Meeseeks")')," creates a Condition that 'passes for a component of type Text with its text property set to \"Mr. Meeseeks\"'.")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"The following code is a more complex composition of similar assertions"),":"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},'LegacyLithoAssertions.assertThat(c, component)\n    .has(allOf(\n        subComponentWith(c, textEquals("Mr. Meeseeks")),\n        subComponentWith(c, text(startsWith("Mr."))),\n        subComponentWith(c, anyOf(\n            text(endsWith("Sanchez")),\n            text(containsString("Mees")))\n        )\n    ));\n')),(0,i.mdx)("admonition",{type:"note"},(0,i.mdx)("p",{parentName:"admonition"},"The above assertions are only for the purpose of illustration. This is not a good test!")),(0,i.mdx)("h2",{id:"matching-against-complex-hierarchies"},"Matching Against Complex Hierarchies"),(0,i.mdx)("p",null,"Consider the following more complex LayoutSpec. It still has the same text truncation logic, with some new UI elements, and wraps the Text in a Column and a Card."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},'@LayoutSpec\npublic class TruncatingComponentSpec {\n  @OnCreateLayout\n  public static Component onCreateLayout(ComponentContext c, @Prop String text) {\n    final String s = text.length() > 16 ? text.substring(0, 16) + "..." : text;\n    return Column.create(c)\n        .backgroundColor(Color.GRAY)\n        .child(Card.create(c).content(Text.create(c).text(s)))\n        .build();\n  }\n}\n')),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"The original test will start failing now:")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},'@Test\npublic void whenTextLengthIsLessThan16_shouldContainTextComponentWithFullText() {\n  final ComponentContext c = mLithoTestRule.getContext();\n  final TruncatingComponent component = TruncatingComponent.create(c).text("Mr. Meeseeks").build();\n\n  LegacyLithoAssertions.assertThat(c, component)\n    .has(subComponentWith(c, textEquals("Mr. Meeseeks")));\n}\n')),(0,i.mdx)("p",null,"The error messages should provide sufficient information to understand why the test failed. The error message prints out the component hierarchy, and the assertion that failed:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-log"},'Expecting:\n <TruncatingComponent{0, 0 - 100, 100}\n  Card{0, 0 - 100, 6}\n    Column{3, 2 - 97, 2}\n      Text{0, 0 - 94, 0 text="Szechuan Sauce"}\n      CardClip{0, 0 - 94, 0}\n    CardShadow{0, 0 - 100, 6}>\nto have:\n <sub component with <text <is "Szechuan Sauce">>>\n')),(0,i.mdx)("p",null,"Here, the ",(0,i.mdx)("inlineCode",{parentName:"p"},"Text")," component was expected to be a direct descendant of ",(0,i.mdx)("inlineCode",{parentName:"p"},"TruncatingComponent"),".  However, the error message shows that the Text component is several levels below the TruncatingComponent."),(0,i.mdx)("p",null,"This test can be fixed by using a different Condition API called ",(0,i.mdx)("inlineCode",{parentName:"p"},"deepSubComponentWith"),". As the name suggests, this condition will test against all the components in the hierarchy, and not just the immediate descendant."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},'@Test\npublic void whenTextLengthIsLessThan16_shouldContainTextComponentWithFullText() {\n  final ComponentContext c = mLithoTestRule.getContext();\n  final TruncatingComponent component = TruncatingComponent.create(c).text("Mr. Meeseeks").build();\n\n  LegacyLithoAssertions.assertThat(c, component)\n    .has(\n      deepSubComponentWith(c, textEquals("Mr. Meeseeks"))\n    );\n}\n')),(0,i.mdx)("admonition",{type:"info"},(0,i.mdx)("p",{parentName:"admonition"},"For information on all Component conditions, see the ",(0,i.mdx)("a",{parentName:"p",href:"pathname:///javadoc/com/facebook/litho/testing/assertj/ComponentConditions.html"},"ComponentConditions")," JavaDoc.")),(0,i.mdx)("h2",{id:"custom-conditions"},"Custom Conditions"),(0,i.mdx)("p",null,"Custom Conditions can be created by implementing the ",(0,i.mdx)("inlineCode",{parentName:"p"},"Condition<InspectableComponent>")," interface which consists of a single method: ",(0,i.mdx)("inlineCode",{parentName:"p"},"matches(InspectableComponent)"),"."),(0,i.mdx)("p",null,(0,i.mdx)("a",{parentName:"p",href:"pathname:///javadoc/com/facebook/litho/testing/subcomponents/InspectableComponent.html"},"InspectableComponent")," is a wrapper around a ",(0,i.mdx)("inlineCode",{parentName:"p"},"Component")," with additional information about the component."),(0,i.mdx)("h3",{id:"creating-a-custom-condition"},"Creating a Custom Condition"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},'public static Condition<InspectableComponent> hasBackground() {\n  return new Condition<InspectableComponent>() {\n    @Override\n    public boolean matches(InspectableComponent value) {\n      as("any background"); // error message.\n      return value.getBackground() != null; // value contains the component being tested.\n    }\n  };\n}\n')),(0,i.mdx)("h3",{id:"using-a-custom-condition"},"Using a Custom Condition"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},'@Test\npublic void whenTruncatingComponentIsRendered_shouldHaveBackground() {\n  final ComponentContext c = mLithoTestRule.getContext();\n  final TruncatingComponent component = TruncatingComponent.create(c).text("Mr. Meeseeks").build();\n\n  LegacyLithoAssertions.assertThat(c, component)\n      .has(deepSubComponentWith(c, hasBackground()));\n}\n')),(0,i.mdx)("h2",{id:"simple-sub-component-matching"},"Simple Sub-Component Matching"),(0,i.mdx)("p",null,"To test for the mere presence of a component of a certain type, use the ",(0,i.mdx)("a",{parentName:"p",href:"pathname:///javadoc/com/facebook/litho/testing/subcomponents/SubComponent.html"},"SubComponent.of")," API."),(0,i.mdx)("p",null,"Consider a hypothetical LayoutSpec called ",(0,i.mdx)("inlineCode",{parentName:"p"},"StoryComponentSpec"),", which consists of a ",(0,i.mdx)("inlineCode",{parentName:"p"},"HeaderComponentSpec"),", ",(0,i.mdx)("inlineCode",{parentName:"p"},"MessageComponentSpec"),", ",(0,i.mdx)("inlineCode",{parentName:"p"},"LikersComponentSpec"),", and a\n",(0,i.mdx)("inlineCode",{parentName:"p"},"FeedbackComponentSpec"),"."),(0,i.mdx)("p",null,"The following test can be used to assert the presence of those components in the hierarchy:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},"public class StoryComponentTest {\n  ...\n\n  @Test\n  public void whenStoryComponentIsRendered_shouldContainAllSubcomponents() {\n    final ComponentContext c = mLithoTestRule.getContext();\n    final StoryComponent.Builder builder = StoryComponent.create(c).build();\n\n    assertThat(builder).hasSubComponents(\n        SubComponent.of(HeaderComponent.class),\n        SubComponent.of(MessageComponent.class),\n        SubComponent.of(LikersComponent.class),\n        SubComponent.of(FeedbackComponent.class));\n\n    assertThat(builder)\n        .doesNotContainSubComponent(SubComponent.of(TruncatingComponent.class));\n  }\n}\n")),(0,i.mdx)("h3",{id:"using-with-legacy-apis"},"Using with Legacy APIs"),(0,i.mdx)("p",null,"Litho provides a bridge interface ",(0,i.mdx)("a",{parentName:"p",href:"pathname:///javadoc/com/facebook/litho/testing/subcomponents/SubComponent.html#legacySubComponent-com.facebook.litho.testing.subcomponents.SubComponent-"},"legacySubComponent")," that enables use of the ",(0,i.mdx)("inlineCode",{parentName:"p"},"SubComponent.of")," API with the ",(0,i.mdx)("inlineCode",{parentName:"p"},"subComponentWith")," APIs. It accepts a ",(0,i.mdx)("inlineCode",{parentName:"p"},"SubComponent")," and works with both shallow and deep sub-component traversals. This is ideal if you want to ensure that a component with a given set of props exists in the component tree."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},'@Test\npublic void testSubComponentLegacyBridge() {\n  final ComponentContext c = mLithoTestRule.getContext();\n\n  assertThat(c, mComponent)\n      .has(\n          subComponentWith(\n              c,\n              legacySubComponent(\n                  SubComponent.of(\n                      FooterComponent.create(c).subtitle("Gubba nub nub doo rah kah").build()))));\n}\n')),(0,i.mdx)("h2",{id:"resources"},"Resources"),(0,i.mdx)("p",null,"To learn more, see the following resources:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("a",{parentName:"li",href:"pathname:///javadoc/com/facebook/litho/testing/assertj/LithoViewSubComponentExtractor.html"},"LithoViewSubComponentExtractor")),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("a",{parentName:"li",href:"pathname:///javadoc/com/facebook/litho/testing/assertj/LithoViewSubComponentDeepExtractor.html"},"LithoViewSubComponentDeepExtractor")),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("a",{parentName:"li",href:"pathname:///javadoc/com/facebook/litho/testing/assertj/ComponentConditions.html"},"ComponentConditions")),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("a",{parentName:"li",href:"http://joel-costigliola.github.io/assertj/assertj-core-conditions.html"},"AssertJ Conditions"))))}h.isMDXComponent=!0}}]);