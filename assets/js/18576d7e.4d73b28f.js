"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3094],{15680:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>u,MDXProvider:()=>p,mdx:()=>y,useMDXComponents:()=>c,withMDXComponents:()=>l});var r=n(96540);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(){return i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i.apply(this,arguments)}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=r.createContext({}),l=function(e){return function(t){var n=c(t.components);return r.createElement(e,i({},t,{components:n}))}},c=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(u.Provider,{value:t},e.children)},m="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,u=d(e,["components","mdxType","originalType","parentName"]),l=c(n),p=o,m=l["".concat(s,".").concat(p)]||l[p]||f[p]||i;return n?r.createElement(m,a(a({ref:t},u),{},{components:n})):r.createElement(m,a({ref:t},u))}));function y(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,s=new Array(i);s[0]=g;var a={};for(var d in t)hasOwnProperty.call(t,d)&&(a[d]=t[d]);a.originalType=e,a[m]="string"==typeof e?e:o,s[1]=a;for(var u=2;u<i;u++)s[u]=n[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},70591:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>u,default:()=>g,frontMatter:()=>d,metadata:()=>l,toc:()=>p});var r=n(58168),o=n(98587),i=(n(96540),n(15680)),s=n(86025),a=["components"],d={id:"tests-in-android-studio",title:"Testing in Android Studio"},u=void 0,l={unversionedId:"testing/tests-in-android-studio",id:"testing/tests-in-android-studio",title:"Testing in Android Studio",description:"The Litho repository can be used with both Buck and Gradle. The Buck plugin for",source:"@site/../docs/testing/tests-in-android-studio.mdx",sourceDirName:"testing",slug:"/testing/tests-in-android-studio",permalink:"/docs/testing/tests-in-android-studio",draft:!1,editUrl:"https://github.com/facebook/litho/edit/master/website/../docs/testing/tests-in-android-studio.mdx",tags:[],version:"current",frontMatter:{id:"tests-in-android-studio",title:"Testing in Android Studio"}},c={},p=[],m={toc:p},f="wrapper";function g(e){var t=e.components,n=(0,o.A)(e,a);return(0,i.mdx)(f,(0,r.A)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.mdx)("p",null,"The Litho repository can be used with both Buck and Gradle. The Buck plugin for\nAndroid Studio has support for running tests by simply clicking next to a tests\nmethod and requires no further configuration."),(0,i.mdx)("p",null,"Gradle, however, can be a bit tricky to convince to run our tests due to\nour use of native libraries. When running a test, you may see an error\nmessage complaining about ",(0,i.mdx)("inlineCode",{parentName:"p"},"libyoga")," like this:"),(0,i.mdx)("img",{src:(0,s.default)("/images/android-studio-tests-0.png"),width:"800px"}),(0,i.mdx)("p",null,"However, you can easily fix those loading issues by modifying the test settings.\nFirst, add ",(0,i.mdx)("inlineCode",{parentName:"p"},"-Djava.library.path=build/jniLibs"),' to the "VM Options" of your run\nconfiguration. Then, add the environment variables corresponding to your\nplatform:'),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"DYLD_LIBRARY_PATH=build/jniLibs")," for MacOS, or"),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"LD_LIBRARY_PATH=build/jniLibs")," for Linux.")),(0,i.mdx)("p",null,"The end result should look like this:"),(0,i.mdx)("img",{src:(0,s.default)("/images/android-studio-tests-1.png"),width:"800px"}),(0,i.mdx)("p",null,"Afterwards, you should be able to run your tests and see the results directly in\nAndroid Studio. Added benefit: You can continuously run tests in the background\non every change or manually rerun them by pressing ",(0,i.mdx)("inlineCode",{parentName:"p"},"Ctrl+Shift+F10")," by default."),(0,i.mdx)("img",{src:(0,s.default)("/images/android-studio-tests-2.png"),width:"800px"}),(0,i.mdx)("p",null,"When this works for you, make sure to update the default settings as well so you\ndon't need to enter those settings again for every new test you run:"),(0,i.mdx)("img",{src:(0,s.default)("/images/android-studio-tests-3.png"),width:"800px"}))}g.isMDXComponent=!0}}]);