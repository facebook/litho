"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6158],{74646:(e,t,a)=>{a.d(t,{A:()=>u});var l=a(58168),n=a(96540),i=a(68382),o=a(45603),d=a(76062),p="0.50.2",m="0.51.0-SNAPSHOT",r="0.10.5",s="0.142.0",c=a(6342);const u=function(e){var t=e.language,a=e.code.replace(/{{site.lithoVersion}}/g,p).replace(/{{site.soloaderVersion}}/g,r).replace(/{{site.lithoSnapshotVersion}}/g,m).replace(/{{site.flipperVersion}}/g,s).trim(),u=(0,c.p)().isDarkTheme?d.A:o.A;return n.createElement(i.Ay,(0,l.A)({},i.Gs,{code:a,language:t,theme:u}),(function(e){var t=e.className,a=e.style,l=e.tokens,i=e.getLineProps,o=e.getTokenProps;return n.createElement("pre",{className:t,style:a},l.map((function(e,t){return n.createElement("div",i({line:e,key:t}),e.map((function(e,t){return n.createElement("span",o({token:e,key:t}))})))})))}))}},79999:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>v,frontMatter:()=>m,metadata:()=>s,toc:()=>u});var l=a(58168),n=a(98587),i=(a(96540),a(15680)),o=a(11470),d=a(19365),p=(a(74646),["components"]),m={id:"builtin-widgets",title:"Built-in widgets"},r=void 0,s={unversionedId:"widgets/builtin-widgets",id:"widgets/builtin-widgets",title:"Built-in widgets",description:"This page covers the basic built-in widgets. For the full list of components and APIs, see the com.facebook.litho.widget package in javadocs.",source:"@site/../docs/widgets/builtin-widgets.mdx",sourceDirName:"widgets",slug:"/widgets/builtin-widgets",permalink:"/docs/widgets/builtin-widgets",draft:!1,editUrl:"https://github.com/facebook/litho/edit/master/website/../docs/widgets/builtin-widgets.mdx",tags:[],version:"current",frontMatter:{id:"builtin-widgets",title:"Built-in widgets"},sidebar:"mainSidebar",previous:{title:"Interactions",permalink:"/docs/kotlin/testing-actions"},next:{title:"Canvas",permalink:"/docs/widgets/canvas"}},c={},u=[{value:"Text",id:"text",level:2},{value:"Required Prop",id:"required-prop",level:3},{value:"Usage",id:"usage",level:3},{value:"TextInput",id:"textinput",level:2},{value:"Required Prop",id:"required-prop-1",level:3},{value:"Usage",id:"usage-1",level:3},{value:"Image",id:"image",level:2},{value:"Required Prop",id:"required-prop-2",level:3},{value:"Usage",id:"usage-2",level:3},{value:"Card",id:"card",level:2},{value:"Required Prop",id:"required-prop-3",level:3},{value:"Usage",id:"usage-3",level:3},{value:"SolidColor",id:"solidcolor",level:2},{value:"Required Prop",id:"required-prop-4",level:3},{value:"Usage",id:"usage-4",level:3},{value:"Progress",id:"progress",level:2},{value:"Required Prop",id:"required-prop-5",level:3},{value:"Usage",id:"usage-5",level:3},{value:"Spinner",id:"spinner",level:2},{value:"Required Props",id:"required-props",level:3},{value:"Usage",id:"usage-6",level:3},{value:"VerticalScroll",id:"verticalscroll",level:2},{value:"Required Prop",id:"required-prop-6",level:3},{value:"Usage",id:"usage-7",level:3},{value:"HorizontalScroll",id:"horizontalscroll",level:2},{value:"Required Prop",id:"required-prop-7",level:3},{value:"Usage",id:"usage-8",level:3},{value:"Recycler",id:"recycler",level:2}],x={toc:u},g="wrapper";function v(e){var t=e.components,a=(0,n.A)(e,p);return(0,i.mdx)(g,(0,l.A)({},x,a,{components:t,mdxType:"MDXLayout"}),(0,i.mdx)("p",null,"This page covers the basic built-in widgets. For the full list of components and APIs, see the ",(0,i.mdx)("a",{parentName:"p",href:"pathname:///javadoc/index.html?com/facebook/litho/widget/package-summary.html"},"com.facebook.litho.widget")," package in javadocs."),(0,i.mdx)("h2",{id:"text"},"Text"),(0,i.mdx)("p",null,"Shows simple text (the equivalent of an Android ",(0,i.mdx)("inlineCode",{parentName:"p"},"TextView")," within Litho)."),(0,i.mdx)("h3",{id:"required-prop"},"Required Prop"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"text: CharSequence")," - text to display.")),(0,i.mdx)("h3",{id:"usage"},"Usage"),(0,i.mdx)("p",null,(0,i.mdx)("inlineCode",{parentName:"p"},"Text")," has numerous optional props that can be used style text, just as with ",(0,i.mdx)("inlineCode",{parentName:"p"},"TextView")," since both use ",(0,i.mdx)("inlineCode",{parentName:"p"},"android.text.Layout")," under the hood."),(0,i.mdx)("p",null,"A full list of the optional props is available in the ",(0,i.mdx)("a",{parentName:"p",href:"pathname:///javadoc/com/facebook/litho/widget/Text.html"},"javadocs"),"."),(0,i.mdx)(o.default,{groupId:"widget",defaultValue:"kcomponent_widget",values:[{label:"KComponent",value:"kcomponent_widget"},{label:"Spec API",value:"specapi_widget"}],mdxType:"Tabs"},(0,i.mdx)(d.default,{value:"kcomponent_widget",mdxType:"TabItem"},(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/widgets/WidgetsExamplesComponent.kt start=start_text_widget_example end=end_text_widget_example",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/widgets/WidgetsExamplesComponent.kt",start:"start_text_widget_example",end:"end_text_widget_example"},'Text(\n    text = "This is my example text",\n    textSize = 12.sp,\n    textColor = Color.RED,\n    alignment = TextAlignment.CENTER)\n'))),(0,i.mdx)(d.default,{value:"specapi_widget",mdxType:"TabItem"},(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},'final Component component =\n    Text.create(c)\n        .text("This is my example text")\n        .textSizeRes(R.dimen.my_text_size)\n        .textColorRes(R.color.my_text_color)\n        .textAlignment(Layout.Alignment.ALIGN_CENTER)\n        .build();\n')))),(0,i.mdx)("h2",{id:"textinput"},"TextInput"),(0,i.mdx)("p",null,"Renders an editable text input using an Android ",(0,i.mdx)("inlineCode",{parentName:"p"},"EditText"),"."),(0,i.mdx)("h3",{id:"required-prop-1"},"Required Prop"),(0,i.mdx)("p",null,"None."),(0,i.mdx)("h3",{id:"usage-1"},"Usage"),(0,i.mdx)("p",null,"As this component is backed by Android's ",(0,i.mdx)("inlineCode",{parentName:"p"},"EditText"),", many native capabilities are applicable:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"Use an ",(0,i.mdx)("inlineCode",{parentName:"li"},"android.text.InputFilter ")," to set a text length limit or modify text input."),(0,i.mdx)("li",{parentName:"ul"},"Change the input representation by passing an ",(0,i.mdx)("inlineCode",{parentName:"li"},"android.text.InputType")," constant."),(0,i.mdx)("li",{parentName:"ul"},"For performance reasons, avoid recreating the Component with different props to change its configuration. Instead, use Event triggers ",(0,i.mdx)("inlineCode",{parentName:"li"},"OnTrigger")," to update text, request view focus or set selection. For example, ",(0,i.mdx)("inlineCode",{parentName:"li"},'TextInput.setText(c, "myTextInputKey", "myText")'),".")),(0,i.mdx)(o.default,{groupId:"widget",defaultValue:"kcomponent_widget",values:[{label:"KComponent",value:"kcomponent_widget"},{label:"Spec API",value:"specapi_widget"}],mdxType:"Tabs"},(0,i.mdx)(d.default,{value:"kcomponent_widget",mdxType:"TabItem"},(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/widgets/WidgetsExamplesComponent.kt start=start_textinput_widget_example end=end_textinput_widget_example",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/widgets/WidgetsExamplesComponent.kt",start:"start_textinput_widget_example",end:"end_textinput_widget_example"},'TextInput(\n    initialText = "Initial text",\n    multiline = true,\n    inputType = InputType.TYPE_CLASS_TEXT,\n    inputFilter = InputFilter.LengthFilter(/* maxLength= */ 10))\n'))),(0,i.mdx)(d.default,{value:"specapi_widget",mdxType:"TabItem"},(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},"private static final InputFilter lenFilter = new InputFilter.LengthFilter(maxLength);\nComponent component =\n    TextInput.create(c)\n        .initialText(text)\n        .textColorStateList(ColorStateList.valueOf(color))\n        .multiline(true)\n        .inputFilter(lenFilter)\n        .backgroundColor(Color.TRANSPARENT)\n        .inputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_FLAG_CAP_SENTENCES)\n        .build();\n")))),(0,i.mdx)("h2",{id:"image"},"Image"),(0,i.mdx)("p",null,"Displays a drawable."),(0,i.mdx)("h3",{id:"required-prop-2"},"Required Prop"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"drawable: Drawable")," - drawable to display.")),(0,i.mdx)("h3",{id:"usage-2"},"Usage"),(0,i.mdx)(o.default,{groupId:"widget",defaultValue:"kcomponent_widget",values:[{label:"KComponent",value:"kcomponent_widget"},{label:"Spec API",value:"specapi_widget"}],mdxType:"Tabs"},(0,i.mdx)(d.default,{value:"kcomponent_widget",mdxType:"TabItem"},(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/widgets/WidgetsExamplesComponent.kt start=start_image_example end=end_image_example",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/widgets/WidgetsExamplesComponent.kt",start:"start_image_example",end:"end_image_example"},"Image(\n    drawable = drawableRes(R.drawable.ic_launcher),\n    scaleType = ImageView.ScaleType.CENTER_CROP)\n"))),(0,i.mdx)(d.default,{value:"specapi_widget",mdxType:"TabItem"},(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},"Component component =\n    Image.create(c)\n        .drawableRes(R.drawable.my_drawable)\n        .scaleType(ImageView.ScaleType.CENTER_CROP)\n        .build();\n")))),(0,i.mdx)("h2",{id:"card"},"Card"),(0,i.mdx)("p",null,"The Litho equivalent of an Android ",(0,i.mdx)("inlineCode",{parentName:"p"},"CardView"),". ",(0,i.mdx)("inlineCode",{parentName:"p"},"Card")," applies borders with shadows/elevation to a given component.\nIf your card is rendered on top of a dynamically coloured background that cannot be 'faked' using the ",(0,i.mdx)("inlineCode",{parentName:"p"},"Card")," component, use the less performant prop ",(0,i.mdx)("inlineCode",{parentName:"p"},"transparencyEnabled(true)"),"."),(0,i.mdx)("h3",{id:"required-prop-3"},"Required Prop"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"child: Component")," - the component to decorate.")),(0,i.mdx)("h3",{id:"usage-3"},"Usage"),(0,i.mdx)(o.default,{groupId:"widget",defaultValue:"kcomponent_widget",values:[{label:"KComponent",value:"kcomponent_widget"},{label:"Spec API",value:"specapi_widget"}],mdxType:"Tabs"},(0,i.mdx)(d.default,{value:"kcomponent_widget",mdxType:"TabItem"},(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/widgets/WidgetsExamplesComponent.kt start=start_card_example end=end_card_example",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/widgets/WidgetsExamplesComponent.kt",start:"start_card_example",end:"end_card_example"},'Card(cornerRadius = 5.dp, clippingColor = Color.RED, child = { Text("my content") })\n'))),(0,i.mdx)(d.default,{value:"specapi_widget",mdxType:"TabItem"},(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},"Component component =\n    Card.create(c)\n        .content(myContentComponent)\n        .clippingColorRes(R.color.my_clipping_color)\n        .cornerRadiusDip(8)\n        .build();\n")))),(0,i.mdx)("h2",{id:"solidcolor"},"SolidColor"),(0,i.mdx)("p",null,"Renders solid color."),(0,i.mdx)("h3",{id:"required-prop-4"},"Required Prop"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"color: Int")," - color to display.")),(0,i.mdx)("h3",{id:"usage-4"},"Usage"),(0,i.mdx)(o.default,{groupId:"widget",defaultValue:"kcomponent_widget",values:[{label:"KComponent",value:"kcomponent_widget"},{label:"Spec API",value:"specapi_widget"}],mdxType:"Tabs"},(0,i.mdx)(d.default,{value:"kcomponent_widget",mdxType:"TabItem"},(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/widgets/WidgetsExamplesComponent.kt start=start_solidcolor_example end=end_solidcolor_example",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/widgets/WidgetsExamplesComponent.kt",start:"start_solidcolor_example",end:"end_solidcolor_example"},"SolidColor(color = Color.RED)\n"))),(0,i.mdx)(d.default,{value:"specapi_widget",mdxType:"TabItem"},(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},"Component component =\n    SolidColor.create(c)\n        .color(Color.RED)\n        .alpha(0.5)\n        .build();\n")))),(0,i.mdx)("h2",{id:"progress"},"Progress"),(0,i.mdx)("p",null,"Renders an infinitely spinning progress bar backed by the Android's ",(0,i.mdx)("inlineCode",{parentName:"p"},"ProgressBar"),"."),(0,i.mdx)("h3",{id:"required-prop-5"},"Required Prop"),(0,i.mdx)("p",null,"None."),(0,i.mdx)("h3",{id:"usage-5"},"Usage"),(0,i.mdx)(o.default,{groupId:"widget",defaultValue:"kcomponent_widget",values:[{label:"KComponent",value:"kcomponent_widget"},{label:"Spec API",value:"specapi_widget"}],mdxType:"Tabs"},(0,i.mdx)(d.default,{value:"kcomponent_widget",mdxType:"TabItem"},(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/widgets/WidgetsExamplesComponent.kt start=start_progress_example end=end_progress_example",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/widgets/WidgetsExamplesComponent.kt",start:"start_progress_example",end:"end_progress_example"},"Progress(indeterminateDrawable = drawableRes(R.drawable.ic_launcher))\n"))),(0,i.mdx)(d.default,{value:"specapi_widget",mdxType:"TabItem"},(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},"Component component =\n      Progress.create(c)\n        .indeterminateDrawableRes(R.drawable.my_loading_spinner)\n        .build();\n")))),(0,i.mdx)("h2",{id:"spinner"},"Spinner"),(0,i.mdx)("p",null,"A simple spinner (dropdown) component. Derived from the standard Android ",(0,i.mdx)("inlineCode",{parentName:"p"},"Spinner"),"."),(0,i.mdx)("h3",{id:"required-props"},"Required Props"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"options: List<String>")," - list of selection options."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"selectedOption: String")," - the currently selected option.")),(0,i.mdx)("h3",{id:"usage-6"},"Usage"),(0,i.mdx)(o.default,{groupId:"widget",defaultValue:"kcomponent_widget",values:[{label:"KComponent",value:"kcomponent_widget"},{label:"Spec API",value:"specapi_widget"}],mdxType:"Tabs"},(0,i.mdx)(d.default,{value:"kcomponent_widget",mdxType:"TabItem"},(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/widgets/WidgetsExamplesComponent.kt start=start_spinner_example end=end_spinner_example",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/widgets/WidgetsExamplesComponent.kt",start:"start_spinner_example",end:"end_spinner_example"},"Spinner(options = myOptions, selectedOption = myOptions.get(0), onItemSelected = {})\n"))),(0,i.mdx)(d.default,{value:"specapi_widget",mdxType:"TabItem"},(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-kotlin"},"val myOptions: List<String> = ...\nComponent component =\n      Spinner(\n        options = myOptions,\n        selectedOption = myOptions.get(0),\n        onItemSelected = { newSelection -> ...}\n    )\n")))),(0,i.mdx)("h2",{id:"verticalscroll"},"VerticalScroll"),(0,i.mdx)("p",null,"Wraps another component, allowing it to be vertically scrollable. It's analogous to Android's ",(0,i.mdx)("inlineCode",{parentName:"p"},"ScrollView"),"."),(0,i.mdx)("h3",{id:"required-prop-6"},"Required Prop"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"child: Component")," - a component to vertically scroll.")),(0,i.mdx)("h3",{id:"usage-7"},"Usage"),(0,i.mdx)(o.default,{groupId:"widget",defaultValue:"kcomponent_widget",values:[{label:"KComponent",value:"kcomponent_widget"},{label:"Spec API",value:"specapi_widget"}],mdxType:"Tabs"},(0,i.mdx)(d.default,{value:"kcomponent_widget",mdxType:"TabItem"},(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/widgets/WidgetsExamplesComponent.kt start=start_verticalscroll_example end=end_verticalscroll_example",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/widgets/WidgetsExamplesComponent.kt",start:"start_verticalscroll_example",end:"end_verticalscroll_example"},"VerticalScroll(style = Style.height(100.dp)) { Column { getComponents(this) } }\n"))),(0,i.mdx)(d.default,{value:"specapi_widget",mdxType:"TabItem"},(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},"Component component =\n      VerticalScroll.create(c)\n        .childComponent(myComponentToScroll)\n        .verticalFadingEdgeEnabled(true)\n        .fadingEdgeLengthDip(FADING_EDGE_LENGTH_DP)\n        .build();\n")))),(0,i.mdx)("h2",{id:"horizontalscroll"},"HorizontalScroll"),(0,i.mdx)("p",null,"Wraps another component, allowing it to be horizontally scrollable. It's analogous to Android's ",(0,i.mdx)("inlineCode",{parentName:"p"},"HorizontalScrollView"),"."),(0,i.mdx)("h3",{id:"required-prop-7"},"Required Prop"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"child: Component")," - a component to horizontally scroll.")),(0,i.mdx)("h3",{id:"usage-8"},"Usage"),(0,i.mdx)(o.default,{groupId:"widget",defaultValue:"kcomponent_widget",values:[{label:"KComponent",value:"kcomponent_widget"},{label:"Spec API",value:"specapi_widget"}],mdxType:"Tabs"},(0,i.mdx)(d.default,{value:"kcomponent_widget",mdxType:"TabItem"},(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/widgets/WidgetsExamplesComponent.kt start=start_horizontalscroll_example end=end_horizontalscroll_example",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/widgets/WidgetsExamplesComponent.kt",start:"start_horizontalscroll_example",end:"end_horizontalscroll_example"},"HorizontalScroll { Row { getComponents(this) } }\n"))),(0,i.mdx)(d.default,{value:"specapi_widget",mdxType:"TabItem"},(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},"Component component =\n      HorizontalScroll.create(c)\n        .contentProps(myComponentToScroll)\n        .build();\n")))),(0,i.mdx)("h2",{id:"recycler"},"Recycler"),(0,i.mdx)("p",null,(0,i.mdx)("inlineCode",{parentName:"p"},"Recycler")," is the equivalent of Android's ",(0,i.mdx)("inlineCode",{parentName:"p"},"RecyclerView"),". It's recommended to use ",(0,i.mdx)("a",{parentName:"p",href:"/docs/sections/start"},"Sections")," for efficient list rendering, which uses ",(0,i.mdx)("inlineCode",{parentName:"p"},"Recycler")," under the hood."),(0,i.mdx)("p",null,"To use the ",(0,i.mdx)("inlineCode",{parentName:"p"},"Recycler")," directly, see the ",(0,i.mdx)("a",{parentName:"p",href:"/docs/sections/recycler-collection-component"},"RecyclerCollectionComponent")," page."))}v.isMDXComponent=!0}}]);