"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5965],{15680:(e,n,a)=>{a.r(n),a.d(n,{MDXContext:()=>d,MDXProvider:()=>c,mdx:()=>g,useMDXComponents:()=>m,withMDXComponents:()=>p});var t=a(96540);function o(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function r(){return r=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var a=arguments[n];for(var t in a)Object.prototype.hasOwnProperty.call(a,t)&&(e[t]=a[t])}return e},r.apply(this,arguments)}function i(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function l(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?i(Object(a),!0).forEach((function(n){o(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function s(e,n){if(null==e)return{};var a,t,o=function(e,n){if(null==e)return{};var a,t,o={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(o[a]=e[a]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var d=t.createContext({}),p=function(e){return function(n){var a=m(n.components);return t.createElement(e,r({},n,{components:a}))}},m=function(e){var n=t.useContext(d),a=n;return e&&(a="function"==typeof e?e(n):l(l({},n),e)),a},c=function(e){var n=m(e.components);return t.createElement(d.Provider,{value:n},e.children)},h="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var a=e.components,o=e.mdxType,r=e.originalType,i=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=m(a),c=o,h=p["".concat(i,".").concat(c)]||p[c]||f[c]||r;return a?t.createElement(h,l(l({ref:n},d),{},{components:a})):t.createElement(h,l({ref:n},d))}));function g(e,n){var a=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=a.length,i=new Array(r);i[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[h]="string"==typeof e?e:o,i[1]=l;for(var d=2;d<r;d++)i[d]=a[d];return t.createElement.apply(null,i)}return t.createElement.apply(null,a)}u.displayName="MDXCreateElement"},50348:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>m,contentTitle:()=>d,default:()=>u,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var t=a(58168),o=a(98587),r=(a(96540),a(15680)),i=a(86025),l=["components"],s={id:"canvas",title:"Canvas"},d=void 0,p={unversionedId:"widgets/canvas",id:"widgets/canvas",title:"Canvas",description:"The Canvas component provides a means for drawing simple 2D graphics. It has many uses, including drawing decorations, backgrounds, data visualization, and animation.",source:"@site/../docs/widgets/canvas.mdx",sourceDirName:"widgets",slug:"/widgets/canvas",permalink:"/docs/widgets/canvas",draft:!1,editUrl:"https://github.com/facebook/litho/edit/master/website/../docs/widgets/canvas.mdx",tags:[],version:"current",frontMatter:{id:"canvas",title:"Canvas"},sidebar:"mainSidebar",previous:{title:"Built-in widgets",permalink:"/docs/widgets/builtin-widgets"},next:{title:"Migration Strategies",permalink:"/docs/kotlin/migration-strategies"}},m={},c=[{value:"Concepts",id:"concepts",level:2},{value:"Canvas",id:"canvas",level:3},{value:"Hardware Acceleration",id:"hardware-acceleration",level:4},{value:"Coordinate system",id:"coordinate-system",level:4},{value:"Group",id:"group",level:3},{value:"Layer",id:"layer",level:3},{value:"Coordinate system transformations",id:"coordinate-system-transformations",level:3},{value:"Shape",id:"shape",level:3},{value:"Path",id:"path",level:4},{value:"Drawing",id:"drawing",level:3},{value:"Shading",id:"shading",level:3},{value:"Examples",id:"examples",level:2},{value:"Fill shape with color and gradient",id:"fill-shape-with-color-and-gradient",level:3},{value:"Fill path with color and gradient",id:"fill-path-with-color-and-gradient",level:3},{value:"Stroke shape with color and gradient",id:"stroke-shape-with-color-and-gradient",level:3},{value:"Rotate a Group",id:"rotate-a-group",level:3},{value:"Cut a hole in a rectangle",id:"cut-a-hole-in-a-rectangle",level:3},{value:"Animations",id:"animations",level:3}],h={toc:c},f="wrapper";function u(e){var n=e.components,a=(0,o.A)(e,l);return(0,r.mdx)(f,(0,t.A)({},h,a,{components:n,mdxType:"MDXLayout"}),(0,r.mdx)("p",null,"The Canvas component provides a means for drawing simple 2D graphics. It has many uses, including drawing decorations, backgrounds, data visualization, and animation."),(0,r.mdx)("h2",{id:"concepts"},"Concepts"),(0,r.mdx)("h3",{id:"canvas"},"Canvas"),(0,r.mdx)("p",null,"A top-level element, which defines the drawing area. All drawing operations are executed with enabled anti-aliasing."),(0,r.mdx)("h4",{id:"hardware-acceleration"},"Hardware Acceleration"),(0,r.mdx)("p",null,"Drawing on a Canvas component is hardware accelerated by default."),(0,r.mdx)("p",null,"On Android, the following features are not hardware accelerated prior to API 28:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"BlendingMode.Darken")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"BlendingMode.Lighten")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"BlendingMode.Overlay")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"Shadow"))),(0,r.mdx)("p",null,"In order to turn off hardware acceleration, you can pass ",(0,r.mdx)("inlineCode",{parentName:"p"},"CanvasLayerType.Software")," as an argument to ",(0,r.mdx)("inlineCode",{parentName:"p"},"CanvasComponent"),". By default, ",(0,r.mdx)("inlineCode",{parentName:"p"},"CanvasLayerType.Auto")," is used,  which means that hardware acceleration will be automatically disabled on Android versions older than API 28 if any of the features from the list above is used. For more information about hardware acceleartion on Android, see the ",(0,r.mdx)("a",{parentName:"p",href:"https://fburl.com/7nkyeyo7"},"Android drawing models")," page at developer.android.com."),(0,r.mdx)("h4",{id:"coordinate-system"},"Coordinate system"),(0,r.mdx)("p",null,"The origin of the Canvas coordinate system is in the top-left corner. Y axis is pointing down and X axis is pointing right."),(0,r.mdx)("h3",{id:"group"},"Group"),(0,r.mdx)("p",null,"A group allows for grouping of the drawing commands and applying clip/transform to the whole group at once. Groups can be nested within each other and, in contrast to Layer, are not clipped to their bounds by default (there is an attribute that allows for changing that behavior)."),(0,r.mdx)("h3",{id:"layer"},"Layer"),(0,r.mdx)("p",null,"A Layer is similar to Group but allocates and redirects drawing to an offscreen rendering target. Elements drawn outside of a Layer region won\u2019t be visible. It may be useful in such cases as applying transparency or blending modes to a group of drawing commands. Layers should be as small as possible and should be used only when necessary (especially on Android) because they may cause performance issues if used incorrectly."),(0,r.mdx)("h3",{id:"coordinate-system-transformations"},"Coordinate system transformations"),(0,r.mdx)("p",null,"Canvas enables the application of affine transformation to Groups and Layers to project its coordinate space. The transformation can be used to specify the position, scale, rotation or skew of a Group or a Layer in the parent\u2019s coordinate space and is applied prior to executing drawing commands inside the Group/Layer, or applying the clip mask."),(0,r.mdx)("h3",{id:"shape"},"Shape"),(0,r.mdx)("p",null,"Canvas uses shapes to describe what should be drawn on the screen."),(0,r.mdx)("p",null,"A shape is one of:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Line"),(0,r.mdx)("li",{parentName:"ul"},"Rect"),(0,r.mdx)("li",{parentName:"ul"},"Circle"),(0,r.mdx)("li",{parentName:"ul"},"Ellipse"),(0,r.mdx)("li",{parentName:"ul"},"Arc")),(0,r.mdx)("h4",{id:"path"},"Path"),(0,r.mdx)("p",null,"A Path is a special type of Shape. It describes complex geometric shapes consisting of straight line segments, quadratic curves, and cubic curves. It can be drawn on a Canvas, or it can be used to describe the clipping region of a Group or Layer."),(0,r.mdx)("h3",{id:"drawing"},"Drawing"),(0,r.mdx)("p",null,"Canvas supports two drawing operations:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("strong",{parentName:"li"},"Fill")," - draws a filled shape"),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("strong",{parentName:"li"},"Stroke")," - draws a stroked (outlined) shape")),(0,r.mdx)("h3",{id:"shading"},"Shading"),(0,r.mdx)("p",null,"Shading defines the way the pixels of the shape will be drawn."),(0,r.mdx)("p",null,"Canvas supports two shading variants:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"solid color"),(0,r.mdx)("li",{parentName:"ul"},"gradient (linear or radial)")),(0,r.mdx)("h2",{id:"examples"},"Examples"),(0,r.mdx)("h3",{id:"fill-shape-with-color-and-gradient"},"Fill shape with color and gradient"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/canvas/DrawShapeCanvasKComponent.kt start=start_example end=end_example",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/canvas/DrawShapeCanvasKComponent.kt",start:"start_example",end:"end_example"},"class DrawShapeCanvasKComponent : KComponent() {\n  override fun ComponentScope.render(): Component {\n    return Column {\n      child(\n          CanvasComponent(style = Style.widthPercent(100f).height(100.px)) {\n            // left circle\n            fill(\n                shape = Shape.circle(center = Point(40f, 40f), radius = 40f),\n                shading = Shading.solidColor(Color.RED))\n            // right circle\n            fill(\n                shape = Shape.circle(center = Point(140f, 40f), radius = 40f),\n                shading =\n                    Shading.linearGradient(\n                        gradient = Gradient(Color.RED, Color.GREEN, Color.BLUE),\n                        startPoint = Point.Zero,\n                        endPoint = Point(180f, 0f)))\n          })\n    }\n  }\n}\n")),(0,r.mdx)("img",{width:"300",src:(0,i.default)("images/litho-canvas-filled-circles.png")}),(0,r.mdx)("h3",{id:"fill-path-with-color-and-gradient"},"Fill path with color and gradient"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/canvas/DrawPathCanvasKComponent.kt start=start_example end=end_example",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/canvas/DrawPathCanvasKComponent.kt",start:"start_example",end:"end_example"},"class DrawPathCanvasKComponent : KComponent() {\n  override fun ComponentScope.render(): Component {\n    // Using useCached to avoid recreating Path object on state updates\n    val heartPath = useCached {\n      // A heart shape, the path data taken from some random svg found online\n      Path {\n        add(\n            Path {\n              moveTo(Point(75f, 40f))\n              cubicTo(Point(75f, 37f), Point(70f, 25f), Point(50f, 25f))\n              cubicTo(Point(20f, 25f), Point(20f, 62.5f), Point(20f, 62.5f))\n              cubicTo(Point(20f, 80f), Point(40f, 102f), Point(75f, 120f))\n              cubicTo(Point(110f, 102f), Point(130f, 80f), Point(130f, 62.5f))\n              cubicTo(Point(130f, 62.5f), Point(130f, 25f), Point(100f, 25f))\n              cubicTo(Point(85f, 25f), Point(75f, 37f), Point(75f, 40f))\n            },\n            // the heart path starts at 20,25 so translate it to make it start at 0,0 in order to\n            // make\n            // positioning easier\n            Transform { translate(dx = -20f, dy = -25f) })\n      }\n    }\n\n    return Column {\n      child(\n          CanvasComponent(style = Style.widthPercent(100f).height(100.px)) {\n            // left heart\n            fill(shape = Shape.path(heartPath), shading = Shading.solidColor(Color.RED))\n            // right heart translated using a group\n            group(transform = Transform { translate(dx = 120f) }) {\n              fill(\n                  shape = Shape.path(heartPath),\n                  shading =\n                      Shading.linearGradient(\n                          gradient = Gradient(Color.RED, Color.GREEN, Color.BLUE),\n                          startPoint = Point.Zero,\n                          endPoint = Point(110f, 0f)))\n            }\n          })\n    }\n  }\n}\n")),(0,r.mdx)("img",{width:"300",src:(0,i.default)("images/litho-canvas-filled-hearts.png")}),(0,r.mdx)("h3",{id:"stroke-shape-with-color-and-gradient"},"Stroke shape with color and gradient"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/canvas/DrawStrokedShapeCanvasKComponent.kt start=start_example end=end_example",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/canvas/DrawStrokedShapeCanvasKComponent.kt",start:"start_example",end:"end_example"},"class DrawStrokedShapeCanvasKComponent : KComponent() {\n  override fun ComponentScope.render(): Component {\n    return Column {\n      child(\n          CanvasComponent(style = Style.widthPercent(100f).height(100.px)) {\n            // first ellipse\n            stroke(\n                shape = Shape.ellipse(Point(10f, 10f), Size(60f, 30f)),\n                shading = Shading.solidColor(Color.RED),\n                lineWidth = 4f,\n                dashLengths = floatArrayOf(8f, 4f))\n            // second ellipse\n            stroke(\n                shape = Shape.ellipse(Point(90f, 10f), Size(60f, 30f)),\n                shading =\n                    Shading.linearGradient(\n                        gradient = Gradient(Color.RED, Color.GREEN, Color.BLUE),\n                        startPoint = Point(90f, 0f),\n                        endPoint = Point(150f, 0f)),\n                lineWidth = 4f,\n                dashLengths = floatArrayOf(8f, 4f))\n          })\n    }\n  }\n}\n")),(0,r.mdx)("img",{width:"300",src:(0,i.default)("images/litho-canvas-stroked-dashed-ellipses.png")}),(0,r.mdx)("h3",{id:"rotate-a-group"},"Rotate a Group"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/canvas/DrawRotatedGroupCanvasKComponent.kt start=start_example end=end_example",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/canvas/DrawRotatedGroupCanvasKComponent.kt",start:"start_example",end:"end_example"},"class DrawRotatedGroupCanvasKComponent : KComponent() {\n  override fun ComponentScope.render(): Component {\n    return Column {\n      child(\n          CanvasComponent(style = Style.widthPercent(100f).height(100.px)) {\n            group(transform = Transform { rotate(degrees = 45f, pivot = Point(50f, 20f)) }) {\n              // first square\n              fill(\n                  shape = Shape.rect(topLeft = Point(40f, 10f), size = Size(40f, 40f)),\n                  shading = Shading.solidColor(Color.RED))\n              // second square\n              fill(\n                  shape = Shape.rect(topLeft = Point(90f, 10f), size = Size(40f, 40f)),\n                  shading = Shading.solidColor(Color.GREEN))\n            }\n          })\n    }\n  }\n}\n")),(0,r.mdx)("img",{width:"300",src:(0,i.default)("images/litho-canvas-rotated-group.png")}),(0,r.mdx)("h3",{id:"cut-a-hole-in-a-rectangle"},"Cut a hole in a rectangle"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/canvas/DrawTransparentHoleCanvasKComponent.kt start=start_example end=end_example",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/canvas/DrawTransparentHoleCanvasKComponent.kt",start:"start_example",end:"end_example"},"class DrawTransparentHoleCanvasKComponent : KComponent() {\n  override fun ComponentScope.render(): Component {\n    return Column {\n      child(\n          CanvasComponent(style = Style.widthPercent(100f).height(100.px)) {\n            // gradient background\n            fill(\n                // this.size returns the size of the current drawing scope, in this case it'll be\n                // the size of the canvas\n                shape = Shape.rect(topLeft = Point.Zero, size = size),\n                shading =\n                    Shading.linearGradient(\n                        gradient = Gradient(Color.RED, Color.GREEN, Color.BLUE),\n                        startPoint = Point.Zero,\n                        endPoint = Point(size.width, 0f)))\n            layer(\n                transform =\n                    Transform { translate(dx = size.width * 0.1f, dy = size.height * 0.1f) },\n                size = size * 0.8f // 80% of the canvas size\n                ) {\n                  // layer background\n                  fill(\n                      shape = Shape.rect(topLeft = Point.Zero, size = size),\n                      shading = Shading.solidColor(Color.CYAN))\n                  // ellipse with xor blending mode\n                  fill(\n                      shape =\n                          Shape.ellipse(\n                              topLeft = Point(size.width * 0.1f, size.height * 0.1f),\n                              size = size * 0.8f),\n                      shading = Shading.solidColor(Color.BLACK),\n                      blendingMode = BlendingMode.Xor)\n                }\n          })\n    }\n  }\n}\n")),(0,r.mdx)("img",{width:"300",src:(0,i.default)("images/litho-canvas-layer-hole.png")}),(0,r.mdx)("h3",{id:"animations"},"Animations"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/canvas/DrawAnimatedSquareCanvasKComponent.kt start=start_example end=end_example",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/canvas/DrawAnimatedSquareCanvasKComponent.kt",start:"start_example",end:"end_example"},"class DrawAnimatedSquareCanvasKComponent : KComponent() {\n  override fun ComponentScope.render(): Component {\n    val rotation = useState { 0f }\n    val animator = useRef<ValueAnimator?> { null }\n\n    val startAnimator: (ClickEvent) -> Unit = {\n      animator.value?.cancel()\n      animator.value =\n          ValueAnimator.ofFloat(0f, 360f).apply {\n            duration = 2000\n            interpolator = LinearInterpolator()\n            repeatCount = ValueAnimator.INFINITE\n            addUpdateListener { rotation.update(it.animatedValue as Float) }\n          }\n      animator.value?.start()\n    }\n\n    return Column {\n      child(\n          CanvasComponent(\n              style = Style.widthPercent(100f).height(100.px).onClick(action = startAnimator)) {\n                group(\n                    transform =\n                        Transform {\n                          translate(dx = size.center.x, dy = size.center.y)\n                          rotate(rotation.value, pivot = size.center)\n                        }) {\n                      // draw square\n                      fill(\n                          shape = Shape.rect(topLeft = Point(-30f, -30f), size = Size(60f, 60f)),\n                          shading = Shading.solidColor(Color.RED))\n                    }\n              })\n    }\n  }\n}\n")),(0,r.mdx)("img",{width:"300",src:(0,i.default)("images/litho-canvas-rotating-square.gif")}))}u.isMDXComponent=!0}}]);