"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[555],{15680:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>s,MDXProvider:()=>p,mdx:()=>f,useMDXComponents:()=>m,withMDXComponents:()=>d});var l=t(96540);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(){return i=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var l in t)Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l])}return e},i.apply(this,arguments)}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);n&&(l=l.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,l)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,l,o=function(e,n){if(null==e)return{};var t,l,o={},i=Object.keys(e);for(l=0;l<i.length;l++)t=i[l],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(l=0;l<i.length;l++)t=i[l],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=l.createContext({}),d=function(e){return function(n){var t=m(n.components);return l.createElement(e,i({},n,{components:t}))}},m=function(e){var n=l.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},p=function(e){var n=m(e.components);return l.createElement(s.Provider,{value:n},e.children)},h="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return l.createElement(l.Fragment,{},n)}},x=l.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,a=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),d=m(t),p=o,h=d["".concat(a,".").concat(p)]||d[p]||u[p]||i;return t?l.createElement(h,r(r({ref:n},s),{},{components:t})):l.createElement(h,r({ref:n},s))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=x;var r={};for(var c in n)hasOwnProperty.call(n,c)&&(r[c]=n[c]);r.originalType=e,r[h]="string"==typeof e?e:o,a[1]=r;for(var s=2;s<i;s++)a[s]=t[s];return l.createElement.apply(null,a)}return l.createElement.apply(null,t)}x.displayName="MDXCreateElement"},51975:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>m});var l=t(58168),o=t(98587),i=(t(96540),t(15680)),a=["components"],r={id:"lazycollections-interactions",title:"Interactions"},c=void 0,s={unversionedId:"kotlin/lazycollections/lazycollections-interactions",id:"kotlin/lazycollections/lazycollections-interactions",title:"Interactions",description:"Within Litho, lists are implemented using the Lazy Collection API.",source:"@site/../docs/kotlin/lazycollections/lazycollections-interactions.mdx",sourceDirName:"kotlin/lazycollections",slug:"/kotlin/lazycollections/lazycollections-interactions",permalink:"/docs/kotlin/lazycollections/lazycollections-interactions",draft:!1,editUrl:"https://github.com/facebook/litho/edit/master/website/../docs/kotlin/lazycollections/lazycollections-interactions.mdx",tags:[],version:"current",frontMatter:{id:"lazycollections-interactions",title:"Interactions"},sidebar:"mainSidebar",previous:{title:"Layout and Styling",permalink:"/docs/kotlin/lazycollections/lazycollections-layout"},next:{title:"Working with Updates",permalink:"/docs/kotlin/lazycollections/lazycollections-working-with-updates"}},d={},m=[{value:"Clicking items",id:"clicking-items",level:2},{value:"Scrolling the Lazy Collection",id:"scrolling-the-lazy-collection",level:2},{value:"Responding to scroll events",id:"responding-to-scroll-events",level:2},{value:"Paging",id:"paging",level:2},{value:"Pull to refresh",id:"pull-to-refresh",level:2}],p={toc:m},h="wrapper";function u(e){var n=e.components,t=(0,o.A)(e,a);return(0,i.mdx)(h,(0,l.A)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.mdx)("admonition",{type:"note"},(0,i.mdx)("p",{parentName:"admonition"},"Within Litho, lists are implemented using the Lazy Collection API.")),(0,i.mdx)("h2",{id:"clicking-items"},"Clicking items"),(0,i.mdx)("p",null,"Clicking items in the Lazy Collection can be done by simply adding ",(0,i.mdx)("inlineCode",{parentName:"p"},"Style.onClick")," to children. "),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/gettingstarted/BasicList.kt start=start_list_clicking_example end=end_list_clicking_example",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/gettingstarted/BasicList.kt",start:"start_list_clicking_example",end:"end_list_clicking_example"},'private val ONE_TO_TEN =\n    listOf("One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten")\n\nclass BasicList : KComponent() {\n  override fun ComponentScope.render(): Component {\n    val clickItem = useState { "Nothing" }\n    val callBack = useCallback { index: Int -> clickItem.update(ONE_TO_TEN[index]) }\n\n    return LazyList {\n      child(Text(text = "Click us!"))\n      ONE_TO_TEN.forEachIndexed { index, str ->\n        child(\n            id = str,\n            component =\n                Text(\n                    str,\n                    style = Style.onClick { callBack(index) }.padding(all = 16.dp),\n                ))\n      }\n      child(Text(text = "${clickItem.value} was clicked"))\n    }\n  }\n}\n')),(0,i.mdx)("h2",{id:"scrolling-the-lazy-collection"},"Scrolling the Lazy Collection"),(0,i.mdx)("p",null,"Scrolling the Lazy Collection by a given distance, or to a child with a given index/id, is a two-step process:"),(0,i.mdx)("ol",null,(0,i.mdx)("li",{parentName:"ol"},"Create a ",(0,i.mdx)("inlineCode",{parentName:"li"},"LazyCollectionController")," and attach it to the Lazy Collection via the ",(0,i.mdx)("inlineCode",{parentName:"li"},"lazyCollectionController")," parameter. Note that it should be defined in a ",(0,i.mdx)("inlineCode",{parentName:"li"},"useState")," hook."),(0,i.mdx)("li",{parentName:"ol"},"Use one of the ",(0,i.mdx)("inlineCode",{parentName:"li"},"LazyCollectionController"),"\u2019s scroll functions.")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/collection/Interactions.kt start=start_scrolling_example end=end_scrolling_example",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/collection/Interactions.kt",start:"start_scrolling_example",end:"end_scrolling_example"},'class ScrollingExample() : KComponent() {\n\n  override fun ComponentScope.render(): Component {\n    val controller = useLazyCollectionController()\n\n    // Use one of these lambdas to scroll, e.g. in an onClick callback\n    val scrollToTenth = useCallback<ClickEvent, Unit> { controller.scrollToIndex(index = 10) }\n    val smoothScrollToEnd = useCallback<ClickEvent, Unit> { controller.smoothScrollToId("End") }\n\n    return LazyList(\n        lazyCollectionController = controller,\n    ) {\n      child(Text(style = Style.onClick(scrollToTenth), text = "Scroll to item 10"))\n      child(Text(style = Style.onClick(smoothScrollToEnd), text = "Smooth Scroll to End"))\n      children(items = (0..20), id = { it }) { Text("$it") }\n      child(id = "End", component = Text("End"))\n    }\n  }\n}\n')),(0,i.mdx)("h2",{id:"responding-to-scroll-events"},"Responding to scroll events"),(0,i.mdx)("p",null,"An ",(0,i.mdx)("a",{parentName:"p",href:"https://github.com/facebook/litho/blob/master/litho-widget-kotlin/src/main/kotlin/com/facebook/litho/widget/collection/OnNearCallback.kt"},"OnNearCallback")," can be applied to the Lazy Collection's ",(0,i.mdx)("inlineCode",{parentName:"p"},"onNearEnd")," parameter, or a child's ",(0,i.mdx)("inlineCode",{parentName:"p"},"onNearViewport")," parameter."),(0,i.mdx)("p",null,"For example, ",(0,i.mdx)("inlineCode",{parentName:"p"},"onNearEnd = OnNearCallback(offset = 10) { /* callback */ }"),"."),(0,i.mdx)("p",null,"Where:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"onNearEnd")," is invoked when the Lazy Collection is scrolled to the last position or is scrolled within ",(0,i.mdx)("inlineCode",{parentName:"li"},"offset")," items away."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"onNearViewport")," is invoked when the child enters the viewport or is ",(0,i.mdx)("inlineCode",{parentName:"li"},"offset")," items away.")),(0,i.mdx)("p",null,"For more complex scroll handling (such as for animations), you can access the ",(0,i.mdx)("inlineCode",{parentName:"p"},"RecyclerView")," directly via a ",(0,i.mdx)("inlineCode",{parentName:"p"},"LazyCollectionController")," and use a ",(0,i.mdx)("inlineCode",{parentName:"p"},"RecyclerView.OnScrollListener")," to receive callbacks during scroll. To use this technique, take the following steps:"),(0,i.mdx)("ol",null,(0,i.mdx)("li",{parentName:"ol"},"Create a ",(0,i.mdx)("inlineCode",{parentName:"li"},"LazyCollectionController")," and attach it to the Lazy Collection via the ",(0,i.mdx)("inlineCode",{parentName:"li"},"lazyCollectionController")," parameter. Note that it should be defined in a ",(0,i.mdx)("inlineCode",{parentName:"li"},"useState")," hook."),(0,i.mdx)("li",{parentName:"ol"},"Access the ",(0,i.mdx)("inlineCode",{parentName:"li"},"RecyclerView")," via ",(0,i.mdx)("inlineCode",{parentName:"li"},"LazyCollectionController.recyclerView")),(0,i.mdx)("li",{parentName:"ol"},"Add a custom ",(0,i.mdx)("inlineCode",{parentName:"li"},"OnScrollListener")," using ",(0,i.mdx)("inlineCode",{parentName:"li"},"RecyclerView.addOnScrollListener(..)"))),(0,i.mdx)("admonition",{type:"note"},(0,i.mdx)("p",{parentName:"admonition"},"It is currently unsafe to trigger a scroll event inside a ",(0,i.mdx)("inlineCode",{parentName:"p"},"useEffect")," callback as it will be invoked before the Lazy Collection's contents have been mounted.\nTo trigger a scroll immediately on entering a screen, use the ",(0,i.mdx)("inlineCode",{parentName:"p"},"LazyCollection"),"'s ",(0,i.mdx)("inlineCode",{parentName:"p"},"onDataBound")," callback.")),(0,i.mdx)("h2",{id:"paging"},"Paging"),(0,i.mdx)("p",null,"Lists of data are often retrieved from the server in pages; additional data is requested only if the user scrolls. To achieve this behaviour, add a callback to the Lazy Collection\u2019s ",(0,i.mdx)("inlineCode",{parentName:"p"},"onNearEnd")," parameter that fetches more data. This will be triggered when the Lazy Collection is scrolled near to the end. Optionally, add a request indicator to the bottom of the list."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/collection/PaginationCollectionKComponent.kt start=start_example end=end_example",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/collection/PaginationCollectionKComponent.kt",start:"start_example",end:"end_example"},"class PagedExample(private val pagedList: PaginatedList<Item>) : KComponent() {\n  override fun ComponentScope.render(): Component =\n      LazyList(\n          onNearEnd = OnNearCallback { if (pagedList.hasNextPage) pagedList.fetchNextPage() },\n      ) {\n        // Add the retrieved items\n        children(items = pagedList.list, id = { it.id }) { Text(it.text) }\n\n        // Optionally add a progress spinner\n        if (pagedList.hasNextPage) {\n          child(ProgressSpinner())\n        }\n      }\n}\n")),(0,i.mdx)("h2",{id:"pull-to-refresh"},"Pull to refresh"),(0,i.mdx)("p",null,"To implement the 'pull to refresh' behaviour, provide a callback to the Lazy Collection's ",(0,i.mdx)("inlineCode",{parentName:"p"},"onPullToRefresh")," parameter. This callback will be responsible for fetching fresh data."),(0,i.mdx)("p",null,"To dismiss the refreshing indicator, take the following two steps:"),(0,i.mdx)("ol",null,(0,i.mdx)("li",{parentName:"ol"},"Create a ",(0,i.mdx)("inlineCode",{parentName:"li"},"LazyCollectionController")," and attach it to the Lazy Collection via the ",(0,i.mdx)("inlineCode",{parentName:"li"},"lazyCollectionController")," parameter. Note that it should be defined in a ",(0,i.mdx)("inlineCode",{parentName:"li"},"useState")," hook."),(0,i.mdx)("li",{parentName:"ol"},"Call ",(0,i.mdx)("inlineCode",{parentName:"li"},"LazyCollectionController.setRefreshing(false)"),".")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/collection/Interactions.kt start=start_pull_to_refresh_example end=end_pull_to_refresh_example",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/collection/Interactions.kt",start:"start_pull_to_refresh_example",end:"end_pull_to_refresh_example"},"class PullToRefreshExample(\n    val data: List<String>,\n    val refresh: () -> Unit,\n) : KComponent() {\n\n  override fun ComponentScope.render(): Component {\n    val controller = useLazyCollectionController()\n    return LazyList(\n        lazyCollectionController = controller,\n        onPullToRefresh = {\n          refresh()\n          controller.setRefreshing(false)\n        },\n    ) { /* Add children */\n    }\n  }\n}\n")))}u.isMDXComponent=!0}}]);