"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[778],{15680:(e,t,o)=>{o.r(t),o.d(t,{MDXContext:()=>m,MDXProvider:()=>d,mdx:()=>v,useMDXComponents:()=>s,withMDXComponents:()=>c});var n=o(96540);function i(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function r(){return r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var o=arguments[t];for(var n in o)Object.prototype.hasOwnProperty.call(o,n)&&(e[n]=o[n])}return e},r.apply(this,arguments)}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function l(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){i(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function p(e,t){if(null==e)return{};var o,n,i=function(e,t){if(null==e)return{};var o,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)o=r[n],t.indexOf(o)>=0||(i[o]=e[o]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)o=r[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(i[o]=e[o])}return i}var m=n.createContext({}),c=function(e){return function(t){var o=s(t.components);return n.createElement(e,r({},t,{components:o}))}},s=function(e){var t=n.useContext(m),o=t;return e&&(o="function"==typeof e?e(t):l(l({},t),e)),o},d=function(e){var t=s(e.components);return n.createElement(m.Provider,{value:t},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var o=e.components,i=e.mdxType,r=e.originalType,a=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),c=s(o),d=i,u=c["".concat(a,".").concat(d)]||c[d]||f[d]||r;return o?n.createElement(u,l(l({ref:t},m),{},{components:o})):n.createElement(u,l({ref:t},m))}));function v(e,t){var o=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=o.length,a=new Array(r);a[0]=h;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[u]="string"==typeof e?e:i,a[1]=l;for(var m=2;m<r;m++)a[m]=o[m];return n.createElement.apply(null,a)}return n.createElement.apply(null,o)}h.displayName="MDXCreateElement"},15132:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>c,contentTitle:()=>p,default:()=>f,frontMatter:()=>l,metadata:()=>m,toc:()=>s});var n=o(58168),i=o(98587),r=(o(96540),o(15680)),a=["components"],l={id:"primitive-preallocation",title:"Content Pooling"},p=void 0,m={unversionedId:"mainconcepts/primitivecomponents/primitive-preallocation",id:"mainconcepts/primitivecomponents/primitive-preallocation",title:"Content Pooling",description:"When a Primitive Component is being mounted, its content (View or Drawable) needs to be either initialized or reused from the recycling pool. If the pool is empty, a new instance will be created at that time, which might keep the UI thread too busy and drop one or more frames. To mitigate that, the Litho framework can pre-allocate a few instances and put them in the recycling pool to improve performance.",source:"@site/../docs/mainconcepts/primitivecomponents/primitive-preallocation.mdx",sourceDirName:"mainconcepts/primitivecomponents",slug:"/mainconcepts/primitivecomponents/primitive-preallocation",permalink:"/docs/mainconcepts/primitivecomponents/primitive-preallocation",draft:!1,editUrl:"https://github.com/facebook/litho/edit/master/website/../docs/mainconcepts/primitivecomponents/primitive-preallocation.mdx",tags:[],version:"current",frontMatter:{id:"primitive-preallocation",title:"Content Pooling"},sidebar:"mainSidebar",previous:{title:"Controllers Pattern",permalink:"/docs/mainconcepts/primitivecomponents/primitive-controllers"},next:{title:"Tracing",permalink:"/docs/mainconcepts/primitivecomponents/primitive-tracing"}},c={},s=[{value:"Configuring pools",id:"configuring-pools",level:2},{value:"Pre-allocation example",id:"pre-allocation-example",level:2},{value:"Pre-filling content pool",id:"pre-filling-content-pool",level:2}],d={toc:s},u="wrapper";function f(e){var t=e.components,o=(0,i.A)(e,a);return(0,r.mdx)(u,(0,n.A)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,r.mdx)("p",null,"When a Primitive Component is being mounted, its content (View or Drawable) needs to be either initialized or reused from the recycling pool. If the pool is empty, a new instance will be created at that time, which might keep the UI thread too busy and drop one or more frames. To mitigate that, the Litho framework can pre-allocate a few instances and put them in the recycling pool to improve performance."),(0,r.mdx)("admonition",{type:"note"},(0,r.mdx)("p",{parentName:"admonition"},"Content pooling is especially recommended for Primitive Components that inflate a complex View, which is time-consuming to create from scratch.")),(0,r.mdx)("h2",{id:"configuring-pools"},"Configuring pools"),(0,r.mdx)("p",null,"In order to configure content pools, the properties of the View/Drawable Allocator can also be customized."),(0,r.mdx)("p",null,"The ",(0,r.mdx)("inlineCode",{parentName:"p"},"ViewAllocator")," and ",(0,r.mdx)("inlineCode",{parentName:"p"},"DrawableAllocator")," have properties that allow for configuring the pool behaviour:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"canPreallocate")," - enables pre-allocation for this Primitive Component (disabled by default)"),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"poolSize")," - defines the number of instances for the Litho framework to pre-allocate (default value is three); setting ",(0,r.mdx)("inlineCode",{parentName:"li"},"poolSize")," to 0 disables pooling of a given View/Drawable")),(0,r.mdx)("p",null,"Primitive Components with ",(0,r.mdx)("inlineCode",{parentName:"p"},"canPreallocate")," set to ",(0,r.mdx)("inlineCode",{parentName:"p"},"true")," will be pre-allocated by Litho framework automatically before the component is mounted."),(0,r.mdx)("admonition",{type:"tip"},(0,r.mdx)("p",{parentName:"admonition"},"If creating new instances of the content is time-consuming but not very memory-consuming, it's recommended to keep the pool size high."),(0,r.mdx)("p",{parentName:"admonition"},"If there are memory concerns (especially for memory-consuming content), smaller pool sizes are recommended.")),(0,r.mdx)("h2",{id:"pre-allocation-example"},"Pre-allocation example"),(0,r.mdx)("p",null,"In order for mount content to be pre-allocated, at least the ",(0,r.mdx)("inlineCode",{parentName:"p"},"canPreallocate")," property should be set to ",(0,r.mdx)("inlineCode",{parentName:"p"},"true"),". Use ",(0,r.mdx)("inlineCode",{parentName:"p"},"poolSize")," to configure the amount of items in the pool, as shown in the example below:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/primitives/SampleTextInput.kt start=start_preallocation_example end=end_preallocation_example",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/primitives/SampleTextInput.kt",start:"start_preallocation_example",end:"end_preallocation_example"},"ViewAllocator(canPreallocate = true, poolSize = 10) { context -> EditText(context) }\n")),(0,r.mdx)("p",null,"For the SampleTextInput component example above, ten instances of EditText will be created and pre-allocated in the recycling pool."),(0,r.mdx)("h2",{id:"pre-filling-content-pool"},"Pre-filling content pool"),(0,r.mdx)("p",null,"If automatic pre-allocation isn't enough, Litho provides an API that allows for manually pre-filling content pool ahead of time. For example, it may be useful when there is a complex component that needs to be displayed on the next screen. Pre-filling such component before the user opens the next screen may improve performance. In order to manually pre-fill content pool, you should use ",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/facebook/litho/blob/75655943f348c0347d534e6931fb53b2f7f16195/litho-rendercore/src/main/java/com/facebook/rendercore/MountContentPools.java#L127"},"MountContentPools.prefillMountContentPool")," method, as shown in the example below:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"// preallocate 40 TestTextViewPrimitiveComponent components\nMountContentPools.prefillMountContentPool(androidContext, 40, TestTextViewPrimitiveComponent.ALLOCATOR)\n")),(0,r.mdx)("p",null,"The last parameter of ",(0,r.mdx)("inlineCode",{parentName:"p"},"prefillMountContentPool")," is the ",(0,r.mdx)("inlineCode",{parentName:"p"},"ContentAllocator"),", which for convenience, can be stored inside of PrimitiveComponent's companion object:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=litho-widget-kotlin/src/test/kotlin/com/facebook/litho/widget/ContentPoolingTest.kt start=start_prefill_mount_content_pool_primitive_component_example end=end_prefill_mount_content_pool_primitive_component_example",file:"litho-widget-kotlin/src/test/kotlin/com/facebook/litho/widget/ContentPoolingTest.kt",start:"start_prefill_mount_content_pool_primitive_component_example",end:"end_prefill_mount_content_pool_primitive_component_example"},"class TestTextViewPrimitiveComponent(val style: Style? = null) : PrimitiveComponent() {\n  override fun PrimitiveComponentScope.render(): LithoPrimitive {\n    return LithoPrimitive(\n        layoutBehavior = FixedSizeLayoutBehavior(100.px, 100.px),\n        mountBehavior = MountBehavior(ALLOCATOR) {},\n        style = style)\n  }\n\n  companion object {\n    val ALLOCATOR = ViewAllocator(poolSize = 10) { context -> TextView(context) }\n  }\n}\n")),(0,r.mdx)("admonition",{title:"Important",type:"note"},(0,r.mdx)("p",{parentName:"admonition"},"In order for content pre-filling to work properly, it's important to pass the same instance of an Allocator to the Primitive's ",(0,r.mdx)("inlineCode",{parentName:"p"},"MountBehavior")," and to ",(0,r.mdx)("inlineCode",{parentName:"p"},"prefillMountContentPool")," method.")))}f.isMDXComponent=!0}}]);