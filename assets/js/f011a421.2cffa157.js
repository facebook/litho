"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8831],{15680:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>l,MDXProvider:()=>h,mdx:()=>x,useMDXComponents:()=>d,withMDXComponents:()=>s});var a=t(96540);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(){return o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e},o.apply(this,arguments)}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function p(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function m(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=a.createContext({}),s=function(e){return function(n){var t=d(n.components);return a.createElement(e,o({},n,{components:t}))}},d=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):p(p({},n),e)),t},h=function(e){var n=d(e.components);return a.createElement(l.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},f=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,r=e.parentName,l=m(e,["components","mdxType","originalType","parentName"]),s=d(t),h=i,c=s["".concat(r,".").concat(h)]||s[h]||u[h]||o;return t?a.createElement(c,p(p({ref:n},l),{},{components:t})):a.createElement(c,p({ref:n},l))}));function x(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,r=new Array(o);r[0]=f;var p={};for(var m in n)hasOwnProperty.call(n,m)&&(p[m]=n[m]);p.originalType=e,p[c]="string"==typeof e?e:i,r[1]=p;for(var l=2;l<o;l++)r[l]=t[l];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}f.displayName="MDXCreateElement"},76429:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>f,frontMatter:()=>m,metadata:()=>s,toc:()=>h});var a=t(58168),i=t(98587),o=(t(96540),t(15680)),r=t(86025),p=["components"],m={id:"transition-types",title:"Types of Transitions"},l=void 0,s={unversionedId:"animations/transition-types",id:"animations/transition-types",title:"Types of Transitions",description:"Litho supports animated transitions between two consecutive states of the UI (LayoutStates), which, on this page, are called:",source:"@site/../docs/animations/transition-types.mdx",sourceDirName:"animations",slug:"/animations/transition-types",permalink:"/docs/animations/transition-types",draft:!1,editUrl:"https://github.com/facebook/litho/edit/master/website/../docs/animations/transition-types.mdx",tags:[],version:"current",frontMatter:{id:"transition-types",title:"Types of Transitions"},sidebar:"mainSidebar",previous:{title:"Animation Basics",permalink:"/docs/animations/transition-basics"},next:{title:"Animating All Layout",permalink:"/docs/animations/transition-all-layout"}},d={},h=[{value:"Change transitions",id:"change-transitions",level:2},{value:"How the Change type functions internally",id:"how-the-change-type-functions-internally",level:3},{value:"Appear transitions",id:"appear-transitions",level:3},{value:"How the Appear type functions internally",id:"how-the-appear-type-functions-internally",level:3},{value:"Disappear transitions",id:"disappear-transitions",level:3},{value:"How the Disappear type functions internally",id:"how-the-disappear-type-functions-internally",level:3}],c={toc:h},u="wrapper";function f(e){var n=e.components,t=(0,i.A)(e,p);return(0,o.mdx)(u,(0,a.A)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.mdx)("p",null,"Litho supports animated transitions between two consecutive states of the UI (",(0,o.mdx)("inlineCode",{parentName:"p"},"LayoutStates"),"), which, on this page, are called:"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("strong",{parentName:"li"},"Before")," - the state of the UI before the updates, prior to the start of the transition."),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("strong",{parentName:"li"},"After")," - the state of the UI after the update, after the transition has ended.")),(0,o.mdx)("p",null,"When defining transitions, it's necessary to indicate to the framework what ",(0,o.mdx)("inlineCode",{parentName:"p"},"Component"),"/",(0,o.mdx)("inlineCode",{parentName:"p"},"AnimatedProperty")," pairs are to be animated. Based on the presence of the Component in ",(0,o.mdx)("em",{parentName:"p"},"before")," and ",(0,o.mdx)("em",{parentName:"p"},"after")," states, three types of transitions can be defined: ",(0,o.mdx)("a",{parentName:"p",href:"#change-transitions"},"Change"),", ",(0,o.mdx)("a",{parentName:"p",href:"#appear-transitions"},"Appear"),", and ",(0,o.mdx)("a",{parentName:"p",href:"#disappear-transitions"},"Disappear"),"."),(0,o.mdx)("h2",{id:"change-transitions"},"Change transitions"),(0,o.mdx)("p",null,"A transition where the target Component is present in both ",(0,o.mdx)("em",{parentName:"p"},"before")," and ",(0,o.mdx)("em",{parentName:"p"},"after")," ",(0,o.mdx)("inlineCode",{parentName:"p"},"LayoutState"),"s is called a ",(0,o.mdx)("em",{parentName:"p"},"Change")," transition."),(0,o.mdx)("p",null,"The ",(0,o.mdx)("inlineCode",{parentName:"p"},"SimpleAllLayoutTransitionComponent")," featured in the ",(0,o.mdx)("a",{parentName:"p",href:"/docs/animations/transition-basics"},"Animation Basics")," page features a ",(0,o.mdx)("em",{parentName:"p"},"Change")," transition, since the 'square' Component is always present in the layout but changes its position (",(0,o.mdx)("inlineCode",{parentName:"p"},"X")," property). The 'square' is illustrated in the following animation."),(0,o.mdx)("video",{loop:"true",autoplay:"true",class:"video",width:"100%",height:"200px"},(0,o.mdx)("source",{type:"video/webm",src:(0,r.default)("/videos/transitions/basics2.webm")}),(0,o.mdx)("p",null,"Your browser does not support the video element.")),(0,o.mdx)("h3",{id:"how-the-change-type-functions-internally"},"How the Change type functions internally"),(0,o.mdx)("p",null,"Imagine a scenario in which layout ",(0,o.mdx)("em",{parentName:"p"},"A")," (the ",(0,o.mdx)("em",{parentName:"p"},"before")," state) is mounted (rendered on the screen) and there exists a blueprint of layout ",(0,o.mdx)("em",{parentName:"p"},"B")," (the ",(0,o.mdx)("em",{parentName:"p"},"after")," state), which the framework is ready to render. Both of these layouts have ",(0,o.mdx)("inlineCode",{parentName:"p"},"ComponentC")," present, and there is a transition defined for a ",(0,o.mdx)("inlineCode",{parentName:"p"},"AnimatedProperty.P")," of this component."),(0,o.mdx)("p",null,"The framework needs to take the following steps in order to run ",(0,o.mdx)("em",{parentName:"p"},"change")," animations:"),(0,o.mdx)("ol",null,(0,o.mdx)("li",{parentName:"ol"},"Pick the current value of the ",(0,o.mdx)("inlineCode",{parentName:"li"},"AnimatedProperty.P")," from the mounted UI element (a ",(0,o.mdx)("inlineCode",{parentName:"li"},"View")," or 'Drawable') that represents ",(0,o.mdx)("inlineCode",{parentName:"li"},"ComponentC")," on the screen. This is the ",(0,o.mdx)("em",{parentName:"li"},"start")," value for the animation."),(0,o.mdx)("li",{parentName:"ol"},"Pick the animation ",(0,o.mdx)("em",{parentName:"li"},"end")," value of ",(0,o.mdx)("inlineCode",{parentName:"li"},"AnimatedProperty.P")," from the blueprint of layout ",(0,o.mdx)("em",{parentName:"li"},"B"),"."),(0,o.mdx)("li",{parentName:"ol"},"When the layout ",(0,o.mdx)("em",{parentName:"li"},"B")," is mounted to the screen, instead of applying the new value of 'P' immediately, keep the previous value in place, subscribe to the ",(0,o.mdx)("a",{parentName:"li",href:"pathname:///javadoc/com/facebook/litho/choreographercompat/ChoreographerCompat.html"},"Choreographer"),", then start changing the value of ",(0,o.mdx)("inlineCode",{parentName:"li"},"P")," for the new mounted UI element on every frame until it reaches the ",(0,o.mdx)("em",{parentName:"li"},"end")," value.")),(0,o.mdx)("admonition",{type:"note"},(0,o.mdx)("p",{parentName:"admonition"},(0,o.mdx)("inlineCode",{parentName:"p"},"ComponentC")," is present in both trees.")),(0,o.mdx)("p",null,"Before:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-kotlin"},"Column(alignItems = YogaAlign.FLEX_START) { // AnimatedProperty.X aligned to start\n  child(\n      SolidColor(                           // <- ComponentC\n          color = YELLOW,\n          style = Style.width(80.dp).height(80.dp).transitionKey(context, SQUARE_KEY)))\n}\n")),(0,o.mdx)("p",null,"After:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-kotlin"},"Column(alignItems = YogaAlign.FLEX_END) {   // AnimatedProperty.X aligned to end\n  child(\n      SolidColor(                           // <- ComponentC\n          color = YELLOW,\n          style = Style.width(80.dp).height(80.dp).transitionKey(context, SQUARE_KEY)))\n}\n")),(0,o.mdx)("h3",{id:"appear-transitions"},"Appear transitions"),(0,o.mdx)("p",null,"A transition where the target Component appears on screen is called an ",(0,o.mdx)("em",{parentName:"p"},"Appear")," transition. The target Component is not present in the ",(0,o.mdx)("em",{parentName:"p"},"before")," ",(0,o.mdx)("inlineCode",{parentName:"p"},"LayoutState")," and is present in the ",(0,o.mdx)("em",{parentName:"p"},"after")," ",(0,o.mdx)("inlineCode",{parentName:"p"},"LayoutState"),"."),(0,o.mdx)("p",null,"In order to run transitions, you need the ",(0,o.mdx)("em",{parentName:"p"},"start")," and ",(0,o.mdx)("em",{parentName:"p"},"end")," values of the ",(0,o.mdx)("inlineCode",{parentName:"p"},"AnimatedProperty"),". The framework provides the ",(0,o.mdx)("em",{parentName:"p"},"end")," value and the user provides the ",(0,o.mdx)("em",{parentName:"p"},"start")," value.\nThe ",(0,o.mdx)("em",{parentName:"p"},"start")," value can be specified by using the ",(0,o.mdx)("inlineCode",{parentName:"p"},".appearFrom()")," method when building a ",(0,o.mdx)("inlineCode",{parentName:"p"},"Transition"),", as shown in the following LayoutSpec:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-java",metastring:"file=sample/src/main/java/com/facebook/samples/litho/java/animations/docs/AppearTransitionComponentSpec.java start=start end=end",file:"sample/src/main/java/com/facebook/samples/litho/java/animations/docs/AppearTransitionComponentSpec.java",start:"start",end:"end"},'@LayoutSpec\npublic class AppearTransitionComponentSpec {\n\n  private static final String SQUARE_KEY = "square";\n\n  @OnCreateLayout\n  static Component onCreateLayout(ComponentContext c, @State boolean shown) {\n    Component child;\n    if (shown) {\n      child =\n          SolidColor.create(c)\n              .color(YELLOW)\n              .widthDip(80)\n              .heightDip(80)\n              .transitionKey(SQUARE_KEY)\n              .build();\n    } else {\n      child = null;\n    }\n\n    return Column.create(c)\n        .heightPercent(100)\n        .child(child)\n        .clickHandler(AppearTransitionComponent.onClickEvent(c))\n        .alignItems(YogaAlign.FLEX_END)\n        .build();\n  }\n\n  @OnCreateTransition\n  static Transition onCreateTransition(ComponentContext c) {\n    return Transition.create(SQUARE_KEY)\n        .animate(AnimatedProperties.X)\n        .appearFrom(0f)\n        .animate(AnimatedProperties.ALPHA)\n        .appearFrom(0f);\n  }\n\n  @OnEvent(ClickEvent.class)\n  static void onClickEvent(ComponentContext c, @FromEvent View view) {\n    AppearTransitionComponent.onUpdateState(c);\n  }\n\n  @OnUpdateState\n  static void onUpdateState(StateValue<Boolean> shown) {\n    shown.set(!shown.get());\n  }\n}\n')),(0,o.mdx)("p",null,"The following animation shows the ",(0,o.mdx)("em",{parentName:"p"},"Appear")," transition in action."),(0,o.mdx)("video",{loop:"true",autoplay:"true",class:"video",width:"100%",height:"200px"},(0,o.mdx)("source",{type:"video/webm",src:(0,r.default)("/videos/transitions/appear.webm")}),(0,o.mdx)("p",null,"Your browser does not support the video element.")),(0,o.mdx)("h3",{id:"how-the-appear-type-functions-internally"},"How the Appear type functions internally"),(0,o.mdx)("p",null,"Using the same scenario described for the ",(0,o.mdx)("a",{parentName:"p",href:"#how-the-change-type-functions-internally"},"Change")," type:"),(0,o.mdx)("ol",null,(0,o.mdx)("li",{parentName:"ol"},"Pick the ",(0,o.mdx)("inlineCode",{parentName:"li"},"appearFrom")," value of ",(0,o.mdx)("inlineCode",{parentName:"li"},"AnimatedProperty.P")," from the ",(0,o.mdx)("inlineCode",{parentName:"li"},"Transition")," object.  This is the ",(0,o.mdx)("em",{parentName:"li"},"start")," value for the animation."),(0,o.mdx)("li",{parentName:"ol"},"Pick the animation ",(0,o.mdx)("em",{parentName:"li"},"end")," value of ",(0,o.mdx)("inlineCode",{parentName:"li"},"AnimatedProperty.P")," from the blueprint of layout ",(0,o.mdx)("em",{parentName:"li"},"B"),"."),(0,o.mdx)("li",{parentName:"ol"},"When layout ",(0,o.mdx)("em",{parentName:"li"},"B")," is mounted to the screen, instead of applying the ",(0,o.mdx)("em",{parentName:"li"},"end")," value from that layout to the mounted item immediately, set the user-provided ",(0,o.mdx)("em",{parentName:"li"},"appearFrom")," value and drive that to the ",(0,o.mdx)("em",{parentName:"li"},"end")," value from the layout.")),(0,o.mdx)("p",null,"Before:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-kotlin"},"val child = null\n\nColumn(alignItems = YogaAlign.FLEX_END) {\n  child(child)     // ComponentC is null here\n}\n")),(0,o.mdx)("p",null,"After:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-kotlin"},"val child =\n    SolidColor(\n        color = YELLOW,\n        style = Style.width(80.dp).height(80.dp).transitionKey(context, SQUARE_KEY))\n\nColumn(alignItems = YogaAlign.FLEX_END) {\n  child(child)     // ComponentC is present and will be animated.\n}\n")),(0,o.mdx)("h3",{id:"disappear-transitions"},"Disappear transitions"),(0,o.mdx)("p",null,"The ",(0,o.mdx)("em",{parentName:"p"},"Disappear")," transition type is the opposite of the ",(0,o.mdx)("a",{parentName:"p",href:"#appear-transitions"},"Appear")," transition type."),(0,o.mdx)("p",null,"A transition where the target Component disappears from the screen is called a ",(0,o.mdx)("em",{parentName:"p"},"Disappear")," transition. The target Component is present in the ",(0,o.mdx)("em",{parentName:"p"},"before")," ",(0,o.mdx)("inlineCode",{parentName:"p"},"LayoutState")," and is not present in the ",(0,o.mdx)("em",{parentName:"p"},"after")," ",(0,o.mdx)("inlineCode",{parentName:"p"},"LayoutState"),"."),(0,o.mdx)("p",null,"In order to configure a ",(0,o.mdx)("em",{parentName:"p"},"Disappear")," transition, you need to provide an ",(0,o.mdx)("em",{parentName:"p"},"end")," value for the property that is disappearing. The ",(0,o.mdx)("em",{parentName:"p"},"end")," value can be specified by using the ",(0,o.mdx)("inlineCode",{parentName:"p"},".disappearTo()")," method when building a ",(0,o.mdx)("inlineCode",{parentName:"p"},"Transition"),", as shown in the following code:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-kotlin"},"useTransition(\n    Transition.create(SQUARE_KEY)\n        .animate(AnimatedProperties.X)\n        .appearFrom(0f)\n        .animate(AnimatedProperties.ALPHA)\n        .appearFrom(0f)\n        .disappearTo(0f)\n        .animate(AnimatedProperties.SCALE)\n        .disappearTo(0.5f))\n}\n")),(0,o.mdx)("p",null,"The following animation shows the ",(0,o.mdx)("em",{parentName:"p"},"Disappear")," transition in action."),(0,o.mdx)("video",{loop:"true",autoplay:"true",class:"video",width:"100%",height:"200px"},(0,o.mdx)("source",{type:"video/webm",src:(0,r.default)("/videos/transitions/disappear.webm")}),(0,o.mdx)("p",null,"Your browser does not support the video element.")),(0,o.mdx)("h3",{id:"how-the-disappear-type-functions-internally"},"How the Disappear type functions internally"),(0,o.mdx)("ol",null,(0,o.mdx)("li",{parentName:"ol"},"Pick the ",(0,o.mdx)("em",{parentName:"li"},"start")," value from the mounted UI element that represents the ",(0,o.mdx)("inlineCode",{parentName:"li"},"Component"),"."),(0,o.mdx)("li",{parentName:"ol"},"Retrieve the ",(0,o.mdx)("em",{parentName:"li"},"end")," value from the user-provided ",(0,o.mdx)("inlineCode",{parentName:"li"},"disappearTo")," value of the transition definition."),(0,o.mdx)("li",{parentName:"ol"},"Render the ",(0,o.mdx)("em",{parentName:"li"},"after")," layout, but instead of removing the UI element from the screen immediately, drive the value of ",(0,o.mdx)("inlineCode",{parentName:"li"},"AnimatedProperty")," to the ",(0,o.mdx)("em",{parentName:"li"},"end")," value then remove the UI element.")),(0,o.mdx)("admonition",{type:"note"},(0,o.mdx)("p",{parentName:"admonition"},"The disappearing component no longer exists in the Component Tree, but must still exist in the view hierarchy in order to be rendered for the duration of the animation. To achieve this, the component that's being animated out is moved from its current container in the before state to the root component of the after state, and rendered above all other content. Once the animation ends, the disappearing component (and its associated View / Drawable) is fully removed.")),(0,o.mdx)("p",null,"Before:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-kotlin"},"val child =\n    SolidColor(\n        color = YELLOW,\n        style = Style.width(80.dp).height(80.dp).transitionKey(context, SQUARE_KEY))\n\nColumn(alignItems = YogaAlign.FLEX_END) {\n  child(child)     // ComponentC is present and will be animated.\n}\n")),(0,o.mdx)("p",null,"After:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-kotlin"},"val child = null\n\nColumn(alignItems = YogaAlign.FLEX_END) {\n  child(child)     // ComponentC is null here\n}\n")),(0,o.mdx)("admonition",{type:"info"},(0,o.mdx)("p",{parentName:"admonition"},"During a transition, a disappearing ",(0,o.mdx)("inlineCode",{parentName:"p"},"Component")," is not part of the layout tree. Instead, it is drawn on top of all the remaining components. This may cause visual glitches in the component's z-order.")))}f.isMDXComponent=!0}}]);