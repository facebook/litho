"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2743],{15680:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>c,MDXProvider:()=>d,mdx:()=>h,useMDXComponents:()=>l,withMDXComponents:()=>s});var r=n(96540);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(){return i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i.apply(this,arguments)}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function m(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),s=function(e){return function(t){var n=l(t.components);return r.createElement(e,i({},t,{components:n}))}},l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):m(m({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",v={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,a=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),s=l(n),d=o,u=s["".concat(a,".").concat(d)]||s[d]||v[d]||i;return n?r.createElement(u,m(m({ref:t},c),{},{components:n})):r.createElement(u,m({ref:t},c))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=f;var m={};for(var p in t)hasOwnProperty.call(t,p)&&(m[p]=t[p]);m.originalType=e,m[u]="string"==typeof e?e:o,a[1]=m;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},8348:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>f,frontMatter:()=>p,metadata:()=>s,toc:()=>d});var r=n(58168),o=n(98587),i=(n(96540),n(15680)),a=n(52112),m=["components"],p={id:"overview",title:"Overview"},c=void 0,s={unversionedId:"mainconcepts/primitivecomponents/overview",id:"mainconcepts/primitivecomponents/overview",title:"Overview",description:"Primitive Components are used to render views or drawables, and should only be created when you need to integrate your own views/drawables with Litho.",source:"@site/../docs/mainconcepts/primitivecomponents/overview.mdx",sourceDirName:"mainconcepts/primitivecomponents",slug:"/mainconcepts/primitivecomponents/overview",permalink:"/docs/mainconcepts/primitivecomponents/overview",draft:!1,editUrl:"https://github.com/facebook/litho/edit/master/website/../docs/mainconcepts/primitivecomponents/overview.mdx",tags:[],version:"current",frontMatter:{id:"overview",title:"Overview"},sidebar:"mainSidebar",previous:{title:"useCallback",permalink:"/docs/mainconcepts/use-callback"},next:{title:"Creating a Primitive Component",permalink:"/docs/mainconcepts/primitivecomponents/primitive-component"}},l={},d=[],u={toc:d},v="wrapper";function f(e){var t=e.components,n=(0,o.A)(e,m);return(0,i.mdx)(v,(0,r.A)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.mdx)("p",null,"Primitive Components are used to render views or drawables, and should only be created when you need to integrate your own views/drawables with Litho."),(0,i.mdx)("p",null,"The Primitive Components section contains the following pages:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("a",{parentName:"li",href:"/docs/mainconcepts/primitivecomponents/primitive-component"},"Creating a Primitive Component")," - details how to create a Primitive Component responsible for rendering a View or Drawable. Also, compares Primitive Components with KComponents."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("a",{parentName:"li",href:"/docs/mainconcepts/primitivecomponents/primitive"},"Lifecycle of a Primitive")," - covers the purpose and creation of a Primitive in addition to how to create and mount its content."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("a",{parentName:"li",href:"/docs/mainconcepts/primitivecomponents/primitive-measuring"},"Measuring")," - shows different strategies to measure the content the Primitive Component will render."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("a",{parentName:"li",href:"/docs/mainconcepts/primitivecomponents/primitive-controllers"},"Controllers Pattern")," - illustrates the use of controllers by implementing a simple TimePicker that shows an arbitrary time."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("a",{parentName:"li",href:"/docs/mainconcepts/primitivecomponents/primitive-preallocation"},"Content Pooling")," - details a strategy that can be used to populate the content pools to optimise first mount performance."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("a",{parentName:"li",href:"/docs/mainconcepts/primitivecomponents/primitive-tracing"},"Tracing")," - shows how to customize ",(0,i.mdx)("a",{parentName:"li",href:"https://developer.android.com/topic/performance/tracing"},"performance tracing")," information for Primitive Components.")),(0,i.mdx)("admonition",{type:"info"},(0,i.mdx)("p",{parentName:"admonition"},"Primitive Components are a replacement for the old Specs API-based ",(0,i.mdx)("a",{parentName:"p",href:"/docs/codegen/mount-specs"},"Mount Specs"),". Here, ",(0,i.mdx)("em",{parentName:"p"},"Mount")," refers to the operation performed by all components in a layout tree to extract their rendered state (a ",(0,i.mdx)("inlineCode",{parentName:"p"},"View")," or a ",(0,i.mdx)("inlineCode",{parentName:"p"},"Drawable"),") to be displayed."),(0,i.mdx)("p",{parentName:"admonition"},"Information and step-by-step explanations of how to migrate existing MountSpec components to Primitive Components can be found in ",(0,i.mdx)("a",{parentName:"p",href:"/docs/kotlin/migrating-from-mountspecs-to-primitives"},"Migrating MountSpecs")," page.")),(0,i.mdx)(a.FbInternalOnly,{mdxType:"FbInternalOnly"},(0,i.mdx)("p",null,'Some of the above concepts have been explained in "Litho Primitives API: MountSpecs 2.0" talk presented during Mobile Developer Summit 2023:'),(0,i.mdx)("iframe",{width:"675",height:"380",src:"https://drive.google.com/file/d/177UnJwZBnuemhUdYUZl669L5TlrXloY3/preview",frameborder:"0",allow:"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:!0})))}f.isMDXComponent=!0}}]);