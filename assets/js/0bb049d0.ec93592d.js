"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9142],{15680:(e,t,i)=>{i.r(t),i.d(t,{MDXContext:()=>p,MDXProvider:()=>d,mdx:()=>f,useMDXComponents:()=>s,withMDXComponents:()=>c});var n=i(96540);function a(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function o(){return o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var i=arguments[t];for(var n in i)Object.prototype.hasOwnProperty.call(i,n)&&(e[n]=i[n])}return e},o.apply(this,arguments)}function r(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function m(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?r(Object(i),!0).forEach((function(t){a(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):r(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function l(e,t){if(null==e)return{};var i,n,a=function(e,t){if(null==e)return{};var i,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)i=o[n],t.indexOf(i)>=0||(a[i]=e[i]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)i=o[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(a[i]=e[i])}return a}var p=n.createContext({}),c=function(e){return function(t){var i=s(t.components);return n.createElement(e,o({},t,{components:i}))}},s=function(e){var t=n.useContext(p),i=t;return e&&(i="function"==typeof e?e(t):m(m({},t),e)),i},d=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},u="mdxType",v={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var i=e.components,a=e.mdxType,o=e.originalType,r=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=s(i),d=a,u=c["".concat(r,".").concat(d)]||c[d]||v[d]||o;return i?n.createElement(u,m(m({ref:t},p),{},{components:i})):n.createElement(u,m({ref:t},p))}));function f(e,t){var i=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=i.length,r=new Array(o);r[0]=h;var m={};for(var l in t)hasOwnProperty.call(t,l)&&(m[l]=t[l]);m.originalType=e,m[u]="string"==typeof e?e:a,r[1]=m;for(var p=2;p<o;p++)r[p]=i[p];return n.createElement.apply(null,r)}return n.createElement.apply(null,i)}h.displayName="MDXCreateElement"},9386:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>v,frontMatter:()=>m,metadata:()=>p,toc:()=>s});var n=i(58168),a=i(98587),o=(i(96540),i(15680)),r=["components"],m={id:"primitive",title:"Lifecycle of a Primitive Component"},l=void 0,p={unversionedId:"mainconcepts/primitivecomponents/primitive",id:"mainconcepts/primitivecomponents/primitive",title:"Lifecycle of a Primitive Component",description:"A Primitive represents a reusable unit responsible for hosting the logic to create, measure, and mount the content that the Primitive Component will render.",source:"@site/../docs/mainconcepts/primitivecomponents/primitive.mdx",sourceDirName:"mainconcepts/primitivecomponents",slug:"/mainconcepts/primitivecomponents/primitive",permalink:"/docs/mainconcepts/primitivecomponents/primitive",draft:!1,editUrl:"https://github.com/facebook/litho/edit/master/website/../docs/mainconcepts/primitivecomponents/primitive.mdx",tags:[],version:"current",frontMatter:{id:"primitive",title:"Lifecycle of a Primitive Component"},sidebar:"mainSidebar",previous:{title:"Creating a Primitive Component",permalink:"/docs/mainconcepts/primitivecomponents/primitive-component"},next:{title:"Measuring",permalink:"/docs/mainconcepts/primitivecomponents/primitive-measuring"}},c={},s=[{value:"Lifecycle of a Primitive",id:"lifecycle-of-a-primitive",level:2},{value:"Creation of a Primitive",id:"creation-of-a-primitive",level:3},{value:"Content size measurement",id:"content-size-measurement",level:3},{value:"Content creation",id:"content-creation",level:3},{value:"Mounting and unmounting content properties",id:"mounting-and-unmounting-content-properties",level:3}],d={toc:s},u="wrapper";function v(e){var t=e.components,i=(0,a.A)(e,r);return(0,o.mdx)(u,(0,n.A)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,o.mdx)("p",null,"A ",(0,o.mdx)("inlineCode",{parentName:"p"},"Primitive")," represents a reusable unit responsible for hosting the logic to create, measure, and mount the content that the Primitive Component will render."),(0,o.mdx)("p",null,"As illustrated in the ",(0,o.mdx)("a",{parentName:"p",href:"/docs/mainconcepts/primitivecomponents/primitive-component#creating-a-primitive-component"},"Creating a Primitive Component")," page, the ",(0,o.mdx)("inlineCode",{parentName:"p"},"render()")," method should return a ",(0,o.mdx)("inlineCode",{parentName:"p"},"Primitive")," implementation and any ",(0,o.mdx)("inlineCode",{parentName:"p"},"Style")," object to be applied to the component on the ",(0,o.mdx)("inlineCode",{parentName:"p"},"LithoPrimitive")," object."),(0,o.mdx)("p",null,"This page provides an overview of a ",(0,o.mdx)("inlineCode",{parentName:"p"},"Primitive"),": a composable API that can be configured to provide a bespoke implementation."),(0,o.mdx)("p",null,"A Primitive consists of:"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},"LayoutBehavior - defines how a Primitive measures itself"),(0,o.mdx)("li",{parentName:"ul"},"MountConfiguration - defines how a Primitive mounts and configures a View or a Drawable associated with that Primitive")),(0,o.mdx)("h2",{id:"lifecycle-of-a-primitive"},"Lifecycle of a Primitive"),(0,o.mdx)("p",null,"A Primitive has four important stages in its lifecycle, which occur in the following order:"),(0,o.mdx)("ol",null,(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("a",{parentName:"li",href:"#creation-of-a-primitive"},"Creation")),(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("a",{parentName:"li",href:"#content-size-measurement"},"Content size measurement")),(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("a",{parentName:"li",href:"#content-creation"},"Content creation")),(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("a",{parentName:"li",href:"#mounting-and-unmounting-content-properties"},"Mounting and unmounting content properties"))),(0,o.mdx)("p",null,"Each of these stages is detailed in the following sub-sections."),(0,o.mdx)("h3",{id:"creation-of-a-primitive"},"Creation of a Primitive"),(0,o.mdx)("p",null,"In order to create a Primitive, create an instance of a ",(0,o.mdx)("a",{parentName:"p",href:"https://github.com/facebook/litho/blob/75655943f348c0347d534e6931fb53b2f7f16195/litho-rendercore-primitives/src/main/java/com/facebook/rendercore/primitives/Primitive.kt#L36"},"Primitive")," class."),(0,o.mdx)("p",null,"The following example provides an implementation of ",(0,o.mdx)("inlineCode",{parentName:"p"},"Primitive")," with an ",(0,o.mdx)("inlineCode",{parentName:"p"},"ImageView")," as content:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/primitives/SimpleImageViewPrimitiveComponent.kt start=start_image_primitive_component_example end=end_image_primitive_component_example",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/primitives/SimpleImageViewPrimitiveComponent.kt",start:"start_image_primitive_component_example",end:"end_image_primitive_component_example"},"class SimpleImageViewPrimitiveComponent(private val style: Style? = null) : PrimitiveComponent() {\n\n  override fun PrimitiveComponentScope.render(): LithoPrimitive {\n    return LithoPrimitive(primitive = SimpleImageViewPrimitive, style = style)\n  }\n}\n\ninternal val PrimitiveComponentScope.SimpleImageViewPrimitive\n  get() =\n      Primitive(\n          layoutBehavior = ImageLayoutBehavior,\n          mountBehavior =\n              MountBehavior(ViewAllocator { context -> ImageView(context) }) {\n                bind(R.drawable.ic_launcher) { imageView ->\n                  imageView.setImageDrawable(drawableRes(R.drawable.ic_launcher))\n                  onUnbind { imageView.setImageResource(0) }\n                }\n              })\n")),(0,o.mdx)("h3",{id:"content-size-measurement"},"Content size measurement"),(0,o.mdx)("admonition",{type:"note"},(0,o.mdx)("p",{parentName:"admonition"},"This stage of the Primitive's lifecycle can occur on any thread.")),(0,o.mdx)("p",null,"Each Primitive should privide an implementation of ",(0,o.mdx)("a",{parentName:"p",href:"https://github.com/facebook/litho/blob/75655943f348c0347d534e6931fb53b2f7f16195/litho-rendercore-primitives/src/main/java/com/facebook/rendercore/primitives/LayoutBehavior.kt#L30"},"LayoutBehavior")," interface to define how it measures itself given arbitrary width and height specs. The ",(0,o.mdx)("inlineCode",{parentName:"p"},"PrimitiveLayoutResult")," object it returns contains the width and height of the content, and optionally any layout data, as shown in the following example:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/primitives/SimpleImageViewPrimitiveComponent.kt start=start_image_primitive_layout_behavior_example end=end_image_primitive_layout_behavior_example",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/primitives/SimpleImageViewPrimitiveComponent.kt",start:"start_image_primitive_layout_behavior_example",end:"end_image_primitive_layout_behavior_example"},"internal object ImageLayoutBehavior : LayoutBehavior {\n  private const val defaultSize: Int = 150\n\n  override fun LayoutScope.layout(sizeConstraints: SizeConstraints): PrimitiveLayoutResult {\n    return PrimitiveLayoutResult(\n        size =\n            if (!sizeConstraints.hasBoundedWidth && !sizeConstraints.hasBoundedHeight) {\n              Size(defaultSize, defaultSize)\n            } else {\n              Size.withEqualDimensions(sizeConstraints)\n            })\n  }\n}\n")),(0,o.mdx)("p",null,"To learn about the different strategies to measure content, see the ",(0,o.mdx)("a",{parentName:"p",href:"/docs/mainconcepts/primitivecomponents/primitive-measuring"},"Measuring")," page."),(0,o.mdx)("h3",{id:"content-creation"},"Content creation"),(0,o.mdx)("admonition",{type:"note"},(0,o.mdx)("p",{parentName:"admonition"},"This stage of the Primitive's lifecycle can only occur on the main thread.")),(0,o.mdx)("p",null,"Each Primitive needs to create the content it hosts (either a ",(0,o.mdx)("inlineCode",{parentName:"p"},"View")," or a ",(0,o.mdx)("inlineCode",{parentName:"p"},"Drawable"),") by providing ",(0,o.mdx)("a",{parentName:"p",href:"https://github.com/facebook/litho/blob/75655943f348c0347d534e6931fb53b2f7f16195/litho-rendercore-primitives/src/main/java/com/facebook/rendercore/primitives/ContentAllocator.kt#L34-L64"},"a ViewAllocator or a DrawableAllocator")," to the ",(0,o.mdx)("inlineCode",{parentName:"p"},"MountBehavior"),", as shown in the following example:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=litho-widget/src/main/java/com/facebook/litho/widget/ExperimentalImage.kt start=start_image_primitive_mount_behavior_example end=end_image_primitive_mount_behavior_example",file:"litho-widget/src/main/java/com/facebook/litho/widget/ExperimentalImage.kt",start:"start_image_primitive_mount_behavior_example",end:"end_image_primitive_mount_behavior_example"},"MountBehavior(\n    DrawableAllocator(poolSize = 30, canPreallocate = true) {\n      MatrixDrawable<Drawable>()\n    }) {\n      bindWithLayoutData<PrimitiveImageLayoutData>(drawable, scaleType) {\n          content,\n          layoutData ->\n        content.mount(drawable, layoutData.matrix)\n        content.bind(layoutData.width, layoutData.height)\n        onUnbind { content.unmount() }\n      }\n    }\n")),(0,o.mdx)("admonition",{type:"note"},(0,o.mdx)("p",{parentName:"admonition"},"The content should not be mutated based on props passed to the PrimitiveComponent.")),(0,o.mdx)("p",null,"In order to optimize the mount performance, the properties of the View/Drawable Allocator can also be customized to adjust the ",(0,o.mdx)("a",{parentName:"p",href:"/docs/mainconcepts/primitivecomponents/primitive-preallocation"},"content pooling")," strategy."),(0,o.mdx)("h3",{id:"mounting-and-unmounting-content-properties"},"Mounting and unmounting content properties"),(0,o.mdx)("admonition",{type:"note"},(0,o.mdx)("p",{parentName:"admonition"},"This stage of the Primitive's lifecycle can only occur on the main thread.")),(0,o.mdx)("p",null,"Properties can be set and unset on the content using ",(0,o.mdx)("inlineCode",{parentName:"p"},"bindTo"),", ",(0,o.mdx)("inlineCode",{parentName:"p"},"bind"),", and ",(0,o.mdx)("inlineCode",{parentName:"p"},"bindWithLayoutData")," methods inside of ",(0,o.mdx)("inlineCode",{parentName:"p"},"MountBehavior")," scope."),(0,o.mdx)("p",null,"The following code shows a component that appropriately sets and unsets the properties on the content:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=litho-widget/src/main/java/com/facebook/litho/widget/ExperimentalImage.kt start=start_image_primitive_mount_behavior_example end=end_image_primitive_mount_behavior_example",file:"litho-widget/src/main/java/com/facebook/litho/widget/ExperimentalImage.kt",start:"start_image_primitive_mount_behavior_example",end:"end_image_primitive_mount_behavior_example"},"MountBehavior(\n    DrawableAllocator(poolSize = 30, canPreallocate = true) {\n      MatrixDrawable<Drawable>()\n    }) {\n      bindWithLayoutData<PrimitiveImageLayoutData>(drawable, scaleType) {\n          content,\n          layoutData ->\n        content.mount(drawable, layoutData.matrix)\n        content.bind(layoutData.width, layoutData.height)\n        onUnbind { content.unmount() }\n      }\n    }\n")),(0,o.mdx)("p",null,"Methods like ",(0,o.mdx)("inlineCode",{parentName:"p"},"bind")," and ",(0,o.mdx)("inlineCode",{parentName:"p"},"bindWithLayoutData")," take dependencies as an argument. Any time dependencies changes between layouts, the ",(0,o.mdx)("inlineCode",{parentName:"p"},"onUnbind {}")," callback will be invoked, followed by ",(0,o.mdx)("inlineCode",{parentName:"p"},"bind")," or ",(0,o.mdx)("inlineCode",{parentName:"p"},"bindWithLayoutData"),". Dependencies should include ",(0,o.mdx)("strong",{parentName:"p"},"all")," the props/state that are used to configure the content inside bind/bindWithLayoutData/onUnbind calls."),(0,o.mdx)("admonition",{type:"note"},(0,o.mdx)("p",{parentName:"admonition"},"Dependencies are checked for equivalence by calling equals.")),(0,o.mdx)("admonition",{title:"Important",type:"note"},(0,o.mdx)("p",{parentName:"admonition"},"Once set, a property should be unset in the ",(0,o.mdx)("inlineCode",{parentName:"p"},"onUnbind {}")," callback to ensure correctness when the content is reused.")))}v.isMDXComponent=!0}}]);