"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7875],{15680:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>s,MDXProvider:()=>p,mdx:()=>g,useMDXComponents:()=>m,withMDXComponents:()=>l});var a=t(96540);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(){return i=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e},i.apply(this,arguments)}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=a.createContext({}),l=function(e){return function(n){var t=m(n.components);return a.createElement(e,i({},n,{components:t}))}},m=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},p=function(e){var n=m(e.components);return a.createElement(s.Provider,{value:n},e.children)},h="mdxType",v={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,r=e.parentName,s=d(e,["components","mdxType","originalType","parentName"]),l=m(t),p=o,h=l["".concat(r,".").concat(p)]||l[p]||v[p]||i;return t?a.createElement(h,c(c({ref:n},s),{},{components:t})):a.createElement(h,c({ref:n},s))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,r=new Array(i);r[0]=u;var c={};for(var d in n)hasOwnProperty.call(n,d)&&(c[d]=n[d]);c.originalType=e,c[h]="string"==typeof e?e:o,r[1]=c;for(var s=2;s<i;s++)r[s]=t[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},56366:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>s,default:()=>u,frontMatter:()=>d,metadata:()=>l,toc:()=>p});var a=t(58168),o=t(98587),i=(t(96540),t(15680)),r=t(52112),c=["components"],d={id:"communicating-between-components",title:"Communicating Between Components"},s=void 0,l={unversionedId:"mainconcepts/coordinate-state-actions/communicating-between-components",id:"mainconcepts/coordinate-state-actions/communicating-between-components",title:"Communicating Between Components",description:"Dispatching an Event from a child to its parent",source:"@site/../docs/mainconcepts/coordinate-state-actions/communicating-between-components.md",sourceDirName:"mainconcepts/coordinate-state-actions",slug:"/mainconcepts/coordinate-state-actions/communicating-between-components",permalink:"/docs/mainconcepts/coordinate-state-actions/communicating-between-components",draft:!1,editUrl:"https://github.com/facebook/litho/edit/master/website/../docs/mainconcepts/coordinate-state-actions/communicating-between-components.md",tags:[],version:"current",frontMatter:{id:"communicating-between-components",title:"Communicating Between Components"},sidebar:"mainSidebar",previous:{title:"Hoisting State",permalink:"/docs/mainconcepts/coordinate-state-actions/hoisting-state"}},m={},p=[{value:"Dispatching an Event from a child to its parent",id:"dispatching-an-event-from-a-child-to-its-parent",level:3},{value:"Passing new Props from a parent to a child",id:"passing-new-props-from-a-parent-to-a-child",level:3},{value:"Triggering an Action on a child from a parent",id:"triggering-an-action-on-a-child-from-a-parent",level:3},{value:"Communicating between siblings",id:"communicating-between-siblings",level:3},{value:"Communicating externally to a component",id:"communicating-externally-to-a-component",level:3},{value:"With an observer",id:"with-an-observer",level:4},{value:"With a handle",id:"with-a-handle",level:4},{value:"Communicating externally from a Component",id:"communicating-externally-from-a-component",level:3}],h={toc:p},v="wrapper";function u(e){var n=e.components,t=(0,o.A)(e,c);return(0,i.mdx)(v,(0,a.A)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,i.mdx)("h3",{id:"dispatching-an-event-from-a-child-to-its-parent"},"Dispatching an Event from a child to its parent"),(0,i.mdx)("p",null,"In the Spec API, communicating from a child to a parent is done through an ",(0,i.mdx)("inlineCode",{parentName:"p"},"EventHandler"),", which handles a custom event type. The ",(0,i.mdx)("inlineCode",{parentName:"p"},"EventHandler")," is defined in the parent component and passed as a Prop to the child component.  For more information on Spec events, see the document ",(0,i.mdx)("a",{parentName:"p",href:"/docs/codegen/events-for-specs"},"Events for Specs")," page."),(0,i.mdx)(r.FbInternalOnly,{mdxType:"FbInternalOnly"},(0,i.mdx)("p",null,"In the Kotlin API, the parent component can simply pass a ",(0,i.mdx)("a",{parentName:"p",href:"https://kotlinlang.org/docs/lambdas.html"},"lambda")," as the callback instead of a reference to a generated ",(0,i.mdx)("inlineCode",{parentName:"p"},"EventHandler"),".\nFor more information on Kotlin events, see ",(0,i.mdx)("a",{parentName:"p",href:"/docs/kotlin/event-handling"},"Event Handling"),".")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java",metastring:"file=sample/src/main/java/com/facebook/samples/litho/java/communicating/ParentComponentReceivesEventFromChildSpec.java start=start_demo end=end_demo",file:"sample/src/main/java/com/facebook/samples/litho/java/communicating/ParentComponentReceivesEventFromChildSpec.java",start:"start_demo",end:"end_demo"},'@LayoutSpec\nclass ParentComponentReceivesEventFromChildSpec {\n\n  @OnCreateInitialState\n  static void onCreateInitialState(ComponentContext c, StateValue<String> infoText) {\n    infoText.set("No event received from ChildComponent");\n  }\n\n  @OnCreateLayout\n  static Component onCreateLayout(\n      ComponentContext c, @Prop ComponentEventObserver observer, @State String infoText) {\n\n    return Column.create(c)\n        .paddingDip(YogaEdge.ALL, 30)\n        .child(Text.create(c).text("ParentComponent").textSizeDip(30))\n        .child(Text.create(c).text(infoText).textSizeDip(15))\n        .child(\n            ChildComponentSendsEventToParent.create(c)\n                .observer(observer)\n                .notifyParentEventHandler(\n                    ParentComponentReceivesEventFromChild.onNotifyParentEvent(c)))\n        .build();\n  }\n\n  @OnEvent(NotifyParentEvent.class)\n  static void onNotifyParentEvent(ComponentContext c) {\n    ParentComponentReceivesEventFromChild.onUpdateInfoText(c);\n  }\n\n  @OnUpdateState\n  static void onUpdateInfoText(StateValue<String> infoText) {\n    infoText.set("Received event from ChildComponent!");\n  }\n}\n')),(0,i.mdx)("p",null,"The child component can invoke the event handler received from the parent to inform the parent that a certain action took place, such as when the child component receives a click event or, in a visibility handler, when it becomes visible.  The following code provides an example."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java",metastring:"file=sample/src/main/java/com/facebook/samples/litho/java/communicating/ChildComponentSendsEventToParentSpec.java start=start_demo end=end_demo",file:"sample/src/main/java/com/facebook/samples/litho/java/communicating/ChildComponentSendsEventToParentSpec.java",start:"start_demo",end:"end_demo"},'@LayoutSpec(events = {NotifyParentEvent.class})\nclass ChildComponentSendsEventToParentSpec {\n\n  @OnCreateLayout\n  static Component onCreateLayout(ComponentContext c) {\n    return Column.create(c)\n        .marginDip(YogaEdge.ALL, 30)\n        .child(Text.create(c).text("ChildComponent").textSizeDip(20))\n        .child(\n            Text.create(c)\n                .paddingDip(YogaEdge.ALL, 5)\n                .border(\n                    Border.create(c)\n                        .color(YogaEdge.ALL, Color.BLACK)\n                        .radiusDip(2f)\n                        .widthDip(YogaEdge.ALL, 1)\n                        .build())\n                .text("Click to send event to parent!")\n                .textSizeDip(15)\n                .clickHandler(ChildComponentSendsEventToParent.onClickEvent(c)))\n        .child(\n            Text.create(c)\n                .paddingDip(YogaEdge.ALL, 5)\n                .border(\n                    Border.create(c)\n                        .color(YogaEdge.ALL, Color.BLACK)\n                        .radiusDip(2f)\n                        .widthDip(YogaEdge.ALL, 1)\n                        .build())\n                .text("Click to send event to Activity!")\n                .textSizeDip(15)\n                .clickHandler(ChildComponentSendsEventToParent.onSendEventToActivity(c)))\n        .build();\n  }\n\n  @OnEvent(ClickEvent.class)\n  static void onClickEvent(ComponentContext c) {\n    ChildComponentSendsEventToParent.dispatchNotifyParentEvent(\n        ChildComponentSendsEventToParent.getNotifyParentEventHandler(c));\n  }\n\n  @OnEvent(ClickEvent.class)\n  static void onSendEventToActivity(ComponentContext c, @Prop ComponentEventObserver observer) {\n    observer.onComponentClicked();\n  }\n}\n')),(0,i.mdx)("h3",{id:"passing-new-props-from-a-parent-to-a-child"},"Passing new Props from a parent to a child"),(0,i.mdx)("p",null,"If a parent component needs to pass new data to a child, it can do so by simply passing new props to the child component.\nWhen the data is updated as a result of an action controlled by the parent component (for example, a click event on the parent component), the new data is passed down to the child component by triggering a 'state update', which updates the value of the prop that will be passed to the child component and recreates the child with this new value.  The child component receives the latest value of the state through the prop when it's created."),(0,i.mdx)("p",null,"The following code illustrates this concept with a click event on the parent component."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java",metastring:"file=sample/src/main/java/com/facebook/samples/litho/java/communicating/ParentComponentSendsEventToChildSpec.java start=start_update_prop end=end_update_prop",file:"sample/src/main/java/com/facebook/samples/litho/java/communicating/ParentComponentSendsEventToChildSpec.java",start:"start_update_prop",end:"end_update_prop"},'      .child(\n          Text.create(c)\n              .paddingDip(YogaEdge.ALL, 5)\n              .text("Click to send new text to ChildComponent")\n              .border(\n                  Border.create(c)\n                      .color(YogaEdge.ALL, Color.BLACK)\n                      .radiusDip(2f)\n                      .widthDip(YogaEdge.ALL, 1)\n                      .build())\n              .textSizeDip(15)\n              .clickHandler(ParentComponentSendsEventToChild.onClickCounter(c)))\n      .child(\n          ChildComponentReceivesEventFromParent.create(c)\n              .textFromParent("Version " + counterForChildComponentText))\n      .build();\n}\n\n@OnEvent(ClickEvent.class)\nstatic void onClickCounter(ComponentContext c) {\n  ParentComponentSendsEventToChild.onUpdateCounterForChildComponent(c);\n}\n\n@OnUpdateState\nstatic void onUpdateCounterForChildComponent(StateValue<Integer> counterForChildComponentText) {\n  counterForChildComponentText.set(counterForChildComponentText.get() + 1);\n}\n')),(0,i.mdx)("h3",{id:"triggering-an-action-on-a-child-from-a-parent"},"Triggering an Action on a child from a parent"),(0,i.mdx)("p",null,"There are cases when a parent needs to trigger an action on a child instead of just passing new data. To do this, the parent needs to keep a reference to the child and trigger an action on it using that reference."),(0,i.mdx)("p",null,"The reference to the child is maintained through a ",(0,i.mdx)("inlineCode",{parentName:"p"},"Handle")," instance, which the parent creates and passes to the child component as a prop:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java",metastring:"file=sample/src/main/java/com/facebook/samples/litho/java/communicating/ParentComponentSendsEventToChildSpec.java start=start_define_handle end=end_define_handle",file:"sample/src/main/java/com/facebook/samples/litho/java/communicating/ParentComponentSendsEventToChildSpec.java",start:"start_define_handle",end:"end_define_handle"},'@OnCreateInitialState\nstatic void onCreateInitialState(ComponentContext c, final StateValue<Handle> childHandle) {\n  childHandle.set(new Handle());\n}\n\n@OnCreateLayout\nstatic Component onCreateLayout(\n    ComponentContext c, @State int counterForChildComponentText, @State Handle childHandle) {\n  return Column.create(c)\n      .paddingDip(YogaEdge.ALL, 30)\n      .child(Text.create(c).text("ParentComponent").textSizeDip(30))\n      .child(\n          Text.create(c)\n              .paddingDip(YogaEdge.ALL, 5)\n              .text("Click to trigger show toast event on ChildComponent with handle")\n              .marginDip(YogaEdge.TOP, 15)\n              .border(\n                  Border.create(c)\n                      .color(YogaEdge.ALL, Color.BLACK)\n                      .radiusDip(2f)\n                      .widthDip(YogaEdge.ALL, 1)\n                      .build())\n              .textSizeDip(15)\n              .clickHandler(ParentComponentSendsEventToChild.onClickShowToast(c, childHandle)))\n      .child(\n          ChildComponentReceivesEventFromParent.create(c)\n              .textFromParent("Child with handle")\n              .handle(childHandle))\n')),(0,i.mdx)("p",null,"The parent uses the Handle reference to trigger an action on the child component:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java",metastring:"file=sample/src/main/java/com/facebook/samples/litho/java/communicating/ParentComponentSendsEventToChildSpec.java start=start_trigger end=end_trigger",file:"sample/src/main/java/com/facebook/samples/litho/java/communicating/ParentComponentSendsEventToChildSpec.java",start:"start_trigger",end:"end_trigger"},'@OnEvent(ClickEvent.class)\nstatic void onClickShowToast(ComponentContext c, @Param Handle childHandle) {\n  ChildComponentReceivesEventFromParent.triggerOnShowToastEvent(\n      c, childHandle, "ChildComponent received event from parent!");\n}\n')),(0,i.mdx)("p",null,"The action is defined on the child component using the ",(0,i.mdx)("inlineCode",{parentName:"p"},"@OnTrigger")," annotation in Java:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java",metastring:"file=sample/src/main/java/com/facebook/samples/litho/java/communicating/ChildComponentReceivesEventFromParentSpec.java start=start_define_trigger end=end_define_trigger",file:"sample/src/main/java/com/facebook/samples/litho/java/communicating/ChildComponentReceivesEventFromParentSpec.java",start:"start_define_trigger",end:"end_define_trigger"},"@OnTrigger(ShowToastEvent.class)\nstatic void triggerOnShowToastEvent(ComponentContext c, @FromTrigger String message) {\n  Toast.makeText(c.getAndroidContext(), message, Toast.LENGTH_SHORT).show();\n}\n")),(0,i.mdx)("p",null,"Defining triggers in ",(0,i.mdx)("inlineCode",{parentName:"p"},"KComponents")," is not supported yet, but they can invoke triggers as with Java Components."),(0,i.mdx)("h3",{id:"communicating-between-siblings"},"Communicating between siblings"),(0,i.mdx)("p",null,"Two sibling components (two child components of the same parent) cannot communicate directly. All communication must flow through the parent component, which intercepts events from a child component and notifies other child components of those events (using the methods detailed above)."),(0,i.mdx)("p",null,"A child component that needs to send a signal to a sibling component will dispatch an event to the common parent component:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java",metastring:"file=sample/src/main/java/com/facebook/samples/litho/java/communicating/ChildComponentSiblingCommunicationSpec.java start=start_dispatch_to_parent end=end_dispatch_to_parent",file:"sample/src/main/java/com/facebook/samples/litho/java/communicating/ChildComponentSiblingCommunicationSpec.java",start:"start_dispatch_to_parent",end:"end_dispatch_to_parent"},"@OnEvent(ClickEvent.class)\nstatic void onSelectRadioButton(ComponentContext c, @Prop int id) {\n  ChildComponentSiblingCommunication.dispatchSelectedRadioButtonEvent(\n      ChildComponentSiblingCommunication.getSelectedRadioButtonEventHandler(c), id);\n}\n")),(0,i.mdx)("p",null,"As shown in the following code, the parent component can:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"Perform a state update to recreate the sibling with new data (@OnUpdateState)"),(0,i.mdx)("li",{parentName:"ul"},"Trigger an event on the sibling using a reference (@OnEvent).")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java",metastring:"file=sample/src/main/java/com/facebook/samples/litho/java/communicating/ParentComponentMediatorSpec.java start=start_parent_mediator end=end_parent_mediator",file:"sample/src/main/java/com/facebook/samples/litho/java/communicating/ParentComponentMediatorSpec.java",start:"start_parent_mediator",end:"end_parent_mediator"},'@LayoutSpec\nclass ParentComponentMediatorSpec {\n\n  @OnCreateLayout\n  static Component onCreateLayout(ComponentContext c, @State int selectedPosition) {\n\n    return Column.create(c)\n        .paddingDip(YogaEdge.ALL, 30)\n        .child(Text.create(c).text("ParentComponent").textSizeDip(30))\n        .child(\n            ChildComponentSiblingCommunication.create(c)\n                .id(0)\n                .isSelected(selectedPosition == 0)\n                .selectedRadioButtonEventHandler(\n                    ParentComponentMediator.onSelectedRadioButtonEvent(c)))\n        .child(\n            ChildComponentSiblingCommunication.create(c)\n                .id(1)\n                .isSelected(selectedPosition == 1)\n                .selectedRadioButtonEventHandler(\n                    ParentComponentMediator.onSelectedRadioButtonEvent(c)))\n        .build();\n  }\n\n  @OnEvent(SelectedRadioButtonEvent.class)\n  static void onSelectedRadioButtonEvent(ComponentContext c, @FromEvent int selectedId) {\n    ParentComponentMediator.onUpdateSelectedRadioButtonId(c, selectedId);\n  }\n\n  @OnUpdateState\n  static void onUpdateSelectedRadioButtonId(\n      StateValue<Integer> selectedPosition, @Param int selectedId) {\n    selectedPosition.set(selectedId);\n  }\n}\n')),(0,i.mdx)("h3",{id:"communicating-externally-to-a-component"},"Communicating externally to a component"),(0,i.mdx)("p",null,"New data can be passed to a component from outside a Litho hierarchy by simply creating a new root component with new props."),(0,i.mdx)("p",null,"There are multiple ways to perform an action on a component from outside a Litho hierarchy. The preferred method to pass new information to a component is by recreating it with new props; sometimes, it's necessary to trigger an action from non-Litho systems."),(0,i.mdx)("h4",{id:"with-an-observer"},"With an observer"),(0,i.mdx)("p",null,"An interface callback is invoked externally:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java",metastring:"file=sample/src/main/java/com/facebook/samples/litho/java/stateupdates/StateUpdateFromOutsideTreeActivity.java start=start_external_observer end=end_external_observer",file:"sample/src/main/java/com/facebook/samples/litho/java/stateupdates/StateUpdateFromOutsideTreeActivity.java",start:"start_external_observer",end:"end_external_observer"},'container.addView(\n    LithoView.create(\n        componentContext,\n        StateUpdateFromOutsideTreeWithListenerComponent.create(componentContext)\n            .eventObserver(observer1)\n            .build()));\n\nfinal Button button1 = new Button(this);\nbutton1.setText("Dispatch Event 1");\nbutton1.setOnClickListener(\n    new View.OnClickListener() {\n      @Override\n      public void onClick(View v) {\n        observer1.notifyExternalEventOccurred();\n      }\n    });\n')),(0,i.mdx)("p",null,"The Component implements the callback and dispatches a state update on itself when the callback is invoked. No props or state should be captured in the callback: the callback will not be updated if they change, as illustrated in the following code."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java",metastring:"file=sample/src/main/java/com/facebook/samples/litho/java/stateupdates/StateUpdateFromOutsideTreeWithListenerComponentSpec.java start=start_implement_observer end=end_implement_observer",file:"sample/src/main/java/com/facebook/samples/litho/java/stateupdates/StateUpdateFromOutsideTreeWithListenerComponentSpec.java",start:"start_implement_observer",end:"end_implement_observer"},"@OnCreateInitialState\nstatic void onCreateInitialState(\n    final ComponentContext c,\n    StateValue<Integer> counter,\n    @Prop ExternalEventObserver eventObserver) {\n  counter.set(0);\n  eventObserver.setListener(\n      new ExternalEventObserver.Listener() {\n        @Override\n        public void onMyEvent() {\n          // Note: you should not capture any props/state besides the ComponentContext here\n          // because they will not be updated for this callback if they change!\n          StateUpdateFromOutsideTreeWithListenerComponent.incrementCounter(c);\n        }\n      });\n}\n")),(0,i.mdx)("h4",{id:"with-a-handle"},"With a handle"),(0,i.mdx)("p",null,"A Handle reference can be created and passed to a Component, then used to invoke a trigger defined in the component:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java",metastring:"file=sample/src/main/java/com/facebook/samples/litho/java/stateupdates/StateUpdateFromOutsideTreeActivity.java start=start_external_handle end=end_external_handle",file:"sample/src/main/java/com/facebook/samples/litho/java/stateupdates/StateUpdateFromOutsideTreeActivity.java",start:"start_external_handle",end:"end_external_handle"},'final Handle componentHandle = new Handle();\nfinal LithoView lithoViewWithTrigger =\n    LithoView.create(\n        componentContext,\n        StateUpdateFromOutsideTreeWithTriggerComponent.create(componentContext)\n            .handle(componentHandle)\n            .build());\n\nfinal Button button2 = new Button(this);\nbutton2.setText("Dispatch Event 2");\nbutton2.setOnClickListener(\n    new View.OnClickListener() {\n      @Override\n      public void onClick(View v) {\n        StateUpdateFromOutsideTreeWithTriggerComponent.notifyExternalEvent(\n            // This is a bit of a gotcha right now: you need to use the ComponentContext from\n            // the ComponentTree to dispatch the trigger from outside a Component.\n            lithoViewWithTrigger.getComponentTree().getContext(),\n            componentHandle,\n            1 /* pass through the increment to show you can pass arbitrary data */);\n      }\n    });\n')),(0,i.mdx)("h3",{id:"communicating-externally-from-a-component"},"Communicating externally from a Component"),(0,i.mdx)("p",null,"To send events from a component to a listener outside of the Litho hierarchy, define an observer externally and invoke it from a component lifecycle method."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java",metastring:"file=sample/src/main/java/com/facebook/samples/litho/java/communicating/CommunicatingFromChildToParent.java start=start_define_observer end=end_define_observer",file:"sample/src/main/java/com/facebook/samples/litho/java/communicating/CommunicatingFromChildToParent.java",start:"start_define_observer",end:"end_define_observer"},'  final ComponentContext c = new ComponentContext(this);\n  setContentView(\n      LithoView.create(\n          c,\n          ParentComponentReceivesEventFromChild.create(c)\n              .observer(\n                  new ComponentEventObserver() {\n                    @Override\n                    public void onComponentClicked() {\n                      Toast.makeText(\n                              c.getAndroidContext(),\n                              "Activity received event from child",\n                              Toast.LENGTH_SHORT)\n                          .show();\n                    }\n                  })\n              .build()));\n}\n\npublic interface ComponentEventObserver {\n  void onComponentClicked();\n}\n')),(0,i.mdx)("admonition",{type:"tip"},(0,i.mdx)("p",{parentName:"admonition"},"Keep in mind that some lifecycle methods of Litho components can be invoked on background threads, so invoking callbacks from these methods might not be thread-safe if the callback produces side-effects.")))}u.isMDXComponent=!0}}]);