"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1599],{15680:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>s,MDXProvider:()=>p,mdx:()=>x,useMDXComponents:()=>m,withMDXComponents:()=>d});var i=n(96540);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(){return a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},a.apply(this,arguments)}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=i.createContext({}),d=function(e){return function(t){var n=m(t.components);return i.createElement(e,a({},t,{components:n}))}},m=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=m(e.components);return i.createElement(s.Provider,{value:t},e.children)},h="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},f=i.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),d=m(n),p=o,h=d["".concat(l,".").concat(p)]||d[p]||u[p]||a;return n?i.createElement(h,r(r({ref:t},s),{},{components:n})):i.createElement(h,r({ref:t},s))}));function x(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=f;var r={};for(var c in t)hasOwnProperty.call(t,c)&&(r[c]=t[c]);r.originalType=e,r[h]="string"==typeof e?e:o,l[1]=r;for(var s=2;s<a;s++)l[s]=n[s];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}f.displayName="MDXCreateElement"},62517:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>m});var i=n(58168),o=n(98587),a=(n(96540),n(15680)),l=["components"],r={id:"communicating-with-the-ui",title:"Scrolling and communicating with the UI"},c=void 0,s={unversionedId:"sections/communicating-with-the-ui",id:"sections/communicating-with-the-ui",title:"Scrolling and communicating with the UI",description:"This page covers the older Java codegen-based Sections API. If using the Kotlin Lazy Collection API, refer to the interactions docs for Lazy Collection for similar relevant content.",source:"@site/../docs/sections/communicating-with-the-ui.md",sourceDirName:"sections",slug:"/sections/communicating-with-the-ui",permalink:"/docs/sections/communicating-with-the-ui",draft:!1,editUrl:"https://github.com/facebook/litho/edit/master/website/../docs/sections/communicating-with-the-ui.md",tags:[],version:"current",frontMatter:{id:"communicating-with-the-ui",title:"Scrolling and communicating with the UI"},sidebar:"mainSidebar",previous:{title:"Prefetch and Pagination",permalink:"/docs/sections/working-ranges"},next:{title:"Granular Dependency Injection",permalink:"/docs/sections/services"}},d={},m=[{value:"Introduction",id:"introduction",level:2},{value:"@OnRefresh",id:"onrefresh",level:2},{value:"API",id:"api",level:3},{value:"@OnViewportChanged",id:"onviewportchanged",level:2},{value:"API",id:"api-1",level:3},{value:"Change in Viewport",id:"change-in-viewport",level:3},{value:"Positions and Counts",id:"positions-and-counts",level:3},{value:"@OnDataBound",id:"ondatabound",level:2},{value:"Scrolling: requestFocus()",id:"scrolling-requestfocus",level:2},{value:"API",id:"api-2",level:3},{value:"SectionLifecycle.requestFocus(SectionContext c, int index)",id:"sectionlifecyclerequestfocussectioncontext-c-int-index",level:4},{value:"SectionLifecycle.requestFocus(SectionContext c, String sectionKey)",id:"sectionlifecyclerequestfocussectioncontext-c-string-sectionkey",level:4},{value:"SectionLifecycle.requestFocusWithOffset(SectionContext c, int index, int offset)",id:"sectionlifecyclerequestfocuswithoffsetsectioncontext-c-int-index-int-offset",level:4},{value:"SectionLifecycle.requestFocusWithOffset(SectionContext c, String sectionKey, int offset)",id:"sectionlifecyclerequestfocuswithoffsetsectioncontext-c-string-sectionkey-int-offset",level:4},{value:"SectionLifecycle.requestFocus(SectionContext c, String sectionKey, FocusType focusType)",id:"sectionlifecyclerequestfocussectioncontext-c-string-sectionkey-focustype-focustype",level:4},{value:"SectionLifecycle.requestSmoothFocus(SectionContext c, int index, SmoothScrollAlignmentType type)",id:"sectionlifecyclerequestsmoothfocussectioncontext-c-int-index-smoothscrollalignmenttype-type",level:4},{value:"@OnEvent(LoadingEvent.class)",id:"oneventloadingeventclass",level:2},{value:"API",id:"api-3",level:3},{value:"LoadingState loadingState",id:"loadingstate-loadingstate",level:4},{value:"boolean isEmpty",id:"boolean-isempty",level:4},{value:"Throwable t",id:"throwable-t",level:4},{value:"Dispatch up the hierarchy",id:"dispatch-up-the-hierarchy",level:3}],p={toc:m},h="wrapper";function u(e){var t=e.components,n=(0,o.A)(e,l);return(0,a.mdx)(h,(0,i.A)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.mdx)("admonition",{type:"caution"},(0,a.mdx)("p",{parentName:"admonition"},"This page covers the older Java codegen-based Sections API. If using the Kotlin Lazy Collection API, refer to the ",(0,a.mdx)("a",{parentName:"p",href:"/docs/kotlin/lazycollections/lazycollections-interactions"},"interactions docs for Lazy Collection")," for similar relevant content.")),(0,a.mdx)("h2",{id:"introduction"},"Introduction"),(0,a.mdx)("p",null,"Data flows through the section hierarchy before they are eventually represented on the UI by components.\nSection provides a set of functionalities to allow you to respond to the data and interact with the UI."),(0,a.mdx)("h2",{id:"onrefresh"},"@OnRefresh"),(0,a.mdx)("p",null,"A method annotated with this annotation will be called when the the UI rendered by the\nsection's hierarchy is requesting for a refresh of the content."),(0,a.mdx)("h3",{id:"api"},"API"),(0,a.mdx)("p",null,"Call ",(0,a.mdx)("inlineCode",{parentName:"p"},"SectionTree#refresh()")," to propagate your refresh request to all the sections in the hierarchy. Then you can handle it in your section like this:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-java"},"class SectionSpec {\n\n  @OnRefresh\n  static void onRefresh(SectionContext c, @Prop yourProp, @State yourState) {\n    // Handle your refresh request\n  }\n}\n")),(0,a.mdx)("h2",{id:"onviewportchanged"},"@OnViewportChanged"),(0,a.mdx)("p",null,"A method annotated with this annotation will be called when there is a change in the visible viewport."),(0,a.mdx)("h3",{id:"api-1"},"API"),(0,a.mdx)("p",null,"Call ",(0,a.mdx)("inlineCode",{parentName:"p"},"SectionTree#viewPortChanged()")," or ",(0,a.mdx)("inlineCode",{parentName:"p"},"SectionTree#viewPortChangedFromScrolling()")," to allow your sections to know that something on the viewport is now different."),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-java"},"class SectionSpec {\n\n  @OnViewportChanged\n  static void onViewportChanged(\n    SectionContext c,\n    int firstVisiblePosition,\n    int lastVisiblePosition,\n    int totalCount,\n    int firstFullyVisibleIndex,\n    int lastFullyVisibleIndex,\n    @Prop YourProp prop,\n    @State YourState state) {\n  }\n}\n")),(0,a.mdx)("ol",null,(0,a.mdx)("li",{parentName:"ol"},(0,a.mdx)("p",{parentName:"li"},(0,a.mdx)("inlineCode",{parentName:"p"},"firstVisiblePosition"),"\nPosition of the first visible components in the viewport. Components are partially\nhidden from the visible viewport.")),(0,a.mdx)("li",{parentName:"ol"},(0,a.mdx)("p",{parentName:"li"},(0,a.mdx)("inlineCode",{parentName:"p"},"lastVisiblePosition"),"\nPosition of the last visible components in the viewport. Components are partially\nhidden from the visible viewport.")),(0,a.mdx)("li",{parentName:"ol"},(0,a.mdx)("p",{parentName:"li"},(0,a.mdx)("inlineCode",{parentName:"p"},"totalCount"),"\nTotal number of items in the section's hierarchy, with the section that contains the\nannotated method as its root.")),(0,a.mdx)("li",{parentName:"ol"},(0,a.mdx)("p",{parentName:"li"},(0,a.mdx)("inlineCode",{parentName:"p"},"firstFullyVisibleIndex"),"\nPosition of the first fully visible components in the viewport.")),(0,a.mdx)("li",{parentName:"ol"},(0,a.mdx)("p",{parentName:"li"},(0,a.mdx)("inlineCode",{parentName:"p"},"lastFullyVisibleIndex"),"\nPosition of the last fully visible components in the viewport."))),(0,a.mdx)("h3",{id:"change-in-viewport"},"Change in Viewport"),(0,a.mdx)("p",null,"A viewport change could occur due to any number of the following reasons:"),(0,a.mdx)("ol",null,(0,a.mdx)("li",{parentName:"ol"},"Components added to the visible viewport."),(0,a.mdx)("li",{parentName:"ol"},"Components removed from the visible viewport."),(0,a.mdx)("li",{parentName:"ol"},"Scrolling."),(0,a.mdx)("li",{parentName:"ol"},"Components in the visible viewport are updated."),(0,a.mdx)("li",{parentName:"ol"},"Components have moved in or out of the visible viewport.")),(0,a.mdx)("h3",{id:"positions-and-counts"},"Positions and Counts"),(0,a.mdx)("p",null,"Positions and total count returned are with respect to the number of components this section has.\nFor example:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"       Section A\n      /         \\\n Section B   Section C\n    |           |\n  10 items    10 items\n  (visible)   (hidden)\n")),(0,a.mdx)("p",null," When the first item of Section C comes into the viewport due to scrolling, ",(0,a.mdx)("inlineCode",{parentName:"p"},"firstVisiblePosition")," of ",(0,a.mdx)("inlineCode",{parentName:"p"},"Section C")," is 0 while the ",(0,a.mdx)("inlineCode",{parentName:"p"},"lastVisiblePosition")," of ",(0,a.mdx)("inlineCode",{parentName:"p"},"Section B")," is 10."),(0,a.mdx)("p",null," Section A has a total of 20 items while Section B and C have 10 each."),(0,a.mdx)("h2",{id:"ondatabound"},"@OnDataBound"),(0,a.mdx)("p",null,"A method annotated with this annotation will be called when the data changes corresponding to this\nsection's hierarchy is made available to the ",(0,a.mdx)("inlineCode",{parentName:"p"},"SectionTree.Target"),"."),(0,a.mdx)("p",null,"Data changes could occur due to any number of the following:"),(0,a.mdx)("ol",null,(0,a.mdx)("li",{parentName:"ol"},"Insertion"),(0,a.mdx)("li",{parentName:"ol"},"Update"),(0,a.mdx)("li",{parentName:"ol"},"Delete"),(0,a.mdx)("li",{parentName:"ol"},"Move")),(0,a.mdx)("p",null,"Availability of these data changes do not mean they are visible on the viewport.\nTo detect visibility, use ",(0,a.mdx)("inlineCode",{parentName:"p"},"@OnViewportChanged"),"."),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-java"},"class SectionSpec {\n\n  @OnDataBound\n  static void OnDataBound(\n    SectionContext c,\n    @Prop YourProp prop\n    @State YourState state) {\n    // Handle data changes\n  }\n}\n")),(0,a.mdx)("h2",{id:"scrolling-requestfocus"},"Scrolling: requestFocus()"),(0,a.mdx)("p",null,"Use this method to give focus to one of the components in a section. If the component is hidden from the visible viewport, the section will be scrolled to reveal it, thereby calling the ",(0,a.mdx)("inlineCode",{parentName:"p"},"@OnViewportChanged")," annotated method."),(0,a.mdx)("p",null,"The data that renders the component being requested for focus has to be available before the method can work. Hence, only use ",(0,a.mdx)("inlineCode",{parentName:"p"},"requestFocus()")," after the ",(0,a.mdx)("inlineCode",{parentName:"p"},"@OnDataBound")," annotated method has been called."),(0,a.mdx)("h3",{id:"api-2"},"API"),(0,a.mdx)("p",null,"There a few variations of the ",(0,a.mdx)("inlineCode",{parentName:"p"},"requestFocus()")," method."),(0,a.mdx)("h4",{id:"sectionlifecyclerequestfocussectioncontext-c-int-index"},"SectionLifecycle.requestFocus(SectionContext c, int index)"),(0,a.mdx)("p",null,"Calls focus by the index of the ",(0,a.mdx)("inlineCode",{parentName:"p"},"Component")," in the ",(0,a.mdx)("inlineCode",{parentName:"p"},"Section")," scoped by the given ",(0,a.mdx)("inlineCode",{parentName:"p"},"SectionContext")),(0,a.mdx)("admonition",{type:"info"},(0,a.mdx)("p",{parentName:"admonition"},"As with ",(0,a.mdx)("inlineCode",{parentName:"p"},"@OnViewportChanged"),", the index is with respect to the number of components this section has.")),(0,a.mdx)("h4",{id:"sectionlifecyclerequestfocussectioncontext-c-string-sectionkey"},"SectionLifecycle.requestFocus(SectionContext c, String sectionKey)"),(0,a.mdx)("p",null,"Calls focus to the first index of the component in the section represented by the section's key you provided."),(0,a.mdx)("h4",{id:"sectionlifecyclerequestfocuswithoffsetsectioncontext-c-int-index-int-offset"},"SectionLifecycle.requestFocusWithOffset(SectionContext c, int index, int offset)"),(0,a.mdx)("p",null,"Same as ",(0,a.mdx)("inlineCode",{parentName:"p"},"SectionLifecycle.requestFocus(SectionContext c, int index)")," but with an offset."),(0,a.mdx)("h4",{id:"sectionlifecyclerequestfocuswithoffsetsectioncontext-c-string-sectionkey-int-offset"},"SectionLifecycle.requestFocusWithOffset(SectionContext c, String sectionKey, int offset)"),(0,a.mdx)("p",null,"Same as ",(0,a.mdx)("inlineCode",{parentName:"p"},"SectionLifecycle.requestFocus(SectionContext c, String sectionKey)")," but with an offset."),(0,a.mdx)("h4",{id:"sectionlifecyclerequestfocussectioncontext-c-string-sectionkey-focustype-focustype"},"SectionLifecycle.requestFocus(SectionContext c, String sectionKey, FocusType focusType)"),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"FocusType")," is either:"),(0,a.mdx)("ol",null,(0,a.mdx)("li",{parentName:"ol"},(0,a.mdx)("p",{parentName:"li"},(0,a.mdx)("inlineCode",{parentName:"p"},"FocusType.START"),"\nCalls focus to the first index of the component in the section")),(0,a.mdx)("li",{parentName:"ol"},(0,a.mdx)("p",{parentName:"li"},(0,a.mdx)("inlineCode",{parentName:"p"},"FocusType.END"),"\nCalls focus to the last index of the component in the section"))),(0,a.mdx)("h4",{id:"sectionlifecyclerequestsmoothfocussectioncontext-c-int-index-smoothscrollalignmenttype-type"},"SectionLifecycle.requestSmoothFocus(SectionContext c, int index, SmoothScrollAlignmentType type)"),(0,a.mdx)("p",null,"Use this variation if you need to specify a snapping mode.\n",(0,a.mdx)("inlineCode",{parentName:"p"},"SmoothScrollAlignmentType")," is either:"),(0,a.mdx)("ol",null,(0,a.mdx)("li",{parentName:"ol"},(0,a.mdx)("inlineCode",{parentName:"li"},"SNAP_TO_ANY")),(0,a.mdx)("li",{parentName:"ol"},(0,a.mdx)("inlineCode",{parentName:"li"},"SNAP_TO_START")),(0,a.mdx)("li",{parentName:"ol"},(0,a.mdx)("inlineCode",{parentName:"li"},"SNAP_TO_END")),(0,a.mdx)("li",{parentName:"ol"},(0,a.mdx)("inlineCode",{parentName:"li"},"SNAP_TO_CENTER"))),(0,a.mdx)("p",null,"For the full list of methods available to request scroll to a position, check out the ",(0,a.mdx)("a",{parentName:"p",href:"pathname:///javadoc/com/facebook/litho/sections/SectionLifecycle.html"},"SectionLifecycle")," documentation."),(0,a.mdx)("h2",{id:"oneventloadingeventclass"},"@OnEvent(LoadingEvent.class)"),(0,a.mdx)("p",null,"Sections should use this annotation to declare a method to receive events about its children loading\nstate."),(0,a.mdx)("h3",{id:"api-3"},"API"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-java"},"class YourSectionSpec {\n\n  @OnCreateChildren\n  protected static Children onCreateChildren(SectionContext c) {\n    return Children.create()\n        .child(\n          ChildSection\n            .create(c)\n            .loadingEventHandler(YourSection.onLoadingEvent(c)))\n        .build();\n  }\n\n  @OnEvent(LoadingEvent.class)\n  static void onLoadingEvent(\n    SectionContext c,\n    @FromEvent LoadingState loadingState,\n    @FromEvent boolean isEmpty,\n    @FromEvent Throwable t) {\n\n    switch (loadingState) {\n        case INITIAL_LOAD:\n        case LOADING:\n          // Handle loading\n          break;\n        case FAILED:\n          // Handle failure\n          break;\n        case SUCCEEDED:\n          // Handle success\n          break;\n    }\n\n    // Dispatch the same loading event up the hierarchy.\n    SectionLifecycle.dispatchLoadingEvent(\n        c,\n        isEmpty,\n        loadingState,\n        t);\n  }\n}\n")),(0,a.mdx)("h4",{id:"loadingstate-loadingstate"},"LoadingState loadingState"),(0,a.mdx)("ol",null,(0,a.mdx)("li",{parentName:"ol"},(0,a.mdx)("p",{parentName:"li"},(0,a.mdx)("inlineCode",{parentName:"p"},"INITIAL_LOAD"),"\nLoading has started")),(0,a.mdx)("li",{parentName:"ol"},(0,a.mdx)("p",{parentName:"li"},(0,a.mdx)("inlineCode",{parentName:"p"},"LOADING"),"\nLoading is still ongoing")),(0,a.mdx)("li",{parentName:"ol"},(0,a.mdx)("p",{parentName:"li"},(0,a.mdx)("inlineCode",{parentName:"p"},"SUCCEEDED"),"\nLoading is successful")),(0,a.mdx)("li",{parentName:"ol"},(0,a.mdx)("p",{parentName:"li"},(0,a.mdx)("inlineCode",{parentName:"p"},"FAILED"),"\nLoading has failed."))),(0,a.mdx)("h4",{id:"boolean-isempty"},"boolean isEmpty"),(0,a.mdx)("p",null,"Returns true if the data set is empty after the loading event"),(0,a.mdx)("h4",{id:"throwable-t"},"Throwable t"),(0,a.mdx)("p",null,"Returns the reason for a ",(0,a.mdx)("inlineCode",{parentName:"p"},"LOAD_FAILED")," event"),(0,a.mdx)("h3",{id:"dispatch-up-the-hierarchy"},"Dispatch up the hierarchy"),(0,a.mdx)("p",null,"The loading event will be passed up the hierarchy until there is a section that has chosen to handle\nit. If your section handles the loading event, it has to dispatch the event up its hierarchy if\nthere are parent sections looking to handle it as well."),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-java"},"SectionLifecycle.dispatchLoadingEvent(c, isEmpty, loadingState, t);\n")))}u.isMDXComponent=!0}}]);