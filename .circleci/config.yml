version: 2.1
aliases:
  # NDK Cache aliases
  - &restore-cache-ndk
    keys:
      - v2-android-ndk-{{ arch }}-r15c-{{ checksum "workspace/repo/scripts/circle-ci-android-setup.sh" }}
  - &save-cache-ndk
    paths:
      - /opt/ndk
    key: v2-android-ndk-{{ arch }}-r15c-{{ checksum "workspace/repo/scripts/circle-ci-android-setup.sh" }}

  # SDK Cache aliases
  - &restore-cache-android-packages
    keys:
      - v5-android-sdkmanager-packages-{{ arch }}-api-27-alpha-{{ checksum "workspace/repo/scripts/circle-ci-android-setup.sh" }}
  - &save-cache-android-packages
    paths:
      - /opt/android/sdk
    key: v5-android-sdkmanager-packages-{{ arch }}-api-27-alpha-{{ checksum "workspace/repo/scripts/circle-ci-android-setup.sh" }}

  # Build dependencies Cache aliases
  - &restore-cache-apt
    keys:
      - v4-apt-{{ arch }}-{{ .Branch }}-{{ checksum "workspace/repo/scripts/apt-get-android-deps.sh" }}
  - &save-cache-apt
    paths:
      - ~/vendor/apt
    key: v4-apt-{{ arch }}-{{ .Branch }}-{{ checksum "workspace/repo/scripts/apt-get-android-deps.sh" }}

  # Repo Cache aliases
  - &restore-repo-cache
    keys:
      - v3-jars-{{ checksum "workspace/repo/build.gradle" }}-{{ checksum  "workspace/repo/gradle.properties" }}
  - &save-repo-cache
    paths:
      - ~/.gradle/caches
      - ~/.gradle/wrapper
    key: v3-jars-{{ checksum "workspace/repo/build.gradle" }}-{{ checksum  "workspace/repo/gradle.properties" }}

  # Install Android NDK packages needed
  - &install-ndk
    name: Install Android NDK
    command: source $HOME/litho-working-dir/workspace/repo/scripts/circle-ci-android-setup.sh && getAndroidNDK

  # Install Android SDK packages needed
  - &install-android-packages
    name: Install Android SDK Packages
    command: source $HOME/litho-working-dir/workspace/repo/scripts/circle-ci-android-setup.sh && installAndroidSDK

  # Install build dependencies
  - &install-android-build-dependencies
    name: Install Android Build Dependencies
    command: $HOME/litho-working-dir/workspace/repo/scripts/apt-get-android-deps.sh

  #  Create Android NDK directory
  - &create-android-ndk-dir
    name: Create Android NDK Directory
    command: |
      if [[ ! -e /opt/ndk ]]; then
        sudo mkdir /opt/ndk
      fi
      sudo chown ${USER:=$(/usr/bin/id -run)}:$USER /opt/ndk

  # Setup KEY
  - &setup-keys
    name: Set up keys
    command: |
      cd workspace/repo
      [ -n \"$KEY\" ] && openssl aes-256-cbc -d -in scripts/setup-keys.enc -k $KEY >> gradle.properties || true

  # Download project Gradle dependencies
  - &download-gradle-dependencies
    name: Download Gradle dependencies
    command: |
      cd workspace/repo
      ./gradlew :litho-it:testDebugUnitTest --tests "*NodeInfoTest" --no-daemon

  # Save Litho Gradle test results
  - &save-litho-gradle-tests-results
    name: Save Litho Gradle tests results
    command: |
      cd workspace
      mkdir -p junit
      cd repo
      find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/litho-working-dir/workspace/junit/ \;
    when: always

attach_workspace: &attach_workspace
  attach_workspace:
    at: ~/litho-working-dir/workspace

store_litho_tests_results: &store_litho_tests_results
  store_test_results:
    path: ~/litho-working-dir/workspace/junit

store_litho_artifacts: &store_litho_artifacts
  store_artifacts:
    path: ~/litho-working-dir/workspace/junit

executors:
  litho-executor:
    docker:
      - image: circleci/android:api-28-ndk-r17b
    working_directory: ~/litho-working-dir
    environment:
      # Borrowed from https://github.com/chrisbanes/tivi/blob/master/.circleci/config.yml
      # Sometimes gradle_tests_run job would fail with OOM error from CI. This is an attempt to fix it!
      _JAVA_OPTIONS: "-Xmx1500m -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -XX:ParallelGCThreads=2 -XX:ConcGCThreads=2 -XX:ParallelGCThreads=2 -Djava.util.concurrent.ForkJoinPool.common.parallelism=2"
      TERM: 'dumb'
      ANDROID_NDK_REPOSITORY: '/opt/ndk'
      ANDROID_NDK_HOME: '/opt/ndk/android-ndk-r15c/'

commands:
  attach_restore_setup:
    description: "A command that attaches to workspace, restores caches"
    steps:
      - *attach_workspace
      - run: *create-android-ndk-dir
      - restore_cache: *restore-cache-ndk
      - restore_cache: *restore-repo-cache
      - restore_cache: *restore-cache-android-packages

  gradle_build:
    description: "A command that uses Gradle for builds"
    parameters:
      module_name:
        type: string
    steps:
      - attach_restore_setup
      - run:
          name: Build <<parameters.module_name>> with Gradle
          command: |
            cd workspace/repo
            ./gradlew :<<parameters.module_name>>:assembleDebug --no-daemon --max-workers 2

jobs:
  checkout_code:
    executor: litho-executor
    steps:
      # Create folders needed
      - run: mkdir -p workspace
      - run: mkdir -p repo

      # Checkout code into repo
      - checkout:
          path: workspace/repo

      # Manage Android NDK caches
      - run: *create-android-ndk-dir
      - restore_cache: *restore-cache-ndk
      - run: *install-ndk
      - save_cache: *save-cache-ndk

      # Manage Android build depencies caches
      - restore_cache: *restore-cache-apt
      - run: *install-android-build-dependencies
      - save_cache: *save-cache-apt

      # Manage Android SDK caches
      - restore_cache: *restore-cache-android-packages
      - run: *install-android-packages
      - save_cache: *save-cache-android-packages

      # Persist repo code
      - persist_to_workspace:
          root: workspace
          paths:
            - repo

  build:
    executor: litho-executor
    steps:
      - run: *download-gradle-dependencies
      - save_cache: *save-repo-cache

  gradle_sample_build:
    executor: litho-executor
    steps:
      - gradle_build:
          module_name: "sample"

  gradle_sample_kotlin_build:
    executor: litho-executor
    steps:
      - gradle_build:
          module_name: "sample-kotlin"

  gradle_tests_run:
    executor: litho-executor
    steps:
      - attach_restore_setup
      - run:
          name: Run test with Gradle
          command: |
            cd workspace/repo
            # Temporarily exclude IntelliJ Plugin tests.
            ./gradlew test -x :litho-intellij-plugin:test --no-daemon --max-workers 2
      - run: *save-litho-gradle-tests-results
      - *store_litho_tests_results
      - *store_litho_artifacts

  publish_snapshot:
    executor: litho-executor
    steps:
      - attach_restore_setup
      - run: *setup-keys
      - run:
          name: Publish Snapshot
          command: |
            cd workspace/repo
            scripts/circle-ci-publish-snapshot.sh

workflows:
  version: 2
  build_and_test:
    jobs:
      - checkout_code
      - build:
          requires:
            - checkout_code
      - gradle_sample_build:
          requires:
            - build
      - gradle_sample_kotlin_build:
          requires:
            - build
      - gradle_tests_run:
          requires:
            - build
      - publish_snapshot:
          requires:
            - gradle_tests_run
          filters:
            branches:
              only: master
